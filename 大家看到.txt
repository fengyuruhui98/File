

用户级线程和内核级线程的区别：
内核支持：用户级线程可在一个不支持线程的OS中实现；内核支持线程则需要得到OS内核的支持。亦即内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。
处理器分配：在多处理机环境下，对用户级线程而言主，内核一次只为一个进程分配一个处理器，进程无法享用多处理机带来的好处；在设置有内核支持线程时，内核可调度一个应用中的多个线程同时在多个处理器上并行运行，提高程序的执行速度和效率。
调度和线程执行时间：设置有内核支持线程的系统，其调度方式和算法与进程的调度十分相似，只不过调度单位是线程；对只设置了用户级线程的系统，调度的单位仍为进程。
用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。
在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。
内核线程与用户线程的联系
一对一模型
特点
有了内核线程，每个用户线程被映射或绑定到一个内核线程。用户线程在其生命期内都会绑定到该内核线程。一旦用户线程终止，两个线程都将离开系统。这被称作"一对一"线程映射。（反过来，一个内核线程不一定就会对应一个用户线程）。一般一直使用API或者是系统调用创建的线程均为一对一线程。例如，linux使用clone创建的线程，以及win下使用CreateThread创建的线程。

弊端
内核线程数量有限
许多操作系统内核线程调用的时候，上下文切换的开销很大。

混合线程模型
混合线程实现是用户线程和内核线程的交叉，使得库和操作系统都可以管理线程。用户线程由运行时库调度器管理，内核线程由操作系统调度器管理。在这种实现中，进程有着自己的内核线程池。可运行的用户线程由运行时库分派并标记为准备好执行的可用线程。操作系统选择用户线程并将它映射到线程池中的可用内核线程。多个用户线程可以分配给相同的内核线程。

多对一模型
特点
多对一的模型将多个用户线程映射到一个内核线程。
多对一模型线程的切换速度要快很多（线程之间的切换由用户代码来执行）

弊端
如果其中一个线程阻塞，那么所有线程将无法执行。

多对多模型
特点
将上述两种模型的特点进行综合，即将多个用户线程映射到少数但不只一个内核线程中去。
多对多模型对用户线程的数量没有什么限制，在多处理器系统上也会有一定的性能提升，不过提升的幅度比不上一对一模型。

23人点赞
linux学习


作者：popsheng
链接：https://www.jianshu.com/p/5a4fc2729c17
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


区别
内核级线程：
（1）线程的创建、撤销和切换等，都需要内核直接实现，即内核了解每一个作为可调度实体的线程。
（2）这些线程可以在全系统内进行资源的竞争。
（3）内核空间内为每一个内核支持线程设置了一个线程控制块（TCB），内核根据该控制块，感知线程的存在，并进行控制。
在一定程度上类似于进程，只是创建、调度的开销要比进程小。有的统计是1：10

用户级线程：
（1）用户级线程仅存在于用户空间。
（2）内核并不能看到用户线程。
（3）内核资源的分配仍然是按照进程进行分配的；各个用户线程只能在进程内进行资源竞争。

多线程模型：


1、多对一模型

将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成。用户级线程对操作系统不可见（透明）。

优点：线程管理是在用户空间进行的，因而效率比较高

缺点：一个线程在使用内核服务时被阻塞，整个进程都会被阻塞。

2、一对一模型

将每个用户级线程映射到一个内核级线程。

优点：当一个线程被阻塞时，允许另一个线程继续运行，并发能力强。

缺点：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。

3、多对多模型

将n个用户级线程映射到m个内核级线程上，要求m<=n；

特点：前两者的折中。