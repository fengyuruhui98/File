<ResourceDictionary 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local ="clr-namespace:HHJT.AFC.Framework.Skin"  
>
    
    <Style x:Key="NoChromeButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Chrome" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                            <Setter Property="Opacity" TargetName="Chrome" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridVcenterHleft"
	 TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridVcenterHcenter"
	 TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    <Style TargetType="TextBlock">
    <Setter Property="FontSize" Value="12" />
  </Style>
-->
      
  <!-- CONTENT AREA STYLE -->
  <Style x:Key="styleContentArea_Base">
    <Setter Property="Border.BorderThickness" Value="1" />
    <Setter Property="Border.CornerRadius" Value="10" />
    <Setter Property="Border.Margin" Value="5" />
  </Style>

  <!-- CONTENT AREA HEADER STYLE -->
  <Style x:Key="styleContentAreaHeader_Base">
    <Setter Property="Border.CornerRadius" Value="10" />
    <Setter Property="Control.Height" Value="40" />
    <Setter Property="Control.Margin" Value="1,1,1,6" />
  </Style>


    <!-- INFO TEXT STYLE -->
    <Style x:Key="styleInfoText">
        <Setter Property="TextBlock.FontWeight" Value="Bold" />
        <Setter Property="TextBlock.Foreground" Value="Gray" />
        <Setter Property="TextBlock.Margin" Value="0,0,0,4" />
        <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
        <Style.Triggers>
            <!-- Check if the style is applied to a TextBlock that is part of a ListBoxItem.
           If so, check if item is selected and has focus.  When that is true, set the foreground to white.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsFocused}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextElement.Foreground" Value="White" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- DATATEMPLATE FOR LISTBOXITEM
    <DataTemplate x:Key="agentListItemTemplate">
        <StackPanel Margin="4,8" Orientation="Horizontal">
            <Image Height="20" Width="20" Margin="0,0,4,0" Source="..\Pics\new.png" VerticalAlignment="Center" />
            <TextBlock Margin="0" Style="{StaticResource styleInfoText}" Text="{Binding XPath=Name/Last}" />
      <TextBlock Margin="0" Style="{StaticResource styleInfoText}" Text=", " />
      <TextBlock Margin="0" Style="{StaticResource styleInfoText}" Text="{Binding XPath=Name/First}" />
    </StackPanel>
    </DataTemplate> -->
    <!--for checked listbox liushukang 20130329-->
    <DataTemplate x:Key="CheckedListItemTemplate">
        <CheckBox IsChecked="{Binding IsItemChecked, Mode=TwoWay}" 
                              Focusable="False"
                              Content="{Binding DisplayName}"
                              Margin="0,5,0,0"/>
    </DataTemplate>

    <local:BackgroundConverter x:Key="backgroundConverter"/>

    
    <Style x:Key="MyContainer" TargetType="{x:Type ListViewItem}">

        <Setter Property="Margin" Value="0,1,0,0"/>
        <Setter Property="Height" Value="21"/>

        <Setter Property="Background">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource Self}" Converter="{StaticResource backgroundConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />


                <Style.Triggers>
            <!--</SnippetListViewItemTriggersStart>-->
            <!--<SnippetTrigger>-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Gray" />
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            <!--</SnippetTrigger>-->
            <!--<SnippetMultiTrigger>-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="DarkBlue" />
            </MultiTrigger>
            <!--</SnippetMultiTrigger>-->
            <!--<SnippetListViewItemTriggersEnd>-->
        </Style.Triggers>
    </Style>
    <!--</SnippetListViewItemTriggersEnd>-->

    <!--Define the template for the first column to contain
    a CheckBox control-->
    <!--<SnippetCheckBoxDataTemplate>-->
   <!-- <DataTemplate x:Key="FirstCell">
        <Button Content="X"/>
    </DataTemplate>-->

    <Style TargetType="{x:Type ButtonBase }" x:Key="buttonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="{TemplateBinding Background}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Focusable="False"
                            x:Name="border" 
                            CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" >
                        <ContentPresenter Focusable="False" 
                                        Content="{TemplateBinding Content}"  ContentTemplate="{TemplateBinding ContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ButtonBase }" x:Key="corneredButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="{TemplateBinding Background}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Focusable="False"
                            x:Name="border" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" >
                        <ContentPresenter Focusable="False" 
                                        Content="{TemplateBinding Content}"  ContentTemplate="{TemplateBinding ContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="LightGray" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ButtonBase}" x:Key="verticalButtonStyle" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="-90"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="{TemplateBinding Background}"     
                            Focusable="False"
                            x:Name="border"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" >
                        <Border Background="Transparent" BorderBrush="White" BorderThickness="0,1,1,0">
                            <ContentPresenter Focusable="False"  Margin="4,0,4,0"
                                        Content="{TemplateBinding Content}"  ContentTemplate="{TemplateBinding ContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightButtonSolidBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonSolidBrush}" TargetName="border"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="verticalToggleButtonStyle" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="-90"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"     
                            Focusable="False"
                            x:Name="border"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" >
                        <Border Background="Transparent" BorderBrush="White" BorderThickness="0,1,1,0">
                            <ContentPresenter Focusable="False"  Margin="4,0,4,0"
                                        Content="{TemplateBinding Content}"  ContentTemplate="{TemplateBinding ContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightButtonSolidBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonSolidBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonSolidBrush}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

  <Style TargetType="{x:Type ToggleButton}" x:Key="toggleButtonStyle" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="3"
                            Focusable="False"
                            x:Name="border"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" >
                        <Border Background="Transparent" BorderBrush="#FFAAAAAA"  CornerRadius="3" BorderThickness="1">
                            <ContentPresenter Focusable="False"  Margin="8,3"
                                        Content="{TemplateBinding Content}"  ContentTemplate="{TemplateBinding ContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonSolidBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton }" x:Key="buttonInSection">
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="Height" Value="28"/>-->
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="{DynamicResource SectionButtonGradientBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" 
                            Focusable="False"
                            x:Name="border"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" >
                        <ContentControl Focusable="False" Background="{TemplateBinding Background}" Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedButtonGradientBrush}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ButtonBase}" x:Key="normalButtonStyle" BasedOn="{StaticResource corneredButtonStyle}">
        <Setter Property="BorderThickness" Value="1"/>
        
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <Style x:Key="lbl">
        <Setter Property="Label.Margin" Value="3,0,0,0"></Setter>
        <Setter Property="Label.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Label.HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="Label.Foreground" Value="DarkBlue"></Setter>
    </Style>

    <Style x:Key="tbx">
        <Setter Property="TextBox.Margin" Value="0,0,3,0"></Setter>
        <Setter Property="TextBox.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="TextBox.HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="TextBox.Background" Value="MintCream"></Setter>
        <Setter Property="TextBox.IsEnabled" Value="False"></Setter>
    </Style>

    <Style x:Key="cbx">
        <Setter Property="ComboBox.Margin" Value="0,0,3,0"></Setter>
        <Setter Property="ComboBox.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="ComboBox.HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="ComboBox.IsEnabled" Value="False"></Setter>
    </Style>


    <Style  x:Key="borderedButton" BasedOn="{StaticResource buttonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="10,5"></Setter>
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Width" Value="60"></Setter>
        <Setter Property="Background" Value="{DynamicResource mybtnBackground}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="False">
                <Setter Property="Control.Foreground" Value="LightGray"></Setter>
                <Setter Property="Control.Background" Value="#05999999"></Setter>

            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="lblLargeField" TargetType="{x:Type Control}">
        <Setter Property="Control.Margin" Value="8,2,0,2"></Setter>
        <Setter Property="Control.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Control.HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="Control.Foreground" Value="DarkBlue"></Setter>
        <Setter Property="Control.FontSize" Value="14"></Setter>
    </Style>

    <Style x:Key="ctrlLargeField" TargetType="{x:Type Control}">
        <Setter Property="Control.Margin" Value="0,2,3,2"></Setter>
        <Setter Property="Control.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Control.HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Control.Foreground" Value="DarkBlue"></Setter>
        <Setter Property="Control.FontSize" Value="14"></Setter>
    </Style>

    <Style x:Key="lblField" TargetType="{x:Type Control}">
        <Setter Property="Control.Margin" Value="3,1,0,1"></Setter>
        <Setter Property="Control.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Control.HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="Control.Foreground" Value="DarkBlue"></Setter>
    </Style>

    <Style x:Key="ctrlField" TargetType="{x:Type Control}">
        <Setter Property="Control.Margin" Value="0,1,3,1"></Setter>
        <Setter Property="Control.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Control.HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Control.Foreground" Value="DarkBlue"></Setter>
    </Style>
    
    <!--sorted listview-->
    <DataTemplate x:Key="HeaderTemplateArrowUp">
        <DockPanel>
            <TextBlock HorizontalAlignment="Center" Text="{Binding}"/>
            <Path x:Name="arrow"
           StrokeThickness = "1"
           Fill = "Gray"
           Data = "M 5,10 L 15,10 L 10,5 L 5,10"/>
        </DockPanel>
    </DataTemplate>
    <DataTemplate x:Key="HeaderTemplateArrowDown">
        <DockPanel>
            <TextBlock HorizontalAlignment="Center" Text="{Binding}"/>
            <Path x:Name="arrow"
              StrokeThickness = "1"
              Fill = "Gray"
              Data = "M 5,5 L 10,10 L 15,5 L 5,5"/>
        </DockPanel>
    </DataTemplate>
    <DataTemplate x:Key="HeaderTemplateTransparent">
        <DockPanel>
            <TextBlock HorizontalAlignment="Center" Text="{Binding}"/>
            <Path x:Name="arrow"
              StrokeThickness = "1"
              Fill = "Transparent"
              Data = "M 5,5 L 10,10 L 15,5 L 5,5"/>
        </DockPanel>
    </DataTemplate>
    <Style x:Key="gridViewHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="AliceBlue" />
    </Style>
    <!--end sorted listview-->


    <Style TargetType="{x:Type Button }" x:Key="styleBtnQuery">
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="MinWidth" Value="90"/>
        <Setter Property="Height" Value="30"/>

    </Style>

    <Style TargetType="{x:Type Button }" x:Key="styleOperationButton">
        <Setter Property="Margin" Value="5,5"/>
        <Setter Property="Width" Value="90"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type Control }" x:Key="styleInputControl">
        <Setter Property="Margin" Value="0,5,5,5"/>
        <Setter Property="Width" Value="160"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style TargetType="{x:Type Button }" x:Key="styleBtnDialog">
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="25"/>

    </Style>

    <Style x:Key="TreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="IsSelected" Value="{Binding IsInitiallySelected, Mode=OneTime}" />
        <Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
        <Setter Property="local:VirtualToggleButton.IsVirtualToggleButton" Value="True" />
        <Setter Property="local:VirtualToggleButton.IsChecked" Value="{Binding IsChecked}" />
    </Style>

    <HierarchicalDataTemplate 
        x:Key="CheckBoxItemTemplate"
        ItemsSource="{Binding Children, Mode=OneTime}"
        >
        <StackPanel Orientation="Horizontal">
            
            <CheckBox
            Focusable="False" 
            IsChecked="{Binding IsChecked}" 
            VerticalAlignment="Center"
            />
            <ContentPresenter 
            Content="{Binding Name, Mode=OneTime}" 
            Margin="2,0"
            />
        </StackPanel>
    </HierarchicalDataTemplate>
    
    
    
    
    <!--custom raido button for functions switch-->
    <ControlTemplate x:Key="ControlTemplateRadioButtonModule" TargetType="{x:Type RadioButton}">
        <Grid>
      
            <Rectangle x:Name="rectBackground" Fill="Transparent" Stroke="LightGray" MinWidth="80" Height="30" 
					StrokeThickness="1" Margin="1" />
            <TextBlock x:Name="txtContent" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0"
					 FontSize="12" FontWeight="Bold" Foreground="Black" >
					<ContentPresenter />
            </TextBlock>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Fill" TargetName="rectBackground" Value="DarkBlue"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Foreground" TargetName="txtContent" Value="White"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="rectBackground" Value="Transparent"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="LightGray"/>
                <Setter Property="Foreground" TargetName="txtContent" Value="Gray"/>
                <Setter Property="FontWeight" TargetName="txtContent" Value="Medium"/>

            </Trigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsChecked" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="rectBackground" Value="LightBlue"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Cursor" TargetName="rectBackground" Value="Hand"/>
                <Setter Property="Cursor" TargetName="txtContent" Value="Hand"/>

            </MultiTrigger>
            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ControlTemplateRadioButtonFunction" TargetType="{x:Type RadioButton}">
        <Grid>

            <Rectangle x:Name="rectBackground" Fill="Transparent" Stroke="LightGray" MinWidth="80" Height="25" 
					StrokeThickness="1" Margin="1" />
            <Label x:Name="txtContent" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" VerticalAlignment="Center" Margin="3,0"
					 FontSize="12" Foreground="DarkBlue" >
					<ContentPresenter />
            </Label>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Fill" TargetName="rectBackground" Value="DarkBlue"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Foreground" TargetName="txtContent" Value="White"/>
                <Setter Property="FontWeight" TargetName="txtContent" Value="Bold"/>

            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="rectBackground" Value="Transparent"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="LightGray"/>
                <Setter Property="Foreground" TargetName="txtContent" Value="Gray"/>
                <Setter Property="FontWeight" TargetName="txtContent" Value="Medium"/>

            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsChecked" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="rectBackground" Value="LightBlue"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Cursor" TargetName="rectBackground" Value="Hand"/>
                <Setter Property="Cursor" TargetName="txtContent" Value="Hand"/>

            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- add by qinyy (2012/10/30) -->
    <!--custom raido button for functions switch-->
    <ControlTemplate x:Key="ControlTemplateRadioButtonFunctionSub" TargetType="{x:Type RadioButton}">
        <Grid>
            <Rectangle x:Name="rectBackground" Fill="Transparent" Stroke="LightGray" MinWidth="80" Height="30" 
					 StrokeThickness="1" Margin="1" />
            <TextBlock x:Name="txtContent" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0"
					 FontSize="12" FontWeight="Bold" Foreground="#3C3C7C" >
					<ContentPresenter />
            </TextBlock>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Fill" TargetName="rectBackground" Value="#C8C8E1"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Foreground" TargetName="txtContent" Value="White"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="rectBackground" Value="Transparent"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="LightGray"/>
                <Setter Property="Foreground" TargetName="txtContent" Value="Gray"/>
                <Setter Property="FontWeight" TargetName="txtContent" Value="Medium"/>

            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsChecked" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="rectBackground" Value="LightBlue"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Cursor" TargetName="rectBackground" Value="Hand"/>
                <Setter Property="Cursor" TargetName="txtContent" Value="Hand"/>

            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="textBoxInError" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Left"/>
<Setter Property="Margin" Value="0,5,5,5"/>
        <Setter Property="Width" Value="160"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate >
                    <DockPanel>
                        <AdornedElementPlaceholder />
                        <TextBlock Foreground="Red" FontSize="20" Text="*" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Foreground" Value="Red"></Setter>
                <Setter Property="ToolTip"
              Value="{Binding RelativeSource={x:Static RelativeSource.Self},
              Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--在styleInputControl上修改，使得可以显示错误的信息-->
    <!--add by qinyy(2012/7/11)-->
    <Style TargetType="{x:Type TextBox }" x:Key="styleInputControl2">
        <Setter Property="Margin" Value="0,5,5,5"/>
        <Setter Property="Width" Value="160"/>
        <Setter Property="Height" Value="25"/>
        <!--<Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <AdornedElementPlaceholder />
                        <TextBlock Foreground="Red" FontSize="20" Text="*" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Foreground" Value="Red"></Setter>
                <Setter Property="ToolTip"
              Value="{Binding RelativeSource={x:Static RelativeSource.Self},
              Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="groupDatagridStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True" Background="Azure" Foreground="DarkBlue" >
                        <Expander.Header>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Name}"/>
                                <TextBlock Text="{Binding Path=ItemCount}" Margin="10,0"/>
                            </StackPanel>
                        </Expander.Header>
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <local:Percent2ValueConverter x:Key="Percent2Value"></local:Percent2ValueConverter>
    <local:Value2PercentConverter x:Key="Value2Percent"></local:Value2PercentConverter>

    <DataTemplate x:Key="dtColor">
        <StackPanel Orientation="Horizontal">
            <Viewbox Margin="5">
                <Rectangle Fill="{Binding Path=ColorName}"
                         Width="30"
                         Height="12"/>
            </Viewbox>
            <TextBlock Margin="0,2" VerticalAlignment="Center" FontSize="12" Text="{Binding Path=ColorName}"/>
        </StackPanel>
    </DataTemplate>

    <local:ItemList x:Key="ItemListGenerator"></local:ItemList>
    
    <DataTemplate x:Key="dtColorCombox">
        <ComboBox ItemTemplate="{StaticResource dtColor}" SelectedValuePath="ColorName" Width="100"
                  SelectedValue="{Binding Path=ColorName}"
                  ItemsSource="{Binding GetListOfColorName, Source={StaticResource ResourceKey=ItemListGenerator}}"
                  >
            
        </ComboBox>
    </DataTemplate>

    <DataTemplate x:Key="dtColorComboxDisabled">
        <ComboBox ItemTemplate="{StaticResource dtColor}" SelectedValuePath="ColorName" Width="100"
                  SelectedValue="{Binding Path=ColorName}" IsEnabled="False"
                  ItemsSource="{Binding GetListOfColorName, Source={StaticResource ResourceKey=ItemListGenerator}}"
                  >

        </ComboBox>
    </DataTemplate>


    <!--定义按钮样式-->
    <Style x:Key="btnFun2" TargetType="Button">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinHeight" Value="80"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontFamily" Value="Times New Roman"/>
        <!--修改模板属性-->
        <Setter Property="Template">
            <Setter.Value>
                <!--控件模板-->
                <ControlTemplate TargetType="Button">
                    <!--背景色-->
                    <Border x:Name="back" Opacity="0.8" CornerRadius="3">
                        <Border.BitmapEffect>
                            <OuterGlowBitmapEffect Opacity="0.7" GlowSize="0" GlowColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" />
                        </Border.BitmapEffect>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="1" CornerRadius="12" BorderBrush="#5555">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="LightBlue" Offset="0"/>
                                            <GradientStop Color="Azure" Offset="0.85"/>
                                            <GradientStop Color="White" Offset="1"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}">
                                <ContentPresenter.BitmapEffect>
                                    <DropShadowBitmapEffect Color="#000" Direction="-90" ShadowDepth="2" Softness="0.1" Opacity="0.3" />
                                </ContentPresenter.BitmapEffect>
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="6" Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="SlateBlue" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="SkyBlue" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        <ColorAnimation To="SkyBlue" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[2].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[2].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="3" Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="#3AAA" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#2111" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#B444"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <DoubleAnimation To="1" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                        <DoubleAnimation To="-135" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                        <ColorAnimation To="#FFF" Duration="0:0:0.3" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                        <ColorAnimation To="#D555" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation To="#CEEE" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#CDDD" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ControlTemplateRadioButtonToolbar" TargetType="{x:Type RadioButton}">
        <Grid>

            <Rectangle x:Name="rectBackground" Fill="Transparent" Stroke="LightGray" Width="25" Height="25" 
					StrokeThickness="1" Margin="1" />
            <ContentPresenter />
            
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Fill" TargetName="rectBackground" Value="LightBlue"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="DarkBlue"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="rectBackground" Value="Transparent"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="LightGray"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsChecked" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="rectBackground" Value="White"/>
                <Setter Property="Stroke" TargetName="rectBackground" Value="Blue"/>
                <Setter Property="Cursor" TargetName="rectBackground" Value="Hand"/>
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--参数版本TreeView-->
    <local:DateTimeConverter x:Key="datetimeConverter"/>
    <local:DateConverter x:Key="dateConverter"/>

    <Style x:Key="ParamFontStyle">
        <Setter Property="Control.Foreground" Value="Black" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UpdateFlag}" Value="1">
                <Setter Property="Control.Foreground" Value="Red" />
                <!--<Setter Property="Control.FontStyle" Value="Italic" />-->
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=UpdateFlag}" Value="2">
                <Setter Property="Control.Foreground" Value="Crimson" />
                <!--<Setter Property="Control.FontStyle" Value="Italic" />-->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" x:Key="expandedControl">
        <Setter Property="IsExpanded" Value="{Binding Expand}" />
    </Style>
    <HierarchicalDataTemplate x:Key="ParamSubVersionTemplate" >
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <!--<ColumnDefinition Width="Auto"></ColumnDefinition>-->
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Source="..\Pics\new1.png"></Image>

            <TextBlock Grid.Column="1" Text="PM" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="2" Text="{Binding Path=ParaType}" Foreground="DarkBlue" VerticalAlignment="Center" />
            <!--<TextBlock Grid.Column="3" Text="{Binding Path=EffectiveTime, Converter={StaticResource dateConverter}}" Foreground="DarkBlue" VerticalAlignment="Center" Padding="2" />-->
            <!--<TextBlock Grid.Column="3" Text="{Binding Path=CreateTime}" Padding="2" />-->
        </Grid>
    </HierarchicalDataTemplate>
    <HierarchicalDataTemplate x:Key="ParamVersionTemplate"  ItemsSource="{Binding Path=ParamSubVersions}" ItemTemplate="{StaticResource ParamSubVersionTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Source="..\Pics\log1.png"></Image>

            <TextBlock Grid.Column="1" Text="V" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="2" Text="{Binding Path=ParaIndex}" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="3" Text="(" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="4" Text="{Binding Path=ParaVersion}" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="5" Text=")" Foreground="DarkBlue" VerticalAlignment="Center" />
            <!--<TextBlock Grid.Column="3" Text="{Binding Path=EffectiveTime, Converter={StaticResource dateConverter}}" Foreground="DarkBlue" VerticalAlignment="Center" Padding="2" />-->
            <!--<TextBlock Grid.Column="3" Text="{Binding Path=CreateTime}" Padding="2" />-->
        </Grid>
    </HierarchicalDataTemplate>
    <HierarchicalDataTemplate x:Key="ParamOldVersionTemplate"  >
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Source="..\Pics\log1.png"></Image>

            <TextBlock Grid.Column="1" Text="V" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="2" Text="{Binding Path=ParaIndex}" Foreground="DarkBlue" VerticalAlignment="Center" />
            <TextBlock Grid.Column="3" Text="{Binding Path=ParaVersion}" Foreground="DarkBlue" VerticalAlignment="Center" />
            <!--<TextBlock Grid.Column="3" Text="{Binding Path=EffectiveTime, Converter={StaticResource dateConverter}}" Foreground="DarkBlue" VerticalAlignment="Center" Padding="2" />-->
            <!--<TextBlock Grid.Column="3" Text="{Binding Path=CreateTime}" Padding="2" />-->
        </Grid>
    </HierarchicalDataTemplate>
    <HierarchicalDataTemplate x:Key="ParamOldCategoryTemplate" ItemsSource="{Binding Path=ParamVersions}" ItemTemplate="{StaticResource ParamOldVersionTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Source="..\Pics\directory.png"></Image>
            <TextBlock Grid.Column="1" Text="{Binding Path=CategoryName}" Padding="2"></TextBlock>
        </Grid>
    </HierarchicalDataTemplate>
    <HierarchicalDataTemplate x:Key="ParamCategoryTemplate" ItemsSource="{Binding Path=ParamVersions}" ItemTemplate="{StaticResource ParamVersionTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Source="..\Pics\directory.png"></Image>
            <TextBlock Grid.Column="1" Text="{Binding Path=CategoryName}" Padding="2"></TextBlock>
        </Grid>
    </HierarchicalDataTemplate>
    <!--参数版本TreeView-->
</ResourceDictionary>