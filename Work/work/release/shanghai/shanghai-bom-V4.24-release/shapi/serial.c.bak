#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>

/*
open the serial port
*/
int open_port(char *SerialPort)
{
int fd;
	
	fd = open(SerialPort, O_RDWR | O_NOCTTY | O_NDELAY);
	//fd = open(SerialPort, O_RDWR | O_NOCTTY | 0x8000);
	if (fd == -1)
	{
		perror("open_port:Unable to open /dev/ttyS0 -");
	}
	else
		fcntl(fd, F_SETFL, 0);
	
	return (fd);
}

/*
close the serial port
*/
int close_port(int fd)
{
int rtn;

	rtn = close(fd);
	return (rtn);
}

/*
set the serial port baud
*/
int speed_sel[] ={B460800, B115200, B57600, B38400, B19200, B9600};
int name_sel[] = {460800, 115200, 57600, 38400,  19200, 9600};
void speed_set(int fd, int speed)
{
int i, status, tempspeed;
struct termios opt;
struct serial_struct p;
speed_t lngspeed;
	
	if(fd <= 0)
		return ;
		
	tcgetattr(fd, &opt);
	tempspeed = speed;
	if(speed == 28800)
		tempspeed = 38400;
	for(i = 0; i < sizeof(speed_sel) / sizeof(int); i++)
	{
		if(tempspeed == name_sel[i])
		{
			tcflush(fd, TCIOFLUSH);
			cfsetispeed(&opt, speed_sel[i]);
			cfsetospeed(&opt, speed_sel[i]);

			status = tcsetattr(fd, TCSANOW, &opt);
			if(status != 0)
			{
				printf("set attr wrong!\n");
				return ;
			}
			tcflush(fd, TCIOFLUSH);//清空中断未完成的输入/输出请求数据
		}
	}
	lngspeed = cfgetispeed(&opt);
	if(speed == 28800)
	{
		ioctl(fd, TIOCGSERIAL, &p);
		p.flags = ASYNC_SPD_CUST;
		p.custom_divisor = 4;
		ioctl(fd, TIOCSSERIAL, &p);
	}
	lngspeed = cfgetispeed(&opt);
}

/*
set parity
*/
int parity_set(int fd, int databits, int stopbits, int parity)
{
struct termios opt;
	
	if(fd <= 0)
		return 1;

	tcgetattr(fd, &opt);
	
	opt.c_cflag &= ~CSIZE;
	switch(databits)
	{
	case 7:
		opt.c_cflag |= CS7;
		break;	
	case 8:
		opt.c_cflag |= CS8;
		break;
	}
	switch(parity)
	{
	case 'n':
	case 'N':
		opt.c_cflag &= ~PARENB;
		opt.c_iflag &= ~INPCK;
		break;
	case 'o':
	case 'O':
		opt.c_cflag |= (PARODD | PARENB);
		opt.c_iflag |= INPCK;
		break;
	case 'e':
	case 'E':
		opt.c_cflag |= PARENB;
		opt.c_cflag &= ~PARODD;
		opt.c_iflag |= INPCK;
		break;
	case 'S':
	case 's': /*as no parity*/
		opt.c_cflag &= ~PARENB;
		opt.c_cflag &= ~CSTOPB;
		break;	
	}
	switch(stopbits)
	{
	case 1:
		opt.c_cflag &= ~CSTOPB;
		break;
	case 2:
		opt.c_cflag |= CSTOPB;
	}
	if(parity != 'n')
		opt.c_iflag |= INPCK;
	opt.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
	opt.c_oflag &= ~OPOST;
	
	opt.c_iflag &= ~(IXON | IXOFF | IXANY | ICRNL);
	tcflush(fd, TCIFLUSH);
	opt.c_cc[VTIME] = 0; //5  2013/11/12 19:19:10
	opt.c_cc[VMIN] = 0;
	tcsetattr(fd, TCSANOW, &opt);
	return(1);
}

/*
写数据到串口
*/
unsigned char writecom(int fd, unsigned char *pdata, long lnglen)
{
long lngwritelen;
FILE *intFile;
char chinfo[300];
long i;

	if(fd <= 0)
		return 0;
	//for bim can't use this function
	//tcflush(fd, TCIOFLUSH);
	
	lngwritelen = write(fd, pdata, lnglen);
	//printf("write com data len comman is %x real is %x\n", lnglen, lngwritelen);
/*	sprintf(chinfo, "send:");

	for(i = 0; i < lnglen; i++)
		sprintf(chinfo, "%s %02X", chinfo, pdata[i]);
	printf("%s\n", chinfo);	
	
	intFile = fopen("./peilj.txt", "at+");
		fwrite(chinfo, strlen(chinfo), 1, intFile);
	chinfo[0] = 13;
	chinfo[1] = 10;
	fwrite(chinfo, 2, 1, intFile);
	fclose(intFile);
*/	
	if(lngwritelen == -1)
		return 0;
	if(lngwritelen != lnglen)
		return 0;
	return 0xff;
}

/*
读串口数据
*/
unsigned char readcom(int fd, unsigned char *pdata, long lnglen)
{
long lngwritelen;

	if(fd <= 0)
		return 0;
		
	lngwritelen = read(fd, pdata, lnglen);
	if(lngwritelen == -1)
		return 0;
	if(lngwritelen != lnglen)
		return 0;
	return 0xff;
}


/*
function:
*/
#ifdef DEBUG_PRINT
//#define DEBUG_PRINT_com_serv
#endif
long com_serv(int fd, char *psend, long len, char *preceived)
{
static unsigned char buff[600], byttemp[600], chCmd, chResCode;
static unsigned short  sendlen, reslen;
clock_t start, end;
long lreadlen, rtn,rtn2;
long i, j, ret;
unsigned char fStat, blnTimeout, recv_buf[600], lrc1, lrc2, smartreslen;
struct timeval tv1,tv2;
struct timezone tz1,tz2;
unsigned char bytPrint;
char chinfo[1000], chtempinfo[10];
FILE *intFile;
//struct SYSTEMTIME	tpsystemtime;
struct timeval timeout;
fd_set readfd;

	if(fd <= 0)
		return 0xff;
		
	memset(buff, 0x00, 600);
	memset(byttemp, 0x00, 600);
	memset(chtempinfo, 0x00, 10);
	lreadlen = 0;
	blnTimeout = 0xff;

	memset(chinfo, 0x00, 1000);
	tcflush(fd, TCIOFLUSH);
	
	do
	{
		//watchdog();
		FD_ZERO(&readfd);
		FD_SET(fd, &readfd);
		timeout.tv_sec = 5;
		timeout.tv_usec = 100;
		ret = select(fd + 1, &readfd, NULL, NULL, &timeout);
		if(ret > 0)
		{
			rled(LED_ON);
			blnTimeout = 0xff;
			gettimeofday(&tv1,&tz1);
			memset(chinfo, 0x00, 600);
			lreadlen = 0;
			//printf("data coming....\n");
			do
			{
				//watchdog();//可关闭
				fStat = readcom(fd, buff, 1);
				if(fStat)
				{
  					byttemp[lreadlen] = buff[0];
					sprintf(chtempinfo, "%02X ", buff[0]);
					strcat(chinfo, chtempinfo);
					buff[0] = 0;
					lreadlen += 1;
					if(lreadlen >= 600)
					{
            #ifdef DEBUG_PRINT_com_serv
						printf("read byte more than 600 %s\n", chinfo);
            #endif
            						
						lreadlen = 0;
						memset(chinfo, 0x00, 1000);
						continue;
					}
					if( (byttemp[0] == PROT_DT_STX) )
					{
	  					if(lreadlen > 3)
	  					{
	  						if(byttemp[lreadlen - 1] == PROT_DT_ETX)
	  						{
	  							j = 0;
	  							for(i = lreadlen - 2; i > 0; i--)
	  							{
	  								if(byttemp[i] != PROT_DT_DLE)
	  									break;
	  								else
	  									j++;
	  							}
	  							if(j % 2 == 0)
	  							{
	                  #ifdef DEBUG_PRINT_com_serv							
	  								printf("recv: %s\n", chinfo);
	                  #endif
	                  
	  								memset(chinfo, 0x00, 1000);
	  								rtn = sh_DeleteDLE(byttemp, lreadlen);
	  								if(rtn > 0)
	  								{
	  									chCmd = byttemp[2];
	  									
	  									if(byttemp[3] == 0) blnRetryFlag = 0;
	  									else blnRetryFlag = byttemp[3];
	  									
	  									//restore backup response	
	  									if(blnRetryFlag != 0) 
	  									{
	  										rtn2 = sh_DeleteDLE(retry_buf, retry_len);
	  										chResCode = retry_buf[4];
	  										chCmd = retry_buf[2];
	  										if(rtn2 > 0) ReaderResponse(fd, chResCode, chCmd, &retry_buf[5], rtn2-7);
	  									}
	  									else 
	  									{
	  									  chResCode = DealCommand(byttemp, rtn, recv_buf, &reslen);
	  									  ReaderResponse(fd, chResCode, chCmd, recv_buf, reslen);
	  								  	}
	  									rled(LED_OFF);
	  									lreadlen = 0;
	  									break;
	  								}
	  								else if(rtn == 0)
	  								{
	  									lreadlen = 0;
	  									break;
	  								}
	  								else
	  								{
	  									ReaderResponse(fd, (unsigned char)(abs(rtn)), byttemp[6], NULL, 0);
	                    #ifdef DEBUG_PRINT_com_serv									
	  									printf("read message error :%d\n", rtn);
	                    #endif
	                    
	  									lreadlen = 0;
	  									break;
	  								}
	  							}
	  						}
	  					}
  					}
					else if(byttemp[0] == 0x7e)
					{
						if(lreadlen > 2)
						{
							if(lreadlen == byttemp[1] + 4)
							{//deal with all block
								if((lrc1 == byttemp[lreadlen - 2]) && (lrc2 == byttemp[lreadlen - 1]))
								{
#ifdef DEBUG_SERIAL_PRINT							
									printf("recv: %s\n", chinfo);
#endif
									smartreslen = reslen;
									DealSmartCommand(fd, byttemp, lreadlen, recv_buf, &smartreslen);
									rled(LED_OFF);
									lreadlen = 0;
									break;
								}else
								{
									lreadlen = 0;
									break;
								}
							}else if(lreadlen == byttemp[1] + 3)
							{
							}else
							{
								lrc1 ^= byttemp[lreadlen - 1];
								lrc2 += byttemp[lreadlen - 1];
							}
						}else
						{
							lrc1 = 0x33;
							lrc2 = 0x33;
						}
						
					}else
					{
						lreadlen = 0;
						//WriteCSCLog(intCSCLogFile, chinfo, 1);
            #ifdef DEBUG_PRINT_com_serv
						printf("not start from 0x03 %s\n", chinfo);
            #endif
            					
						memset(chinfo, 0x00, 1000);
						continue;
					}
				}
				gettimeofday(&tv2,&tz2);
				if ((((tv2.tv_sec-tv1.tv_sec)*1000000) + tv2.tv_usec - tv1.tv_usec)>=1000000)
				{
					blnTimeout = 0;
          #ifdef DEBUG_PRINT_com_serv				
					printf("read data time out\n");
          #endif
				}
			}while(blnTimeout);
		}
		else if (ret == 0)
		{
			#ifdef DEBUG_PRINT_com_serv
			printf("time out no data coming!\n");
			#endif
			lreadlen = 0;
		}
		else
		{
			#ifdef DEBUG_PRINT_com_serv
			printf("select failure \n" );
			#endif
			lreadlen = 0;
		}
	}while(1);
	
	if(lreadlen > 0)
		;//WriteCSCLog(intCSCLogFile, chinfo, 1);
	return 0xff;
}

/*
function:
parameter:
	fd:com handle
	chCode:response code
	chCommnd:command
	psend:message body
	len:message length
*/
long ReaderResponse(int fd, unsigned char chCode, unsigned char chCommand, unsigned char *psend, unsigned short len)
{
unsigned char 	sendbuf[600];
int 		ret;
unsigned char chinfo[1000], chtemp[20];
int 	i;

	memset(sendbuf, 0x00, 600);
	//not including the command::for changing
	sendbuf[0] = len + 3;
	sendbuf[1] = chCommand;
  	sendbuf[2] = blnRetryFlag;
	sendbuf[3] = chCode;
	
	if ((psend != NULL) && (len > 0))
		memcpy(&sendbuf[4], psend, len);

	ret = sh_InsertDLE(sendbuf, len + 4);
	memset(chinfo, 0x00, 1000);
	
  #ifdef DEBUG_PRINT	
	for(i = 0; i < ret; i++)
	{
		sprintf((char *)chtemp, "%02X ", sendbuf[i]);
		strcat((char *)chinfo, (char *)chtemp);
	}
	printf("\nresponse[%d] :%s\n", ret, chinfo);
  #endif
  
	//back up the last message
	if(blnRetryFlag == 0)
	{
		retry_len = ret;
		memcpy(retry_buf, sendbuf, retry_len);
	}
	writecom(fd, sendbuf, ret);
}
/*
function:according to the command to deal
return:the response code
*/


unsigned char DealCommand(unsigned char *cmd_buf,int cmd_len, unsigned char *out_buf, unsigned short *out_len)
{
static unsigned char chResponseCode, chlen;
FILE *fl;
char 	temp[600];
unsigned short i;
unsigned char bln_pwr_off;
unsigned char inbuf[600],outbuf[600];
unsigned short inbytes,outbytes;

  #ifdef DEBUG_PRINT
  //printf("\ncmd_buf[%d]:",cmd_len);
  //for(i=0;i<cmd_len;i++) printf(" %02x",(unsigned char)cmd_buf[i]);
  #endif
  
  inbytes = cmd_len - 4;
  memcpy(inbuf,&cmd_buf[2],inbytes);
  
#ifdef DEBUG_PRINT
	if(inbytes < 64) {
		printf("\ninbuf[%d]:",inbytes);
		for(i=0;i<inbytes;i++) printf(" %02x",(unsigned char)inbuf[i]);
	}
#endif
  
	shmt_bom(inbuf,inbytes,outbuf,&outbytes);
#ifdef DEBUG_PRINT

	printf("return bytes %d response code %02x\n", outbytes, outbuf[2]);
#endif
	chResponseCode = outbuf[2];
	*out_len = outbytes - 3;
	memcpy(out_buf,&outbuf[3],outbytes);
	
	#ifdef DEBUG_PRINT
  //printf("\nout_buf[%d][%02X]:",*out_len,chResponseCode);
  //for(i=0;i<*out_len;i++) printf(" %02x",(unsigned char)out_buf[i]);	
	#endif
	
	return chResponseCode;  
}
/*
*/
long communicate(int fd, char *psend, long len, char *preceived)
{
unsigned char buff[600], sendlen, byttemp[600];
clock_t start, end;
long lreadlen, rtn;
long i, j;
unsigned char fStat, blnTimeout;
struct timeval tv1,tv2;
struct timezone tz1,tz2;
unsigned char bytPrint;
char chinfo[600], chtempinfo[10];
FILE *intFile;
//struct SYSTEMTIME	tpsystemtime;

	if(fd <= 0)
		return 0xff;
		
	memset(buff, 0x00, 600);
	memset(byttemp, 0x00, 600);
	memset(chinfo, 0x00, 600);
	memset(chtempinfo, 0x00, 10);
	lreadlen = 0;
	blnTimeout = 0xff;
	//printf("the command is %x\n", psend[1]);
	if(len > 0)
	{
		memcpy(buff, psend, len);
		sendlen = sh_InsertDLE(buff, len);
/*		GetLocalTime(&tpsystemtime);
		sprintf(&chinfo[0], "%u-%02u-%02u %02u:%02u:%02u.%03u SEND:", tpsystemtime.wYear, tpsystemtime.wMonth, tpsystemtime.wDay, tpsystemtime.wHour,
				tpsystemtime.wMinute, tpsystemtime.wSecond, tpsystemtime.wMilliseconds);
		for(j = 0; j < sendlen; j++)
		{
			sprintf(chtempinfo, "%02X ", buff[j]);
			strcat(chinfo, chtempinfo);
		}
		//WriteCSCLog(intCSCLogFile, chinfo, 1);
*/		if(!writecom(fd, buff, sendlen)) return 0xff;
	}
	//
	//printf("the start time is %d\n", start);
	memset(chinfo, 0x00, 600);
	gettimeofday(&tv1,&tz1);
	
	//printf("read com:");
	do
	{
		fStat = readcom(fd, buff, 1);
		//printf("read com return is %2x and buff is %2x\n", fStat, buff[0]);
		if(fStat)
		{
			//printf(" %2x", buff[0]);
			//printf("\n");
/*			if(lreadlen == 0)
			{
				GetLocalTime(&tpsystemtime);
				sprintf(&chinfo[0], "%u-%02u-%02u %02u:%02u:%02u.%03u, Receive:", tpsystemtime.wYear, tpsystemtime.wMonth, tpsystemtime.wDay,
						tpsystemtime.wHour, tpsystemtime.wMinute, tpsystemtime.wSecond, tpsystemtime.wMilliseconds);
			}
*/			byttemp[lreadlen] = buff[0];
//			sprintf(chtempinfo, "%02X ", buff[0]);
//			strcat(chinfo, chtempinfo);
			buff[0] = 0;
			lreadlen += 1;
			if(lreadlen >= 400)
			{
				//WriteCSCLog(intCSCLogFile, chinfo, 1);
				return 0xff;
			}
			if(byttemp[0] != 0x02)
			{
				lreadlen = 0;
				//WriteCSCLog(intCSCLogFile, chinfo, 1);
				continue;
			}
				
			if(lreadlen > 3)
			{
				if(byttemp[lreadlen - 1] == 0x03)
				{
					j = 0;
					for(i = lreadlen - 2; i > 0; i--)
					{
						if(byttemp[i] != 0x10)
							break;
						else
							j++;
					}
					if(j % 2 == 0)
					{
						rtn = sh_DeleteDLE(byttemp, lreadlen);
						if(rtn)
						{
							//WriteCSCLog(intCSCLogFile, chinfo, 1);
							//if(rtn && (byttemp[4] != 0x04)) 	
							{
								memcpy(preceived, byttemp, rtn);
								/*printf("\n");
								sprintf(chinfo, "receive:");
								for(bytPrint = 0; bytPrint < rtn -1; bytPrint++)
									sprintf(chinfo, "%s %02X", chinfo, byttemp[bytPrint]);
								printf("%s\n", chinfo);
								intFile = fopen("./peilj.txt", "at+");
									fwrite(chinfo, strlen(chinfo), 1, intFile);
								chinfo[0] = 13;
								chinfo[1] = 10;
								fwrite(chinfo, 2, 1, intFile);
								fclose(intFile);*/
								return byttemp[4];
							}
						}//else
							//return 1;
					}
				}
			}
		}	
		//printf("the end time is %d and sub is %d the max is %f\n", end, (end - start), 1.5 * CLOCKS_PER_SEC);
		gettimeofday(&tv2,&tz2);
		if ((((tv2.tv_sec-tv1.tv_sec)*1000000)+tv2.tv_usec-tv1.tv_usec)>=1800000)
		{
			blnTimeout = 0;
		}
	}while(blnTimeout);
	printf("communication return is timeout! \n");
	if(lreadlen > 0)
		;//WriteCSCLog(intCSCLogFile, chinfo, 1);
	return 0xff;
}
/*
insert the DLE into the command line
the pbytData data including the data block length,len+cmd
the length including the data block length
*/
long sh_InsertDLE(unsigned char *pbytData, int intLength)
{
unsigned char	tempData[600], bytCheck;
int	i, intInsertLen = 1;
	
	bytCheck = 0;
	for(i = 0; i < intLength; i++) 		bytCheck += *(pbytData + i);
	*(pbytData + intLength) = bytCheck;

	for(i = 0;i <= intLength; i++)
	{
		bytCheck = *(pbytData + i);
		if((bytCheck == PROT_DT_STX) || (bytCheck == PROT_DT_ETX) || (bytCheck == PROT_DT_DLE)) 
			tempData[intInsertLen++] = PROT_DT_DLE;
		tempData[intInsertLen++] = bytCheck;
	}
	tempData[intInsertLen++] = PROT_DT_ETX;
	tempData[0] = PROT_DT_STX;
	memcpy(pbytData, tempData, intInsertLen);
	return intInsertLen;
}
/*
delete the DLE 
the data including the all data block from csc reader
stx+len+cmd+lrc+etx
*/
long sh_DeleteDLE(unsigned char *pbytData, int intLength)
{
unsigned char 	bytTempData[600], bytCheck;
int 		intDeleteLen, i;

	if(pbytData[0] != PROT_DT_STX) return 0;
	
	memcpy(bytTempData, pbytData, intLength);
	for(i = 1; i < intLength; i++)
	{
		if(bytTempData[i] == PROT_DT_DLE)
			memcpy(&bytTempData[i], &bytTempData[i + 1], intLength - 1 - i);
	}
	
	intDeleteLen = bytTempData[1] + 4;
	bytCheck = 0; 
	for(i = 1; i <= bytTempData[1] + 1; i++)
		bytCheck += bytTempData[i];

	if(bytCheck == bytTempData[intDeleteLen - 2])
	{
		memcpy(pbytData, bytTempData, intDeleteLen);
		return intDeleteLen;
	}
	else
	{
		return 0;
	}
}


/*
Blocktype LEN  MYNODE  NODE  D0 ... D(N-1)  LRC1  LRC2
*/
unsigned char DealSmartCommand(int fd, unsigned char *cmd_buf, int cmd_len, unsigned char *out_buf, unsigned char *out_len)
{
unsigned char sendbuf[300], buf[9000], sendRetrybuf[300];
unsigned char ret, i;
unsigned char lrc0, lrc1;
unsigned short apduLen;

	//answer the 4e
	sendbuf[0] = 0x41;
	sendbuf[1] = 0x01;
	if(0 == (ret = writecom(fd, sendbuf, 2)))
		return 0;
	//deal command
	memset(sendbuf, 0x00, sizeof(sendbuf));
	switch(cmd_buf[4])
	{
	case 0x15:
		sendbuf[0] = 0xff;
		if((cmd_buf[5] == 0) || (cmd_buf[5] == 1))
		{
			rf_select(cmd_buf[5]);
			sendbuf[0] = 0;
		}
		SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		break;
	case 0x2a:	//close antena
		mcml_pwr_off();
		sendbuf[0] = 0;
		ret = SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		break;
		//2014/3/3 14:57:05
	case 0x20:
		if(cmd_buf[6] == 0) 
			cmd_buf[6] = KEYA;
		else
			cmd_buf[6] = KEYB;
		ret = mcml_load_key(cmd_buf[5],cmd_buf[6],cmd_buf[7],&cmd_buf[8]);
		//if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			//else
			//	SmartResponse(fd, cmd_buf[2], &cmd_buf[8], 0x06);
		break;
	case 0x21:
		if(cmd_buf[6] == 0) 
			cmd_buf[6] = KEYA;
		else
			cmd_buf[6] = KEYB;
		ret = mcml_authentication(cmd_buf[5],cmd_buf[6],cmd_buf[7]);
		sendbuf[0] = 0x00;
		if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			else
				SmartResponse(fd, cmd_buf[2], sendbuf , 0x01, 0x7e);
		break;
		//
	case 0x22:	//request card
		for(i = 0; i < cmd_buf[6]; i++)
		{
			if(mcml_request2(PICC_REQALL, sendbuf) == 0)
			{
				break;
			}
			set_timeout(3000);
		}
		if(i >= cmd_buf[6])
		{
			sendbuf[0] = 0x00;
			ret = SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		}else
		{
			ret = SmartResponse(fd, cmd_buf[2], sendbuf, 0x02, 0x7e);
		}
		break;
	case 0x23:	//anticoll
		if((cmd_buf[1] - 2) == 1)
		{//first anticoll
			ret = mcml_anticoll(sendbuf);
			if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			else
				SmartResponse(fd, cmd_buf[2], sendbuf, 0x05, 0x7e);
		}else if((cmd_buf[1] - 2) == 2)
		{//second anticoll
			//ret = mcml_anticoll2(sendbuf);
			//if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			//else
			//	SmartResponse(fd, cmd_buf[2], sendbuf, 0x05, 0x7e);
		}
		break;
	case 0x24:	//select
		if((cmd_buf[1] - 2) == 6)
		{//first select
			ret = mcml_select(&cmd_buf[5], &i);
			if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			else
			{
				sendbuf[0] = 0;
				sendbuf[1] = i;
				SmartResponse(fd, cmd_buf[2], sendbuf, 0x02, 0x7e);
			}
		}else if((cmd_buf[1] - 2) == 7)
		{//second select
			//ret = mcml_select2(&cmd_buf[5], &i);
			//if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			//else
			//{
			//	sendbuf[0] = 0;
			//	sendbuf[1] = i;
			//	SmartResponse(fd, cmd_buf[2], sendbuf, 0x02, 0x7e);
			//}
		}
		break;
	case 0x25:	//read block
		if((cmd_buf[1] - 2) == 2)
		{//read m1...mcml
			sendbuf[0] = mcml_read(cmd_buf[5], &sendbuf[1]);
			if(sendbuf[0] != 0)
				SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
			else
				SmartResponse(fd, cmd_buf[2], &sendbuf[1], 16, 0x7e);
		}
//		if((cmd_buf[1] - 2) == 2)
//		{//read m1
//			sendbuf[0] = UL_Page_Read(cmd_buf[5], &sendbuf[1]);
//			if(sendbuf[0] != 0)
//				SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
//			else
//				SmartResponse(fd, cmd_buf[2], &sendbuf[1], 16, 0x7e);
//		}
		break;
	case 0x26:	//write block
		if((cmd_buf[1] - 1) == 2)
		{
			sendbuf[0] = UL_Page_Write(cmd_buf[5], &cmd_buf[6]);
			SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		}
		break;
	case 0x27:
		ret = mcml_halt();
		if(ret != 0){
			sendbuf[0] = 0xff;
			SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		}else{
			sendbuf[0] = 0;
			SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		}
		break;
	case 0x30:
		if((cmd_buf[1] - 2) == 1)
		{//atr
			sendbuf[0] = sam_atr(chSmartSAMIndex, &sendbuf[1], out_len);
			if(sendbuf[0] != 0)
			{
				SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
			}else
			{
				SmartResponse(fd, cmd_buf[2], &sendbuf[1], (*out_len), 0x7e);
			}
		}else if((cmd_buf[1] - 2) == 2)
		{//select
			ret = sam_select(cmd_buf[5]);
			SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			chSmartSAMIndex = cmd_buf[5];
		}else if((cmd_buf[1] - 2) == 3)
		{//set speed
			if(cmd_buf[6] == 0)
				buf[0] = SAM_ETU_93;
			else
				buf[0] = SAM_ETU_372;
			sam_set(cmd_buf[5], buf[0], 4);
			sendbuf[0] = 0;
			SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		}
		break;
	case 0x31:
		ret = sam_apdu(chSmartSAMIndex, &cmd_buf[5], cmd_buf[1] - 3, sendbuf, out_len, 200, 0);
		if(ret != 0)
			SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
		else
		{
			SmartResponse(fd, cmd_buf[2], sendbuf, *out_len, 0x7e);
		}
		break;
	case 0x7c:
		switch(cmd_buf[5])
		{
		case 0x00:		//ats
			ret = mifpro_ats(cmd_buf[6], sendbuf, out_len);
			if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			else
				SmartResponse(fd, cmd_buf[2], sendbuf, *out_len, 0x7e);
			break;
		case 0x01:		//deselect
			//mifpro_deselect
			break;
		case 0x07:		//icmd
			ret = mifpro_icmd(&cmd_buf[6], cmd_buf[1] - 4, &sendbuf[1], &apduLen);
			if(ret != 0)
				SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
			else
			{
				if(apduLen < 250)
				{
					sendbuf[0] = 0x00;
					SmartResponse(fd, cmd_buf[2], sendbuf, apduLen + 1, 0x7e);
				}else
				{
					sendbuf[0] = 0x00;
					SmartResponse(fd, cmd_buf[2], sendbuf, 200, 0x7C);
					memcpy(&sendRetrybuf[1], &sendbuf[200], apduLen - 200);
					*out_len = apduLen - 200;
					sendRetrybuf[0] = 0x00;
					SmartResponse(fd, cmd_buf[2], sendRetrybuf, (*out_len) + 1, 0x7e);
				}
			}
			break;
		}
		break;
	case 0x91:
		//if(cmd_buf[5] == 0xFF)
		set_card_type(cmd_buf[6]);
		sendbuf[0] = cmd_buf[6];
		SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		break;	 
	case 0x96:	//获取复旦模块
		ret = hl_get_module_no(sendbuf);
		if(ret)
			SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
		else
			SmartResponse(fd, cmd_buf[2], sendbuf, 10, 0x7e);
		break;
	case 0x97:	//获取复旦模块硬件版本
		ret = hl_get_module_software_version(sendbuf);
		if(ret)
			SmartResponse(fd, cmd_buf[2], &ret, 0x01, 0x7e);
		else
			SmartResponse(fd, cmd_buf[2], sendbuf, 14, 0x7e);
		break;
	case 0x00:	//
		strcpy(sendbuf, "HHJT_ARM_BOM2018_20191028");
		SmartResponse(fd, cmd_buf[2], sendbuf, strlen(sendbuf), 0x7e);
		break;
	case 0x0e:
		sendbuf[0] = 0x00;
		SmartResponse(fd, cmd_buf[2], sendbuf, 1, 0x7e);
		break;
	case 0x47:
		if(cmd_buf[5] == 2)
		{
			beep(0);
			usleep(100*1000);
			beep(1);
			usleep(30*1000);
			beep(0);
			usleep(100*1000);
			beep(1);
		}
		sendbuf[0] = 0x00;
		SmartResponse(fd, cmd_buf[2], sendbuf, 1, 0x7e);
		break;
	case 0x03:
		sendbuf[0] = 0x01;
		if(0 == (apduLen = ee_read(0, 8196, buf)) )
			sendbuf[0] = 0x00;
		SmartResponse(fd, cmd_buf[2], sendbuf, 1, 0x7e);
		break;
	default:
		sendbuf[0] = 0x00;
		SmartResponse(fd, cmd_buf[2], sendbuf, 0x01, 0x7e);
		break;
	}
	//receive the 4e
	return ret;
}


/*
function:
parameter:
	fd:com handle
	chCode:response code
	chCommnd:command
	psend:message body
	len:message length
*/
unsigned char SmartResponse(int fd, unsigned char response_node, unsigned char *psend, unsigned char len, unsigned char packageFlag)
{
unsigned char 	sendbuf[600], lrc0, lrc1;
long 		ret;
unsigned char chinfo[1000], chtemp[20], fStat;
long 	i;
struct timeval timeout_smart;
fd_set writefd;

	memset(sendbuf, 0x00, 600);
	//response data length + response code length + the command length)
	sendbuf[0] = packageFlag; //0x7e
	sendbuf[1] = len + 2;
	sendbuf[2] = 0x01;
	sendbuf[3] = response_node;

	if ((psend != NULL) && (len > 0))
		memcpy(&sendbuf[4], psend, len);

	lrc0 = lrc1 = 0x33;
	for(i = 2; i < len + 4; i++)
	{
		lrc0 ^= sendbuf[i];
		lrc1 += sendbuf[i];
	}
	sendbuf[len + 4] = lrc0;
	sendbuf[len + 5] = lrc1;
#ifdef DEBUG_COMM	
	memset(chinfo, 0x00, 1000);
	for(i = 0; i < len + 6; i++)
	{
		sprintf((char *)chtemp, "%02X ", sendbuf[i]);
		strcat((char *)chinfo, (char *)chtemp);
	}
	printf("response:%s\n", chinfo);
#endif
	writecom(fd, sendbuf, len + 4 + 2);
	//
	FD_ZERO(&writefd);
	FD_SET(fd, &writefd);
	timeout_smart.tv_sec = 0;
	timeout_smart.tv_usec = 100 * 1000;
	do
	{
		ret = select(fd + 2, &writefd, NULL, NULL, &timeout_smart);
		if(ret > 0)
		{
			do
			{
				fStat = readcom(fd, chtemp, 1);
				if(fStat)
				{
					if(chtemp[0] == 0x41)
						continue;
					else if(chtemp[0] == response_node)
						return 1;
				}
			}while(1);
		}else
		{
			return 0;
		}
	}while(1);
	
	return 1;
}
