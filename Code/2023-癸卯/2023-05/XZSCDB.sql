-- SCDB.TBL_0001_PBOC definition

CREATE TABLE "SCDB    "."TBL_0001_PBOC"  (
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_TIME" VARCHAR(6) NOT NULL , 
		  "ACCOUNT_NO" VARCHAR(20) NOT NULL , 
		  "TRANS_VALUE" DECIMAL(5,0) NOT NULL , 
		  "CONFIRM_VALUE" DECIMAL(5,0) NOT NULL , 
		  "SYSTEM_SEQ" DECIMAL(10,0) NOT NULL , 
		  "REFERENCE_NO" VARCHAR(20) NOT NULL , 
		  "TRANS_TIME_NEW" TIMESTAMP )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_0001_PBOC" 
	ADD CONSTRAINT "PK_ODA_0100" PRIMARY KEY
		("SETTLE_DATE",
		 "ACCOUNT_NO",
		 "REFERENCE_NO");

GRANT CONTROL ON TABLE "SCDB    "."TBL_0001_PBOC" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_ODA_0100" TO USER "SCDB    ";


-- SCDB.TBL_3001_RUNMODE definition

CREATE TABLE "SCDB    "."TBL_3001_RUNMODE"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "OCCUR_TIME" TIMESTAMP(0) , 
		  "SOURCE_NID" VARCHAR(8) , 
		  "DEST_NID" VARCHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "RUNMODE_CODE" DECIMAL(3,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_3001_RUNMODE" TO USER "SCDB    ";


-- SCDB.TBL_4001_STATUS definition

CREATE TABLE "SCDB    "."TBL_4001_STATUS"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "OCCUR_TIME" TIMESTAMP(0) NOT NULL , 
		  "DEVICE_NID" VARCHAR(8) NOT NULL , 
		  "EVENT_LEVEL" DECIMAL(3,0) , 
		  "EVENT_CODE" CHAR(6) NOT NULL )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

CREATE INDEX "SCDB    "."INDEX_4001_STATUS" ON "SCDB    "."TBL_4001_STATUS" 
		("EVENT_LEVEL" ASC,
		 "DEVICE_NID" ASC)
		
		COMPRESS NO 
		INCLUDE NULL KEYS ALLOW REVERSE SCANS;

ALTER TABLE "SCDB    "."TBL_4001_STATUS" 
	ADD CONSTRAINT "XPKT_4001_STATUS" PRIMARY KEY
		("OCCUR_TIME",
		 "DEVICE_NID",
		 "EVENT_CODE");

GRANT CONTROL ON TABLE "SCDB    "."TBL_4001_STATUS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."INDEX_4001_STATUS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."XPKT_4001_STATUS" TO USER "SCDB    ";


-- SCDB.TBL_AD_ACC_BATCH definition

CREATE TABLE "SCDB    "."TBL_AD_ACC_BATCH"  (
		  "FILE_TYPE" VARCHAR(10) NOT NULL , 
		  "FILE_CODE" DECIMAL(5,0) NOT NULL , 
		  "MLC_COUNT" DECIMAL(10,0) , 
		  "ACC_COUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_AD_ACC_BATCH" 
	ADD CONSTRAINT "PK_AD_ACC_BATCH" PRIMARY KEY
		("FILE_TYPE",
		 "FILE_CODE");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_AD_ACC_BATCH" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_AD_ACC_BATCH" TO USER "SCDB    ";


-- SCDB.TBL_AD_ACC_BATCH_HIS definition

CREATE TABLE "SCDB    "."TBL_AD_ACC_BATCH_HIS"  (
		  "FILE_TYPE" VARCHAR(10) NOT NULL , 
		  "FILE_CODE" DECIMAL(5,0) NOT NULL , 
		  "MLC_COUNT" DECIMAL(10,0) , 
		  "ACC_COUNT" DECIMAL(10,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_AD_ACC_BATCH_HIS" 
	ADD CONSTRAINT "PK_AD_ACC_BATCH_HIS" PRIMARY KEY
		("FILE_TYPE",
		 "FILE_CODE",
		 "SETTLE_DATE");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_AD_ACC_BATCH_HIS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_AD_ACC_BATCH_HIS" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_8801 definition

CREATE TABLE "SCDB    "."TBL_BATCH_8801"  (
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_NAME" VARCHAR(8) NOT NULL , 
		  "TICKET_CLASS" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "TRANS_COUNT" DECIMAL(10,0) , 
		  "TRANS_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_8801" 
	ADD CONSTRAINT "PK_BAT_8801" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_NID",
		 "TICKET_CLASS",
		 "TICKET_TYPE",
		 "TRANS_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_8801" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_8801" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_8802 definition

CREATE TABLE "SCDB    "."TBL_BATCH_8802"  (
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_NAME" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP NOT NULL , 
		  "TRANS_END" TIMESTAMP NOT NULL , 
		  "TICKET_CLASS" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "TRANS_COUNT" DECIMAL(10,0) , 
		  "TRANS_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_8802" 
	ADD CONSTRAINT "PK_BAT_8802" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_NID",
		 "TICKET_CLASS",
		 "TICKET_TYPE",
		 "TRANS_TYPE",
		 "PAYMENT_METHOD",
		 "OPERATOR_ID",
		 "TRANS_START",
		 "TRANS_END");

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_8802" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_8802" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_8803 definition

CREATE TABLE "SCDB    "."TBL_BATCH_8803"  (
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_NAME" VARCHAR(8) NOT NULL , 
		  "COIN_RECYCLE_AMOUNT" DECIMAL(10,0) , 
		  "CASH_RECYCLE_AMOUNT" DECIMAL(10,0) , 
		  "COIN_ADD_AMOUNT" DECIMAL(10,0) , 
		  "CASH_ADD_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_START_COIN_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_END_COIN_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_START_CASH_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_END_CASH_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_8803" 
	ADD CONSTRAINT "PK_BAT_8803" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_NID");

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_8803" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_8803" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_8804 definition

CREATE TABLE "SCDB    "."TBL_BATCH_8804"  (
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_NAME" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "AUDIT_FILE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "OPERATE_TIME" TIMESTAMP NOT NULL , 
		  "COIN_SPARE_1_AMOUNT" DECIMAL(10,0) , 
		  "COIN_SPARE_2_AMOUNT" DECIMAL(10,0) , 
		  "COIN_SPARE_3_AMOUNT" DECIMAL(10,0) , 
		  "COIN_CHARGE_1_AMOUNT" DECIMAL(10,0) , 
		  "COIN_CHARGE_2_AMOUNT" DECIMAL(10,0) , 
		  "COIN_RECYCLE_AMOUNT" DECIMAL(10,0) , 
		  "CASH_SPARE_1_AMOUNT" DECIMAL(10,0) , 
		  "CASH_SPARE_2_AMOUNT" DECIMAL(10,0) , 
		  "CASH_RECYCLE_AMOUNT" DECIMAL(10,0) , 
		  "CASH_CHARGE_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_8804" 
	ADD CONSTRAINT "PK_BAT_8804" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_NID",
		 "OPERATOR_ID",
		 "AUDIT_FILE_TYPE",
		 "OPERATE_TIME");

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_8804" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_8804" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_8805 definition

CREATE TABLE "SCDB    "."TBL_BATCH_8805"  (
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_NAME" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "AUDIT_FILE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "OPERATE_TIME" TIMESTAMP NOT NULL , 
		  "BOX_1_COUNT" DECIMAL(10,0) , 
		  "BOX_2_COUNT" DECIMAL(10,0) , 
		  "BOX_3_COUNT" DECIMAL(10,0) , 
		  "BOX_4_COUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_8805" 
	ADD CONSTRAINT "PK_BAT_8805" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_NID",
		 "OPERATOR_ID",
		 "AUDIT_FILE_TYPE",
		 "OPERATE_TIME");

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_8805" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_8805" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_APP_LOG definition

CREATE TABLE "SCDB    "."TBL_BATCH_APP_LOG"  (
		  "START_TIME" TIMESTAMP , 
		  "PROC_NAME" VARCHAR(200) , 
		  "LOG_MSG" VARCHAR(1024) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_APP_LOG" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_AUDIT_DEVICE definition

CREATE TABLE "SCDB    "."TBL_BATCH_AUDIT_DEVICE"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "SALE_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "IN_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "OUT_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "OUT_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "LOAD_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "LOAD_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "UPDATE_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "REFUND_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "REFUND_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "RECYCLE_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "LOCK_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "COIN_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "COIN_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "CASH_COUNT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "CASH_AMOUNT" DECIMAL(10,0) WITH DEFAULT 0 )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_AUDIT_DEVICE" 
	ADD CONSTRAINT "PK_BAT_AUDIT_DEVICE" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_TYPE",
		 "DEVICE_NID",
		 "DEVICE_TYPE");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_AUDIT_DEVICE" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_AUDIT_DEVICE" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_CARD_LOCK_DETAIL definition

CREATE TABLE "SCDB    "."TBL_BATCH_CARD_LOCK_DETAIL"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "TICKET_CATEGORY" DECIMAL(3,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "CARD_ID" VARCHAR(20) , 
		  "CARD_PHY_ID" VARCHAR(16) , 
		  "TRANS_TIME" TIMESTAMP(0) , 
		  "DEVICE_NID" CHAR(8) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_CARD_LOCK(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：黑名单锁卡 
  --输入：batch_date  运营日，tbl_tr_yct_load_temp，tbl_tr_cit_temp 
  --数据源： tbl_tr_svt_temp
  --输出：tbl_batch_card_lock_detail 
  --备注：HHJT_CJP 20190809
  --======================================================================

    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_CARD_LOCK';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_card_lock_detail WHERE settle_date = batch_date;
 
    --SVT
    INSERT INTO tbl_batch_card_lock_detail
      (line_nid,settle_date, trans_date, station_nid, ticket_category, ticket_type, trans_type,
       card_id, card_phy_id, trans_time, device_nid)
      SELECT to_number(substr(device_nid,3,2)),settle_date,
             to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60), 'yyyyMMdd'),
             station_nid, CCDB_STD.C_TC_SVT, ticket_type, trans_type, card_id,
             card_phy_id, trans_time, device_nid
        FROM tbl_tr_svt_temp
       WHERE settle_date = batch_date
         AND trans_type = CCDB_STD.C_TRT_SVT_LOCK;

 
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_CARD_LOCK', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_CARD_LOCK_DETAIL" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_ENTRY_EXIT_DETAIL definition

CREATE TABLE "SCDB    "."TBL_BATCH_ENTRY_EXIT_DETAIL"  (
		  "TRANS_DATE" VARCHAR(8) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "SLOT_ID" DECIMAL(3,0) , 
		  "STATION_NID" VARCHAR(8) , 
		  "TICKET_CATEGORY" DECIMAL(3,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "ENTRY_NUM" DECIMAL(1,0) , 
		  "EXIT_NUM" DECIMAL(1,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_BATCH_ENTRY_EXIT_DETAIL"."TICKET_CATEGORY" IS '1:单程票类 2：储值票类 3：一卡通 4：二维码 5：银行卡';

CREATE PROCEDURE P_BATCH_ENTRY_EXIT_STAT(batch_date IN VARCHAR(200))
IS

  --================================================================================
  --功能：统计进出站客流
  --输入：batch_date  运营日，tbl_batch_entry_exit_detail为数据源
  --输出：TBL_BATCH_NTRY_EXIT_STAT
  --备注：HHJT_CJP 20190809
  --================================================================================
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
		proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_ENTRY_EXIT_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
   CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_entry_exit_stat WHERE settle_date = batch_date;
    COMMIT;
  
    -- 进出站分时客流统计表
    INSERT INTO tbl_batch_entry_exit_stat
      (LINE_NID,trans_date, settle_date, slot_id, station_nid, ticket_category, ticket_type,
       device_nid, device_type, entry_num, exit_num)
      SELECT to_number(substr(device_nid,3,2)),trans_date, settle_date, slot_id, station_nid, ticket_category,
                ticket_type, device_nid, substr(device_nid, 1, 2), SUM(entry_num),SUM(exit_num)
        FROM tbl_batch_entry_exit_detail
        WHERE settle_date = batch_date
       GROUP BY trans_date, settle_date, slot_id, station_nid, ticket_category,
                ticket_type, device_nid;
  
    end_time     := SYSDATE;
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_ENTRY_EXIT_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_ENTRY_EXIT_DETAIL" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_ENTRY_EXIT_STAT definition

CREATE TABLE "SCDB    "."TBL_BATCH_ENTRY_EXIT_STAT"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "SLOT_ID" DECIMAL(3,0) , 
		  "STATION_NID" VARCHAR(8) , 
		  "TICKET_CATEGORY" DECIMAL(3,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "DEVICE_TYPE" VARCHAR(2) , 
		  "ENTRY_NUM" DECIMAL(10,0) , 
		  "EXIT_NUM" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_BATCH_ENTRY_EXIT_STAT"."TICKET_CATEGORY" IS '1:单程票类 2：储值票类 3：一卡通 4：二维码 5：银行卡';

CREATE PROCEDURE P_BATCH_ENTRY_EXIT_STAT(batch_date IN VARCHAR(200))
IS

  --================================================================================
  --功能：统计进出站客流
  --输入：batch_date  运营日，tbl_batch_entry_exit_detail为数据源
  --输出：TBL_BATCH_NTRY_EXIT_STAT
  --备注：HHJT_CJP 20190809
  --================================================================================
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
		proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_ENTRY_EXIT_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
   CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_entry_exit_stat WHERE settle_date = batch_date;
    COMMIT;
  
    -- 进出站分时客流统计表
    INSERT INTO tbl_batch_entry_exit_stat
      (LINE_NID,trans_date, settle_date, slot_id, station_nid, ticket_category, ticket_type,
       device_nid, device_type, entry_num, exit_num)
      SELECT to_number(substr(device_nid,3,2)),trans_date, settle_date, slot_id, station_nid, ticket_category,
                ticket_type, device_nid, substr(device_nid, 1, 2), SUM(entry_num),SUM(exit_num)
        FROM tbl_batch_entry_exit_detail
        WHERE settle_date = batch_date
       GROUP BY trans_date, settle_date, slot_id, station_nid, ticket_category,
                ticket_type, device_nid;
  
    end_time     := SYSDATE;
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_ENTRY_EXIT_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_CLEAR_DATA(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：清理数据
  --输入：batch_date  运营日
  --输出：过期数据清理
  --备注：HHJT_CJP 20190809
  --         必须在每天日结程序开始前，清理数据
  --======================================================================

    --local variable
    reserve_day   NUMBER(3);
    del_partition NUMBER(3);
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_CLEAR_DATA';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  --====清理非临时性数据============（根据运营需求确认）==========
--保存7天
  reserve_day :=7;

 DELETE FROM TBL_BATCH_RG_AGM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_BOM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_TVM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
  
   

 --====清理临时数据==============================
 
  --TRUNCATE TABLE tbl_batch_sjt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_sjt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_trans immediate;
 
  --===清理无效数据=========================================
 DELETE FROM tbl_batch_entry_exit_stat where entry_num+exit_num=0;



    end_time     := SYSDATE;
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_CLEAR_DATA',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_ENTRY_EXIT_STAT" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_FAULT_SETTLE_DATA definition

CREATE TABLE "SCDB    "."TBL_BATCH_FAULT_SETTLE_DATA"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "VALUE_TRANS" DECIMAL(10,0) , 
		  "SETTLE_COUNT" DECIMAL(10,0) , 
		  "SETTLE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，T_7004_TVM ,T_7005_BOM 为数据源
  --输出：tbl_batch_FAULT_settle_trans ,(tbl_batch_FAULT_settle_data为中间表)
  --备注：HHJT_CJP 20191002
  --=============================================================================
   
    CURSOR FAULT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_FAULT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_FAULT_settle_trans tbl_batch_FAULT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_FAULT_settle_data WHERE settle_date = batch_date;
 
    --初始化统计-放入汇总表
    --TVM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FALUT_TVM ticket_type, CCDB_STD.C_FALUT_TVM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, 0 operator_id,0 SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7004_TVM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
                     
                     
    --BOM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FAULT_BOM ticket_type, CCDB_STD.C_FAULT_BOM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, OPERATOR_NBR operator_id,SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7005_BOM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
        			 
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_FAULT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_FAULT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_FAULT_settle_head IN FAULT_settle_cur
      LOOP
        rec_FAULT_settle_trans.line_nid        := rec_FAULT_settle_head.line_nid;
        rec_FAULT_settle_trans.settle_date     := rec_FAULT_settle_head.settle_date;
        rec_FAULT_settle_trans.trans_date      := rec_FAULT_settle_head.trans_date;
        rec_FAULT_settle_trans.operator_id     := rec_FAULT_settle_head.operator_id;
        rec_FAULT_settle_trans.shift_info      := rec_FAULT_settle_head.shift_info;
        rec_FAULT_settle_trans.trans_start     := rec_FAULT_settle_head.trans_start;
        rec_FAULT_settle_trans.trans_end       := rec_FAULT_settle_head.trans_end;
        rec_FAULT_settle_trans.station_nid     := rec_FAULT_settle_head.station_nid;
        rec_FAULT_settle_trans.device_nid      := rec_FAULT_settle_head.device_nid;
        rec_FAULT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_FAULT_settle_head.device_nid,1, 2));
        rec_FAULT_settle_trans.ticket_type     := rec_FAULT_settle_head.ticket_type;
        rec_FAULT_settle_trans.payment_method  := rec_FAULT_settle_head.payment_method;
        rec_FAULT_settle_trans.ticket_category := CCDB_STD.C_TC_FAULT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.sale_count, rec_FAULT_settle_trans.sale_amount
          FROM DUAL  ;
      
        --进站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.in_count
          FROM DUAL;
           
        --出站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.out_count, rec_FAULT_settle_trans.out_amount
          FROM DUAL;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.load_count, rec_FAULT_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.UPDATE_COUNT, rec_FAULT_settle_trans.UPDATE_AMOUNT
          FROM DUAL;



				--出站更新			 
          rec_FAULT_settle_trans.UPDATE_OUT_COUNT 	 := 0;
          rec_FAULT_settle_trans.UPDATE_OUT_AMOUNT   := 0;
 	
				--进站更新
				 rec_FAULT_settle_trans.UPDATE_IN_COUNT 	  := 0;
         rec_FAULT_settle_trans.UPDATE_IN_AMOUNT    := 0;
							
				--超时更新
				 rec_FAULT_settle_trans.UPDATE_OVER_TIME_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_TIME_AMOUNT    := 0;


				--超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_RUN_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_RUN_AMOUNT     := 0;

			--超时且超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_BOTH_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_BOTH_AMOUNT    := 0;
  
        --退票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.refund_count, rec_FAULT_settle_trans.refund_amount
          FROM DUAL;          
           
        --延时退卡
        SELECT sum(0), sum(0)
        	INTO  rec_FAULT_settle_trans.refund_delay_count, rec_FAULT_settle_trans.refund_delay_amount
          FROM DUAL;
 
     		--押金  
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.deposit_COUNT,rec_FAULT_settle_trans.DEPOSIT_AMOUNT
          FROM DUAL;
          
        --手续费
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.trans_fee_COUNT,rec_FAULT_settle_trans.trans_fee_AMOUNT
          FROM DUAL;
           
        --故障退款
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_FAULT_settle_trans.fault_count,rec_FAULT_settle_trans.fault_amount
          FROM tbl_batch_FAULT_settle_data
         WHERE trans_date 		= rec_FAULT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_FAULT_settle_trans.operator_id
           AND ticket_type		= rec_FAULT_settle_trans.ticket_type
           AND device_nid 		= rec_FAULT_settle_trans.device_nid
           AND payment_method = rec_FAULT_settle_head.payment_method
           AND shift_info			= rec_FAULT_settle_trans.shift_info
           AND trans_type 		IN(254,255);  	
           
           
           

        INSERT INTO tbl_batch_FAULT_settle_trans VALUES rec_FAULT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_FAULT_SETTLE_DATA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_FAULT_SETTLE_TRANS definition

CREATE TABLE "SCDB    "."TBL_BATCH_FAULT_SETTLE_TRANS"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_FAULT_SETTLE_TRANS" 
	ADD CONSTRAINT "PK_BAT_FAULT_SET_TRA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO");

CREATE PROCEDURE P_BATCH_FAULT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，T_7004_TVM ,T_7005_BOM 为数据源
  --输出：tbl_batch_FAULT_settle_trans ,(tbl_batch_FAULT_settle_data为中间表)
  --备注：HHJT_CJP 20191002
  --=============================================================================
   
    CURSOR FAULT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_FAULT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_FAULT_settle_trans tbl_batch_FAULT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_FAULT_settle_data WHERE settle_date = batch_date;
 
    --初始化统计-放入汇总表
    --TVM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FALUT_TVM ticket_type, CCDB_STD.C_FALUT_TVM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, 0 operator_id,0 SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7004_TVM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
                     
                     
    --BOM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FAULT_BOM ticket_type, CCDB_STD.C_FAULT_BOM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, OPERATOR_NBR operator_id,SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7005_BOM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
        			 
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_FAULT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_FAULT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_FAULT_settle_head IN FAULT_settle_cur
      LOOP
        rec_FAULT_settle_trans.line_nid        := rec_FAULT_settle_head.line_nid;
        rec_FAULT_settle_trans.settle_date     := rec_FAULT_settle_head.settle_date;
        rec_FAULT_settle_trans.trans_date      := rec_FAULT_settle_head.trans_date;
        rec_FAULT_settle_trans.operator_id     := rec_FAULT_settle_head.operator_id;
        rec_FAULT_settle_trans.shift_info      := rec_FAULT_settle_head.shift_info;
        rec_FAULT_settle_trans.trans_start     := rec_FAULT_settle_head.trans_start;
        rec_FAULT_settle_trans.trans_end       := rec_FAULT_settle_head.trans_end;
        rec_FAULT_settle_trans.station_nid     := rec_FAULT_settle_head.station_nid;
        rec_FAULT_settle_trans.device_nid      := rec_FAULT_settle_head.device_nid;
        rec_FAULT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_FAULT_settle_head.device_nid,1, 2));
        rec_FAULT_settle_trans.ticket_type     := rec_FAULT_settle_head.ticket_type;
        rec_FAULT_settle_trans.payment_method  := rec_FAULT_settle_head.payment_method;
        rec_FAULT_settle_trans.ticket_category := CCDB_STD.C_TC_FAULT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.sale_count, rec_FAULT_settle_trans.sale_amount
          FROM DUAL  ;
      
        --进站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.in_count
          FROM DUAL;
           
        --出站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.out_count, rec_FAULT_settle_trans.out_amount
          FROM DUAL;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.load_count, rec_FAULT_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.UPDATE_COUNT, rec_FAULT_settle_trans.UPDATE_AMOUNT
          FROM DUAL;



				--出站更新			 
          rec_FAULT_settle_trans.UPDATE_OUT_COUNT 	 := 0;
          rec_FAULT_settle_trans.UPDATE_OUT_AMOUNT   := 0;
 	
				--进站更新
				 rec_FAULT_settle_trans.UPDATE_IN_COUNT 	  := 0;
         rec_FAULT_settle_trans.UPDATE_IN_AMOUNT    := 0;
							
				--超时更新
				 rec_FAULT_settle_trans.UPDATE_OVER_TIME_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_TIME_AMOUNT    := 0;


				--超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_RUN_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_RUN_AMOUNT     := 0;

			--超时且超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_BOTH_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_BOTH_AMOUNT    := 0;
  
        --退票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.refund_count, rec_FAULT_settle_trans.refund_amount
          FROM DUAL;          
           
        --延时退卡
        SELECT sum(0), sum(0)
        	INTO  rec_FAULT_settle_trans.refund_delay_count, rec_FAULT_settle_trans.refund_delay_amount
          FROM DUAL;
 
     		--押金  
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.deposit_COUNT,rec_FAULT_settle_trans.DEPOSIT_AMOUNT
          FROM DUAL;
          
        --手续费
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.trans_fee_COUNT,rec_FAULT_settle_trans.trans_fee_AMOUNT
          FROM DUAL;
           
        --故障退款
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_FAULT_settle_trans.fault_count,rec_FAULT_settle_trans.fault_amount
          FROM tbl_batch_FAULT_settle_data
         WHERE trans_date 		= rec_FAULT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_FAULT_settle_trans.operator_id
           AND ticket_type		= rec_FAULT_settle_trans.ticket_type
           AND device_nid 		= rec_FAULT_settle_trans.device_nid
           AND payment_method = rec_FAULT_settle_head.payment_method
           AND shift_info			= rec_FAULT_settle_trans.shift_info
           AND trans_type 		IN(254,255);  	
           
           
           

        INSERT INTO tbl_batch_FAULT_settle_trans VALUES rec_FAULT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_FAULT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_FAULT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				         
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_FAULT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_FAULT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),		
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 	        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_FAULT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_FAULT_SETTLE_TRANS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_FAULT_SET_TRA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_INCOME_SALE_DAY definition

CREATE TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_DAY"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" CHAR(8) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_DAY" 
	ADD CONSTRAINT "PK_BAT_INC_SAL_DAY" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "OPERATOR_ID",
		 "STATION_NID",
		 "TICKET_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_DAY" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_INC_SAL_DAY" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_INCOME_SALE_MONTH definition

CREATE TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_MONTH"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" CHAR(8) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_MONTH" 
	ADD CONSTRAINT "PK_BAT_INC_SAL_MON" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "OPERATOR_ID",
		 "STATION_NID",
		 "TICKET_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_MONTH" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_INC_SAL_MON" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_INCOME_SALE_YEAR definition

CREATE TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_YEAR"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" CHAR(8) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_YEAR" 
	ADD CONSTRAINT "PK_BAT_INC_SAL_YEA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "OPERATOR_ID",
		 "STATION_NID",
		 "TICKET_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_INCOME_SALE_YEAR" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_INC_SAL_YEA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_LOG definition

CREATE TABLE "SCDB    "."TBL_BATCH_LOG"  (
		  "RID" DECIMAL(10,0) , 
		  "PROC_NAME" VARCHAR(100) , 
		  "DATA_ARGU" VARCHAR(8) , 
		  "START_TIME" TIMESTAMP , 
		  "TIME_ELAPSED" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_LOG" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_OPERATOR_SHIFT definition

CREATE TABLE "SCDB    "."TBL_BATCH_OPERATOR_SHIFT"  (
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "SETTLE_DATE" VARCHAR(8) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBACCIDX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SJT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_sjt_temp为数据源
  --输出：tbl_batch_sjt_settle_trans ,(tbl_batch_sjt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR sjt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_sjt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_sjt_settle_trans tbl_batch_sjt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  
    DELETE FROM tbl_batch_sjt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_SJT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,UPDATE_TYPE)
       SELECT to_number(substr(sjt.device_nid,3,2)),sjt.settle_date, trans_date, station_nid, sjt.device_nid, ticket_type,trans_type, 
             payment_method, sjt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit ,update_type
                 FROM tbl_tr_sjt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) sjt       			   
        			  ON  sjt.operator_id    =	shift.operator_id
        			  AND sjt.device_nid		 =	shift.device_nid
              	AND sjt.trans_time		 >= shift.trans_start
              	AND sjt.trans_time		 <= shift.trans_end
              	AND sjt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND sjt.shift_info 		 =  shift.shift_info
            GROUP BY sjt.settle_date, sjt.trans_date, sjt.station_nid, sjt.device_nid, ticket_type,trans_type,payment_method, 
                     sjt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type ;
       
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_sjt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
      
      
    ---HHJT_CJP 20190815 互联网单程票退票 支付方式更改为 C_PM_QR(6) 互联网单程票(TICKET_TYPE 9)
    UPDATE tbl_batch_sjt_settle_data
    	 SET PAYMENT_METHOD =  CCDB_STD.C_PM_QR
     WHERE TICKET_TYPE = 9
     	 AND TRANS_TYPE  = CCDB_STD.C_TRT_SJT_REFUND
     	 AND SETTLE_DATE = BATCH_DATE ;
  		
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_sjt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_sjt_settle_head IN sjt_settle_cur
      LOOP
        rec_sjt_settle_trans.line_nid        := rec_sjt_settle_head.line_nid;
        rec_sjt_settle_trans.settle_date     := rec_sjt_settle_head.settle_date;
        rec_sjt_settle_trans.trans_date      := rec_sjt_settle_head.trans_date;
        rec_sjt_settle_trans.operator_id     := rec_sjt_settle_head.operator_id;
        rec_sjt_settle_trans.shift_info      := rec_sjt_settle_head.shift_info;
        rec_sjt_settle_trans.trans_start     := rec_sjt_settle_head.trans_start;
        rec_sjt_settle_trans.trans_end       := rec_sjt_settle_head.trans_end;
        rec_sjt_settle_trans.station_nid     := rec_sjt_settle_head.station_nid;
        rec_sjt_settle_trans.device_nid      := rec_sjt_settle_head.device_nid;
        rec_sjt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_sjt_settle_head.device_nid,1, 2));
        rec_sjt_settle_trans.ticket_type     := rec_sjt_settle_head.ticket_type;
        rec_sjt_settle_trans.payment_method  := rec_sjt_settle_head.payment_method;
        rec_sjt_settle_trans.ticket_category := CCDB_STD.C_TC_SJT;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.sale_count, rec_sjt_settle_trans.sale_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_SJT_SALE,CCDB_STD.C_TRT_SJT_SALE1,CCDB_STD.C_TRT_SJT_SALE2);
           --AND trans_type  		= CCDB_STD.C_TRT_SJT_SALE;
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_sjt_settle_trans.in_count
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_IN,CCDB_STD.C_TRT_SJT_IN1);
           --AND trans_type 		= CCDB_STD.C_TRT_SJT_IN
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.out_count, rec_sjt_settle_trans.out_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_OUT,CCDB_STD.C_TRT_SJT_OUT1,CCDB_STD.C_TRT_SJT_OUT2,CCDB_STD.C_TRT_SJT_OUT3,CCDB_STD.C_TRT_SJT_OUT4,CCDB_STD.C_TRT_SJT_OUT5
           											 ,CCDB_STD.C_TRT_SJT_OUT6,CCDB_STD.C_TRT_SJT_OUT7,CCDB_STD.C_TRT_SJT_OUT8,CCDB_STD.C_TRT_SJT_OUT9,CCDB_STD.C_TRT_SJT_OUT10,CCDB_STD.C_TRT_SJT_OUT11);
					 --AND trans_type 		= CCDB_STD.C_TRT_SJT_OUT
        --充值
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.load_count, rec_sjt_settle_trans.load_amount
          FROM tbl_batch_sjt_settle_data;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_COUNT, rec_sjt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_UPDATE,CCDB_STD.C_TRT_SJT_UPDATE1,CCDB_STD.C_TRT_SJT_UPDATE2,CCDB_STD.C_TRT_SJT_UPDATE3,CCDB_STD.C_TRT_SJT_UPDATE4,CCDB_STD.C_TRT_SJT_UPDATE5,CCDB_STD.C_TRT_SJT_UPDATE6);


				--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OUT_COUNT, rec_sjt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_IN_COUNT, rec_sjt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_sjt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_sjt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_sjt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.refund_count, rec_sjt_settle_trans.refund_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_REFUND;          
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.REFUND_DELAY_COUNT, rec_sjt_settle_trans.REFUND_DELAY_AMOUNT
          FROM tbl_batch_sjt_settle_data;
 
    	--押金 发售（0X01）收押金 退卡（0x06）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 1, 1,6,-1, 0)), 0)
          INTO rec_sjt_settle_trans.deposit_COUNT,rec_sjt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_sjt_settle_trans.trans_fee_COUNT,rec_sjt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid		  = rec_sjt_settle_trans.device_nid
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.fault_count,rec_sjt_settle_trans.fault_amount
          FROM dual;
          
           

        INSERT INTO tbl_batch_sjt_settle_trans VALUES rec_sjt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SVT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_svt_temp为数据源
  --输出：tbl_batch_svt_settle_trans ,(tbl_batch_svt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR svt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_svt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_svt_settle_trans tbl_batch_svt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_svt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_svt_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(svt.device_nid,3,2)),svt.settle_date, trans_date, station_nid, svt.device_nid, ticket_type,trans_type, 
             payment_method, svt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_svt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) svt       			   
        			  ON  svt.operator_id    =	shift.operator_id
        			  AND svt.device_nid		 =	shift.device_nid
              	AND svt.trans_time		 >= shift.trans_start
              	AND svt.trans_time		 <= shift.trans_end
              	AND svt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND svt.shift_info 		 =  shift.shift_info
            GROUP BY svt.settle_date, svt.trans_date, svt.station_nid, svt.device_nid, ticket_type,trans_type,payment_method, 
                     svt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,svt.update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_svt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_svt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_svt_settle_head IN svt_settle_cur
      LOOP
        rec_svt_settle_trans.line_nid        := rec_svt_settle_head.line_nid;
        rec_svt_settle_trans.settle_date     := rec_svt_settle_head.settle_date;
        rec_svt_settle_trans.trans_date      := rec_svt_settle_head.trans_date;
        rec_svt_settle_trans.operator_id     := rec_svt_settle_head.operator_id;
        rec_svt_settle_trans.shift_info      := rec_svt_settle_head.shift_info;
        rec_svt_settle_trans.trans_start     := rec_svt_settle_head.trans_start;
        rec_svt_settle_trans.trans_end       := rec_svt_settle_head.trans_end;
        rec_svt_settle_trans.station_nid     := rec_svt_settle_head.station_nid;
        rec_svt_settle_trans.device_nid      := rec_svt_settle_head.device_nid;
        rec_svt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_svt_settle_head.device_nid,1, 2));
        rec_svt_settle_trans.ticket_type     := rec_svt_settle_head.ticket_type;
        rec_svt_settle_trans.payment_method  := rec_svt_settle_head.payment_method;
        rec_svt_settle_trans.ticket_category := CCDB_STD.C_TC_svt;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.sale_count, rec_svt_settle_trans.sale_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_svt_SALE,CCDB_STD.C_TRT_svt_SALE1);
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_svt_settle_trans.in_count
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_IN,CCDB_STD.C_TRT_svt_IN1);
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.out_count, rec_svt_settle_trans.out_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_OUT,CCDB_STD.C_TRT_svt_OUT1,CCDB_STD.C_TRT_svt_OUT2,CCDB_STD.C_TRT_svt_OUT3,CCDB_STD.C_TRT_svt_OUT4,CCDB_STD.C_TRT_svt_OUT5
           											 ,CCDB_STD.C_TRT_svt_OUT6,CCDB_STD.C_TRT_svt_OUT7,CCDB_STD.C_TRT_svt_OUT8,CCDB_STD.C_TRT_svt_OUT9,CCDB_STD.C_TRT_svt_OUT10,CCDB_STD.C_TRT_svt_OUT11);

        --充值
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.load_count, rec_svt_settle_trans.load_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_LOAD,CCDB_STD.C_TRT_svt_LOAD1);

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_COUNT, rec_svt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_UPDATE,CCDB_STD.C_TRT_svt_UPDATE1,CCDB_STD.C_TRT_svt_UPDATE2,CCDB_STD.C_TRT_svt_UPDATE3,CCDB_STD.C_TRT_svt_UPDATE4,CCDB_STD.C_TRT_svt_UPDATE5,CCDB_STD.C_TRT_svt_UPDATE6);

			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OUT_COUNT, rec_svt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_IN_COUNT, rec_svt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_svt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_svt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_svt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_count, rec_svt_settle_trans.refund_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND;          
           
        --延时退卡
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_delay_count, rec_svt_settle_trans.refund_delay_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND_DELAY; 
 
    	--押金 发售（0X0B）收押金 退卡（0x14,0X15）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 11, 1,20,-1,21,-1,0)), 0)
          INTO rec_svt_settle_trans.deposit_COUNT,rec_svt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_svt_settle_trans.trans_fee_COUNT,rec_svt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid		  = rec_svt_settle_trans.device_nid
           AND TRANS_FEE > 0;

 		--故障退款
        SELECT sum(0), sum(0)
          INTO rec_svt_settle_trans.fault_count,rec_svt_settle_trans.fault_amount
          FROM dual;


        INSERT INTO tbl_batch_svt_settle_trans VALUES rec_svt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_YKT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_YKT_temp为数据源
  --输出：tbl_batch_YKT_settle_trans ,(tbl_batch_YKT_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR YKT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_YKT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_YKT_settle_trans tbl_batch_YKT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_YKT_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_YKT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(YKT.device_nid,3,2)),YKT.settle_date, trans_date, station_nid, YKT.device_nid, ticket_type,trans_type, 
             payment_method, YKT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_YKT_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) YKT       			   
        			  ON  YKT.operator_id    =	shift.operator_id
        			  AND YKT.device_nid		 =	shift.device_nid
              	AND YKT.trans_time		 >= shift.trans_start
              	AND YKT.trans_time		 <= shift.trans_end
              	AND YKT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND YKT.shift_info 		 =  shift.shift_info
            GROUP BY YKT.settle_date, YKT.trans_date, YKT.station_nid, YKT.device_nid, ticket_type,trans_type,payment_method, 
                     YKT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_YKT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_YKT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_YKT_settle_head IN YKT_settle_cur
      LOOP
        rec_YKT_settle_trans.line_nid        := rec_YKT_settle_head.line_nid;
        rec_YKT_settle_trans.settle_date     := rec_YKT_settle_head.settle_date;
        rec_YKT_settle_trans.trans_date      := rec_YKT_settle_head.trans_date;
        rec_YKT_settle_trans.operator_id     := rec_YKT_settle_head.operator_id;
        rec_YKT_settle_trans.shift_info      := rec_YKT_settle_head.shift_info;
        rec_YKT_settle_trans.trans_start     := rec_YKT_settle_head.trans_start;
        rec_YKT_settle_trans.trans_end       := rec_YKT_settle_head.trans_end;
        rec_YKT_settle_trans.station_nid     := rec_YKT_settle_head.station_nid;
        rec_YKT_settle_trans.device_nid      := rec_YKT_settle_head.device_nid;
        rec_YKT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_YKT_settle_head.device_nid,1, 2));
        rec_YKT_settle_trans.ticket_type     := rec_YKT_settle_head.ticket_type;
        rec_YKT_settle_trans.payment_method  := rec_YKT_settle_head.payment_method;
        rec_YKT_settle_trans.ticket_category := CCDB_STD.C_TC_YKT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.sale_count, rec_YKT_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站 ---0x83 一卡通进站  ---0x93 交通部CPU卡进站 
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_YKT_settle_trans.in_count
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5001,5901);
           
        --出站 ---0x84 一卡通出站    ---0x94 交通部CPU卡出站  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.out_count, rec_YKT_settle_trans.out_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5002,5003,5004,5007,5008,5009,5902,5903,5904,5907,5908,5909);  

     
        --充值 ---0x96 交通部CPU卡充值  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.load_count, rec_YKT_settle_trans.load_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5301,5302) ;

      
     		--更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.UPDATE_COUNT, rec_YKT_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid			= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5200,5201,5202,5203,5204,5205,5206,5701,5702,5703,5704,5705,5706);

 				--出站更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OUT_COUNT, rec_ykt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_IN_COUNT, rec_ykt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_ykt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_ykt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_ykt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
        --退票
         SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_count, rec_YKT_settle_trans.refund_amount
          FROM DUAL;
 
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_delay_count, rec_YKT_settle_trans.refund_delay_amount
          FROM DUAL;
 
    	--押金   
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_YKT_settle_trans.deposit_COUNT,rec_YKT_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_YKT_settle_trans.trans_fee_COUNT,rec_YKT_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid		  = rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
       --故障退款
        SELECT sum(0), sum(0)
          INTO rec_ykt_settle_trans.fault_count,rec_ykt_settle_trans.fault_amount
          FROM dual;

        INSERT INTO tbl_batch_YKT_settle_trans VALUES rec_YKT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_QR_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：二维码票卡汇总
  --输入：batch_date  运营日，tbl_tr_QR_temp为数据源
  --输出：tbl_batch_QR_settle_trans ,(tbl_batch_QR_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR QR_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end  
        FROM tbl_batch_QR_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_QR_settle_trans tbl_batch_QR_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_QR_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_QR_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(QR.device_nid,3,2)),QR.settle_date, trans_date, station_nid, QR.device_nid, ticket_type,trans_type, 
             payment_method, QR.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_QR_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) QR       			   
        			  ON  QR.operator_id    =	shift.operator_id
        			  AND QR.device_nid		 =	shift.device_nid
              	AND QR.trans_time		 >= shift.trans_start
              	AND QR.trans_time		 <= shift.trans_end
              	AND QR.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND QR.shift_info 		 =  shift.shift_info
            GROUP BY QR.settle_date, QR.trans_date, QR.station_nid, QR.device_nid, ticket_type,trans_type,payment_method, 
                     QR.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,update_type  ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_QR_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_QR_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_QR_settle_head IN QR_settle_cur
      LOOP
        rec_QR_settle_trans.line_nid        := rec_QR_settle_head.line_nid;
        rec_QR_settle_trans.settle_date     := rec_QR_settle_head.settle_date;
        rec_QR_settle_trans.trans_date      := rec_QR_settle_head.trans_date;
        rec_QR_settle_trans.operator_id     := rec_QR_settle_head.operator_id;
        rec_QR_settle_trans.shift_info      := rec_QR_settle_head.shift_info;
        rec_QR_settle_trans.trans_start     := rec_QR_settle_head.trans_start;
        rec_QR_settle_trans.trans_end       := rec_QR_settle_head.trans_end;
        rec_QR_settle_trans.station_nid     := rec_QR_settle_head.station_nid;
        rec_QR_settle_trans.device_nid      := rec_QR_settle_head.device_nid;
        rec_QR_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_QR_settle_head.device_nid,1, 2));
        rec_QR_settle_trans.ticket_type     := rec_QR_settle_head.ticket_type;
        rec_QR_settle_trans.payment_method  := rec_QR_settle_head.payment_method;
        rec_QR_settle_trans.ticket_category := CCDB_STD.C_TC_QR;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.sale_count, rec_QR_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_QR_settle_trans.in_count
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.out_count, rec_QR_settle_trans.out_amount
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 	  IN (CCDB_STD.C_TRT_QR_OUT,CCDB_STD.C_TRT_QR_OUT1,CCDB_STD.C_TRT_QR_OUT2,CCDB_STD.C_TRT_QR_OUT3,CCDB_STD.C_TRT_QR_OUT4,CCDB_STD.C_TRT_QR_OUT5);

        --充值
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.load_count, rec_QR_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.UPDATE_COUNT, rec_QR_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid			= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_QR_UPDATE,CCDB_STD.C_TRT_QR_UPDATE1,CCDB_STD.C_TRT_QR_UPDATE2);

 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OUT_COUNT, rec_qr_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_IN_COUNT, rec_qr_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_TIME_COUNT, rec_qr_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_RUN_COUNT, rec_qr_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_qr_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.refund_count, rec_QR_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.REFUND_DELAY_COUNT, rec_QR_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_QR_settle_trans.deposit_COUNT,rec_QR_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_QR_settle_trans.trans_fee_COUNT,rec_QR_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND device_nid		  = rec_QR_settle_trans.device_nid
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_qr_settle_trans.fault_count,rec_qr_settle_trans.fault_amount
          FROM dual;
 
        INSERT INTO tbl_batch_QR_settle_trans VALUES rec_QR_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_PBOC_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：银行卡汇总
  --输入：batch_date  运营日，tbl_tr_PBOC_temp为数据源
  --输出：tbl_batch_PBOC_settle_trans ,(tbl_batch_PBOC_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR PBOC_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_PBOC_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_PBOC_settle_trans tbl_batch_PBOC_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_PBOC_settle_data WHERE settle_date = batch_date;
       
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_PBOC_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(PBOC.device_nid,3,2)),PBOC.settle_date, trans_date, station_nid, PBOC.device_nid, ticket_type,trans_type, 
             payment_method, PBOC.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_PBOC_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) PBOC       			   
        			  ON  PBOC.operator_id    =	shift.operator_id
        			  AND PBOC.device_nid		 =	shift.device_nid
              	AND PBOC.trans_time		 >= shift.trans_start
              	AND PBOC.trans_time		 <= shift.trans_end
              	AND PBOC.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND PBOC.shift_info 		 =  shift.shift_info
            GROUP BY PBOC.settle_date, PBOC.trans_date, PBOC.station_nid, PBOC.device_nid, ticket_type,trans_type,payment_method, 
                     PBOC.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_PBOC_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_PBOC_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_PBOC_settle_head IN PBOC_settle_cur
      LOOP
        rec_PBOC_settle_trans.line_nid        := rec_PBOC_settle_head.line_nid;
        rec_PBOC_settle_trans.settle_date     := rec_PBOC_settle_head.settle_date;
        rec_PBOC_settle_trans.trans_date      := rec_PBOC_settle_head.trans_date;
        rec_PBOC_settle_trans.operator_id     := rec_PBOC_settle_head.operator_id;
        rec_PBOC_settle_trans.shift_info      := rec_PBOC_settle_head.shift_info;
        rec_PBOC_settle_trans.trans_start     := rec_PBOC_settle_head.trans_start;
        rec_PBOC_settle_trans.trans_end       := rec_PBOC_settle_head.trans_end;
        rec_PBOC_settle_trans.station_nid     := rec_PBOC_settle_head.station_nid;
        rec_PBOC_settle_trans.device_nid      := rec_PBOC_settle_head.device_nid;
        rec_PBOC_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_PBOC_settle_head.device_nid,1, 2));
        rec_PBOC_settle_trans.ticket_type     := rec_PBOC_settle_head.ticket_type;
        rec_PBOC_settle_trans.payment_method  := rec_PBOC_settle_head.payment_method;
        rec_PBOC_settle_trans.ticket_category := CCDB_STD.C_TC_PBOC;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.sale_count, rec_PBOC_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_PBOC_settle_trans.in_count
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.out_count, rec_PBOC_settle_trans.out_amount
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_OUT;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.load_count, rec_PBOC_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.UPDATE_COUNT, rec_PBOC_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid			= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE;

 
 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OUT_COUNT, rec_pboc_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_IN_COUNT, rec_pboc_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_TIME_COUNT, rec_pboc_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_RUN_COUNT, rec_pboc_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_pboc_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.refund_count, rec_PBOC_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.REFUND_DELAY_COUNT, rec_PBOC_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_PBOC_settle_trans.deposit_COUNT,rec_PBOC_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_PBOC_settle_trans.trans_fee_COUNT,rec_PBOC_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND device_nid		  = rec_PBOC_settle_trans.device_nid
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_pboc_settle_trans.fault_count,rec_pboc_settle_trans.fault_amount
          FROM DUAL;

        INSERT INTO tbl_batch_PBOC_settle_trans VALUES rec_PBOC_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，T_7004_TVM ,T_7005_BOM 为数据源
  --输出：tbl_batch_FAULT_settle_trans ,(tbl_batch_FAULT_settle_data为中间表)
  --备注：HHJT_CJP 20191002
  --=============================================================================
   
    CURSOR FAULT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_FAULT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_FAULT_settle_trans tbl_batch_FAULT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_FAULT_settle_data WHERE settle_date = batch_date;
 
    --初始化统计-放入汇总表
    --TVM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FALUT_TVM ticket_type, CCDB_STD.C_FALUT_TVM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, 0 operator_id,0 SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7004_TVM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
                     
                     
    --BOM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FAULT_BOM ticket_type, CCDB_STD.C_FAULT_BOM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, OPERATOR_NBR operator_id,SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7005_BOM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
        			 
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_FAULT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_FAULT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_FAULT_settle_head IN FAULT_settle_cur
      LOOP
        rec_FAULT_settle_trans.line_nid        := rec_FAULT_settle_head.line_nid;
        rec_FAULT_settle_trans.settle_date     := rec_FAULT_settle_head.settle_date;
        rec_FAULT_settle_trans.trans_date      := rec_FAULT_settle_head.trans_date;
        rec_FAULT_settle_trans.operator_id     := rec_FAULT_settle_head.operator_id;
        rec_FAULT_settle_trans.shift_info      := rec_FAULT_settle_head.shift_info;
        rec_FAULT_settle_trans.trans_start     := rec_FAULT_settle_head.trans_start;
        rec_FAULT_settle_trans.trans_end       := rec_FAULT_settle_head.trans_end;
        rec_FAULT_settle_trans.station_nid     := rec_FAULT_settle_head.station_nid;
        rec_FAULT_settle_trans.device_nid      := rec_FAULT_settle_head.device_nid;
        rec_FAULT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_FAULT_settle_head.device_nid,1, 2));
        rec_FAULT_settle_trans.ticket_type     := rec_FAULT_settle_head.ticket_type;
        rec_FAULT_settle_trans.payment_method  := rec_FAULT_settle_head.payment_method;
        rec_FAULT_settle_trans.ticket_category := CCDB_STD.C_TC_FAULT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.sale_count, rec_FAULT_settle_trans.sale_amount
          FROM DUAL  ;
      
        --进站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.in_count
          FROM DUAL;
           
        --出站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.out_count, rec_FAULT_settle_trans.out_amount
          FROM DUAL;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.load_count, rec_FAULT_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.UPDATE_COUNT, rec_FAULT_settle_trans.UPDATE_AMOUNT
          FROM DUAL;



				--出站更新			 
          rec_FAULT_settle_trans.UPDATE_OUT_COUNT 	 := 0;
          rec_FAULT_settle_trans.UPDATE_OUT_AMOUNT   := 0;
 	
				--进站更新
				 rec_FAULT_settle_trans.UPDATE_IN_COUNT 	  := 0;
         rec_FAULT_settle_trans.UPDATE_IN_AMOUNT    := 0;
							
				--超时更新
				 rec_FAULT_settle_trans.UPDATE_OVER_TIME_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_TIME_AMOUNT    := 0;


				--超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_RUN_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_RUN_AMOUNT     := 0;

			--超时且超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_BOTH_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_BOTH_AMOUNT    := 0;
  
        --退票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.refund_count, rec_FAULT_settle_trans.refund_amount
          FROM DUAL;          
           
        --延时退卡
        SELECT sum(0), sum(0)
        	INTO  rec_FAULT_settle_trans.refund_delay_count, rec_FAULT_settle_trans.refund_delay_amount
          FROM DUAL;
 
     		--押金  
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.deposit_COUNT,rec_FAULT_settle_trans.DEPOSIT_AMOUNT
          FROM DUAL;
          
        --手续费
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.trans_fee_COUNT,rec_FAULT_settle_trans.trans_fee_AMOUNT
          FROM DUAL;
           
        --故障退款
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_FAULT_settle_trans.fault_count,rec_FAULT_settle_trans.fault_amount
          FROM tbl_batch_FAULT_settle_data
         WHERE trans_date 		= rec_FAULT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_FAULT_settle_trans.operator_id
           AND ticket_type		= rec_FAULT_settle_trans.ticket_type
           AND device_nid 		= rec_FAULT_settle_trans.device_nid
           AND payment_method = rec_FAULT_settle_head.payment_method
           AND shift_info			= rec_FAULT_settle_trans.shift_info
           AND trans_type 		IN(254,255);  	
           
           
           

        INSERT INTO tbl_batch_FAULT_settle_trans VALUES rec_FAULT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_OPERATOR_SHIFT" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_PBOC_SETTLE_DATA definition

CREATE TABLE "SCDB    "."TBL_BATCH_PBOC_SETTLE_DATA"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "VALUE_TRANS" DECIMAL(10,0) , 
		  "SETTLE_COUNT" DECIMAL(10,0) , 
		  "SETTLE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_PBOC_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：银行卡汇总
  --输入：batch_date  运营日，tbl_tr_PBOC_temp为数据源
  --输出：tbl_batch_PBOC_settle_trans ,(tbl_batch_PBOC_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR PBOC_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_PBOC_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_PBOC_settle_trans tbl_batch_PBOC_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_PBOC_settle_data WHERE settle_date = batch_date;
       
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_PBOC_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(PBOC.device_nid,3,2)),PBOC.settle_date, trans_date, station_nid, PBOC.device_nid, ticket_type,trans_type, 
             payment_method, PBOC.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_PBOC_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) PBOC       			   
        			  ON  PBOC.operator_id    =	shift.operator_id
        			  AND PBOC.device_nid		 =	shift.device_nid
              	AND PBOC.trans_time		 >= shift.trans_start
              	AND PBOC.trans_time		 <= shift.trans_end
              	AND PBOC.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND PBOC.shift_info 		 =  shift.shift_info
            GROUP BY PBOC.settle_date, PBOC.trans_date, PBOC.station_nid, PBOC.device_nid, ticket_type,trans_type,payment_method, 
                     PBOC.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_PBOC_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_PBOC_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_PBOC_settle_head IN PBOC_settle_cur
      LOOP
        rec_PBOC_settle_trans.line_nid        := rec_PBOC_settle_head.line_nid;
        rec_PBOC_settle_trans.settle_date     := rec_PBOC_settle_head.settle_date;
        rec_PBOC_settle_trans.trans_date      := rec_PBOC_settle_head.trans_date;
        rec_PBOC_settle_trans.operator_id     := rec_PBOC_settle_head.operator_id;
        rec_PBOC_settle_trans.shift_info      := rec_PBOC_settle_head.shift_info;
        rec_PBOC_settle_trans.trans_start     := rec_PBOC_settle_head.trans_start;
        rec_PBOC_settle_trans.trans_end       := rec_PBOC_settle_head.trans_end;
        rec_PBOC_settle_trans.station_nid     := rec_PBOC_settle_head.station_nid;
        rec_PBOC_settle_trans.device_nid      := rec_PBOC_settle_head.device_nid;
        rec_PBOC_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_PBOC_settle_head.device_nid,1, 2));
        rec_PBOC_settle_trans.ticket_type     := rec_PBOC_settle_head.ticket_type;
        rec_PBOC_settle_trans.payment_method  := rec_PBOC_settle_head.payment_method;
        rec_PBOC_settle_trans.ticket_category := CCDB_STD.C_TC_PBOC;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.sale_count, rec_PBOC_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_PBOC_settle_trans.in_count
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.out_count, rec_PBOC_settle_trans.out_amount
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_OUT;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.load_count, rec_PBOC_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.UPDATE_COUNT, rec_PBOC_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid			= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE;

 
 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OUT_COUNT, rec_pboc_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_IN_COUNT, rec_pboc_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_TIME_COUNT, rec_pboc_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_RUN_COUNT, rec_pboc_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_pboc_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.refund_count, rec_PBOC_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.REFUND_DELAY_COUNT, rec_PBOC_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_PBOC_settle_trans.deposit_COUNT,rec_PBOC_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_PBOC_settle_trans.trans_fee_COUNT,rec_PBOC_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND device_nid		  = rec_PBOC_settle_trans.device_nid
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_pboc_settle_trans.fault_count,rec_pboc_settle_trans.fault_amount
          FROM DUAL;

        INSERT INTO tbl_batch_PBOC_settle_trans VALUES rec_PBOC_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_PBOC_SETTLE_DATA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_PBOC_SETTLE_TRANS definition

CREATE TABLE "SCDB    "."TBL_BATCH_PBOC_SETTLE_TRANS"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_PBOC_SETTLE_TRANS" 
	ADD CONSTRAINT "PK_BAT_PBOC_SET_TRA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO");

CREATE PROCEDURE P_BATCH_PBOC_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：银行卡汇总
  --输入：batch_date  运营日，tbl_tr_PBOC_temp为数据源
  --输出：tbl_batch_PBOC_settle_trans ,(tbl_batch_PBOC_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR PBOC_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_PBOC_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_PBOC_settle_trans tbl_batch_PBOC_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_PBOC_settle_data WHERE settle_date = batch_date;
       
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_PBOC_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(PBOC.device_nid,3,2)),PBOC.settle_date, trans_date, station_nid, PBOC.device_nid, ticket_type,trans_type, 
             payment_method, PBOC.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_PBOC_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) PBOC       			   
        			  ON  PBOC.operator_id    =	shift.operator_id
        			  AND PBOC.device_nid		 =	shift.device_nid
              	AND PBOC.trans_time		 >= shift.trans_start
              	AND PBOC.trans_time		 <= shift.trans_end
              	AND PBOC.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND PBOC.shift_info 		 =  shift.shift_info
            GROUP BY PBOC.settle_date, PBOC.trans_date, PBOC.station_nid, PBOC.device_nid, ticket_type,trans_type,payment_method, 
                     PBOC.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_PBOC_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_PBOC_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_PBOC_settle_head IN PBOC_settle_cur
      LOOP
        rec_PBOC_settle_trans.line_nid        := rec_PBOC_settle_head.line_nid;
        rec_PBOC_settle_trans.settle_date     := rec_PBOC_settle_head.settle_date;
        rec_PBOC_settle_trans.trans_date      := rec_PBOC_settle_head.trans_date;
        rec_PBOC_settle_trans.operator_id     := rec_PBOC_settle_head.operator_id;
        rec_PBOC_settle_trans.shift_info      := rec_PBOC_settle_head.shift_info;
        rec_PBOC_settle_trans.trans_start     := rec_PBOC_settle_head.trans_start;
        rec_PBOC_settle_trans.trans_end       := rec_PBOC_settle_head.trans_end;
        rec_PBOC_settle_trans.station_nid     := rec_PBOC_settle_head.station_nid;
        rec_PBOC_settle_trans.device_nid      := rec_PBOC_settle_head.device_nid;
        rec_PBOC_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_PBOC_settle_head.device_nid,1, 2));
        rec_PBOC_settle_trans.ticket_type     := rec_PBOC_settle_head.ticket_type;
        rec_PBOC_settle_trans.payment_method  := rec_PBOC_settle_head.payment_method;
        rec_PBOC_settle_trans.ticket_category := CCDB_STD.C_TC_PBOC;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.sale_count, rec_PBOC_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_PBOC_settle_trans.in_count
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.out_count, rec_PBOC_settle_trans.out_amount
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_OUT;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.load_count, rec_PBOC_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.UPDATE_COUNT, rec_PBOC_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid			= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE;

 
 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OUT_COUNT, rec_pboc_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_IN_COUNT, rec_pboc_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_TIME_COUNT, rec_pboc_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_RUN_COUNT, rec_pboc_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_pboc_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.refund_count, rec_PBOC_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.REFUND_DELAY_COUNT, rec_PBOC_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_PBOC_settle_trans.deposit_COUNT,rec_PBOC_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_PBOC_settle_trans.trans_fee_COUNT,rec_PBOC_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND device_nid		  = rec_PBOC_settle_trans.device_nid
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_pboc_settle_trans.fault_count,rec_pboc_settle_trans.fault_amount
          FROM DUAL;

        INSERT INTO tbl_batch_PBOC_settle_trans VALUES rec_PBOC_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_PBOC_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：银行卡票卡统计
  --输入：batch_date  运营日，tbl_batch_PBOC_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_PBOC;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_PBOC_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_PBOC;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_PBOC_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_PBOC_SETTLE_TRANS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_PBOC_SET_TRA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_QR_SETTLE_DATA definition

CREATE TABLE "SCDB    "."TBL_BATCH_QR_SETTLE_DATA"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "VALUE_TRANS" DECIMAL(10,0) , 
		  "SETTLE_COUNT" DECIMAL(10,0) , 
		  "SETTLE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_QR_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：二维码票卡汇总
  --输入：batch_date  运营日，tbl_tr_QR_temp为数据源
  --输出：tbl_batch_QR_settle_trans ,(tbl_batch_QR_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR QR_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end  
        FROM tbl_batch_QR_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_QR_settle_trans tbl_batch_QR_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_QR_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_QR_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(QR.device_nid,3,2)),QR.settle_date, trans_date, station_nid, QR.device_nid, ticket_type,trans_type, 
             payment_method, QR.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_QR_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) QR       			   
        			  ON  QR.operator_id    =	shift.operator_id
        			  AND QR.device_nid		 =	shift.device_nid
              	AND QR.trans_time		 >= shift.trans_start
              	AND QR.trans_time		 <= shift.trans_end
              	AND QR.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND QR.shift_info 		 =  shift.shift_info
            GROUP BY QR.settle_date, QR.trans_date, QR.station_nid, QR.device_nid, ticket_type,trans_type,payment_method, 
                     QR.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,update_type  ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_QR_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_QR_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_QR_settle_head IN QR_settle_cur
      LOOP
        rec_QR_settle_trans.line_nid        := rec_QR_settle_head.line_nid;
        rec_QR_settle_trans.settle_date     := rec_QR_settle_head.settle_date;
        rec_QR_settle_trans.trans_date      := rec_QR_settle_head.trans_date;
        rec_QR_settle_trans.operator_id     := rec_QR_settle_head.operator_id;
        rec_QR_settle_trans.shift_info      := rec_QR_settle_head.shift_info;
        rec_QR_settle_trans.trans_start     := rec_QR_settle_head.trans_start;
        rec_QR_settle_trans.trans_end       := rec_QR_settle_head.trans_end;
        rec_QR_settle_trans.station_nid     := rec_QR_settle_head.station_nid;
        rec_QR_settle_trans.device_nid      := rec_QR_settle_head.device_nid;
        rec_QR_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_QR_settle_head.device_nid,1, 2));
        rec_QR_settle_trans.ticket_type     := rec_QR_settle_head.ticket_type;
        rec_QR_settle_trans.payment_method  := rec_QR_settle_head.payment_method;
        rec_QR_settle_trans.ticket_category := CCDB_STD.C_TC_QR;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.sale_count, rec_QR_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_QR_settle_trans.in_count
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.out_count, rec_QR_settle_trans.out_amount
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 	  IN (CCDB_STD.C_TRT_QR_OUT,CCDB_STD.C_TRT_QR_OUT1,CCDB_STD.C_TRT_QR_OUT2,CCDB_STD.C_TRT_QR_OUT3,CCDB_STD.C_TRT_QR_OUT4,CCDB_STD.C_TRT_QR_OUT5);

        --充值
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.load_count, rec_QR_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.UPDATE_COUNT, rec_QR_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid			= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_QR_UPDATE,CCDB_STD.C_TRT_QR_UPDATE1,CCDB_STD.C_TRT_QR_UPDATE2);

 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OUT_COUNT, rec_qr_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_IN_COUNT, rec_qr_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_TIME_COUNT, rec_qr_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_RUN_COUNT, rec_qr_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_qr_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.refund_count, rec_QR_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.REFUND_DELAY_COUNT, rec_QR_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_QR_settle_trans.deposit_COUNT,rec_QR_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_QR_settle_trans.trans_fee_COUNT,rec_QR_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND device_nid		  = rec_QR_settle_trans.device_nid
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_qr_settle_trans.fault_count,rec_qr_settle_trans.fault_amount
          FROM dual;
 
        INSERT INTO tbl_batch_QR_settle_trans VALUES rec_QR_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_QR_SETTLE_DATA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_QR_SETTLE_TRANS definition

CREATE TABLE "SCDB    "."TBL_BATCH_QR_SETTLE_TRANS"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_QR_SETTLE_TRANS" 
	ADD CONSTRAINT "PK_BAT_QR_SET_TRA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO");

CREATE PROCEDURE P_BATCH_QR_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：二维码票卡汇总
  --输入：batch_date  运营日，tbl_tr_QR_temp为数据源
  --输出：tbl_batch_QR_settle_trans ,(tbl_batch_QR_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR QR_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end  
        FROM tbl_batch_QR_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_QR_settle_trans tbl_batch_QR_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_QR_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_QR_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(QR.device_nid,3,2)),QR.settle_date, trans_date, station_nid, QR.device_nid, ticket_type,trans_type, 
             payment_method, QR.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_QR_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) QR       			   
        			  ON  QR.operator_id    =	shift.operator_id
        			  AND QR.device_nid		 =	shift.device_nid
              	AND QR.trans_time		 >= shift.trans_start
              	AND QR.trans_time		 <= shift.trans_end
              	AND QR.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND QR.shift_info 		 =  shift.shift_info
            GROUP BY QR.settle_date, QR.trans_date, QR.station_nid, QR.device_nid, ticket_type,trans_type,payment_method, 
                     QR.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,update_type  ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_QR_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_QR_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_QR_settle_head IN QR_settle_cur
      LOOP
        rec_QR_settle_trans.line_nid        := rec_QR_settle_head.line_nid;
        rec_QR_settle_trans.settle_date     := rec_QR_settle_head.settle_date;
        rec_QR_settle_trans.trans_date      := rec_QR_settle_head.trans_date;
        rec_QR_settle_trans.operator_id     := rec_QR_settle_head.operator_id;
        rec_QR_settle_trans.shift_info      := rec_QR_settle_head.shift_info;
        rec_QR_settle_trans.trans_start     := rec_QR_settle_head.trans_start;
        rec_QR_settle_trans.trans_end       := rec_QR_settle_head.trans_end;
        rec_QR_settle_trans.station_nid     := rec_QR_settle_head.station_nid;
        rec_QR_settle_trans.device_nid      := rec_QR_settle_head.device_nid;
        rec_QR_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_QR_settle_head.device_nid,1, 2));
        rec_QR_settle_trans.ticket_type     := rec_QR_settle_head.ticket_type;
        rec_QR_settle_trans.payment_method  := rec_QR_settle_head.payment_method;
        rec_QR_settle_trans.ticket_category := CCDB_STD.C_TC_QR;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.sale_count, rec_QR_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_QR_settle_trans.in_count
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.out_count, rec_QR_settle_trans.out_amount
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 	  IN (CCDB_STD.C_TRT_QR_OUT,CCDB_STD.C_TRT_QR_OUT1,CCDB_STD.C_TRT_QR_OUT2,CCDB_STD.C_TRT_QR_OUT3,CCDB_STD.C_TRT_QR_OUT4,CCDB_STD.C_TRT_QR_OUT5);

        --充值
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.load_count, rec_QR_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.UPDATE_COUNT, rec_QR_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid			= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_QR_UPDATE,CCDB_STD.C_TRT_QR_UPDATE1,CCDB_STD.C_TRT_QR_UPDATE2);

 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OUT_COUNT, rec_qr_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_IN_COUNT, rec_qr_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_TIME_COUNT, rec_qr_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_RUN_COUNT, rec_qr_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_qr_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.refund_count, rec_QR_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.REFUND_DELAY_COUNT, rec_QR_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_QR_settle_trans.deposit_COUNT,rec_QR_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_QR_settle_trans.trans_fee_COUNT,rec_QR_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND device_nid		  = rec_QR_settle_trans.device_nid
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_qr_settle_trans.fault_count,rec_qr_settle_trans.fault_amount
          FROM dual;
 
        INSERT INTO tbl_batch_QR_settle_trans VALUES rec_QR_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_QR_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：二维码票卡统计
  --输入：batch_date  运营日，tbl_batch_QR_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_QR;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
          UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_QR_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_QR;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_QR_settle_trans
         WHERE settle_date = batch_date
         
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_QR_SETTLE_TRANS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_QR_SET_TRA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_RG_AGM_MAX definition

CREATE TABLE "SCDB    "."TBL_BATCH_RG_AGM_MAX"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "REG_TIME" TIMESTAMP NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "TOTAL_ENTRY" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_EXIT" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_RECYCLE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_LOCK" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_RG_AGM_MAX" 
	ADD CONSTRAINT "P_PK_RG_AGM_MAX" PRIMARY KEY
		("PACKET_SEQ",
		 "REG_TIME",
		 "DEVICE_NID",
		 "TICKET_TYPE",
		 "SETTLE_DATE");

CREATE PROCEDURE P_BATCH_CLEAR_DATA(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：清理数据
  --输入：batch_date  运营日
  --输出：过期数据清理
  --备注：HHJT_CJP 20190809
  --         必须在每天日结程序开始前，清理数据
  --======================================================================

    --local variable
    reserve_day   NUMBER(3);
    del_partition NUMBER(3);
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_CLEAR_DATA';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  --====清理非临时性数据============（根据运营需求确认）==========
--保存7天
  reserve_day :=7;

 DELETE FROM TBL_BATCH_RG_AGM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_BOM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_TVM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
  
   

 --====清理临时数据==============================
 
  --TRUNCATE TABLE tbl_batch_sjt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_sjt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_trans immediate;
 
  --===清理无效数据=========================================
 DELETE FROM tbl_batch_entry_exit_stat where entry_num+exit_num=0;



    end_time     := SYSDATE;
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_CLEAR_DATA',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_RG_AGM_MAX" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_AGM_MAX" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_RG_BOM_MAX definition

CREATE TABLE "SCDB    "."TBL_BATCH_RG_BOM_MAX"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "REG_TIME" TIMESTAMP NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "TOTAL_COUNT_SALE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_SALE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_COUNT_REFUND" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_REFUND" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_COUNT_UPDATE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_UPDATE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_COUNT_CHARGE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_CHARGE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_LOCK" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_RG_BOM_MAX" 
	ADD CONSTRAINT "P_PK_RG_BOM_MAX" PRIMARY KEY
		("PACKET_SEQ",
		 "REG_TIME",
		 "DEVICE_NID",
		 "TICKET_TYPE",
		 "SETTLE_DATE");

CREATE PROCEDURE P_BATCH_CLEAR_DATA(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：清理数据
  --输入：batch_date  运营日
  --输出：过期数据清理
  --备注：HHJT_CJP 20190809
  --         必须在每天日结程序开始前，清理数据
  --======================================================================

    --local variable
    reserve_day   NUMBER(3);
    del_partition NUMBER(3);
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_CLEAR_DATA';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  --====清理非临时性数据============（根据运营需求确认）==========
--保存7天
  reserve_day :=7;

 DELETE FROM TBL_BATCH_RG_AGM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_BOM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_TVM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
  
   

 --====清理临时数据==============================
 
  --TRUNCATE TABLE tbl_batch_sjt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_sjt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_trans immediate;
 
  --===清理无效数据=========================================
 DELETE FROM tbl_batch_entry_exit_stat where entry_num+exit_num=0;



    end_time     := SYSDATE;
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_CLEAR_DATA',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_RG_BOM_MAX" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_BOM_MAX" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_RG_TVM_MAX definition

CREATE TABLE "SCDB    "."TBL_BATCH_RG_TVM_MAX"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "REG_TIME" TIMESTAMP NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "TOTAL_COUNT_SALE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_SALE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_COUNT_COIN" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_COIN" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_COUNT_CASH" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_CASH" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_COUNT_CHARGE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "TOTAL_VALUE_CHARGE" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_RG_TVM_MAX" 
	ADD CONSTRAINT "P_PK_RG_TVM_MAX" PRIMARY KEY
		("PACKET_SEQ",
		 "DEVICE_NID",
		 "REG_TIME",
		 "SETTLE_DATE");

CREATE PROCEDURE P_BATCH_CLEAR_DATA(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：清理数据
  --输入：batch_date  运营日
  --输出：过期数据清理
  --备注：HHJT_CJP 20190809
  --         必须在每天日结程序开始前，清理数据
  --======================================================================

    --local variable
    reserve_day   NUMBER(3);
    del_partition NUMBER(3);
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_CLEAR_DATA';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  --====清理非临时性数据============（根据运营需求确认）==========
--保存7天
  reserve_day :=7;

 DELETE FROM TBL_BATCH_RG_AGM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_BOM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
 DELETE FROM TBL_BATCH_RG_TVM_MAX where settle_date<= to_char(to_date(batch_date,'yyyyMMdd')-reserve_day,'yyyyMMdd');
  
   

 --====清理临时数据==============================
 
  --TRUNCATE TABLE tbl_batch_sjt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_sjt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_svt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_ykt_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_qr_settle_trans immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_data immediate;
  --TRUNCATE TABLE tbl_batch_pboc_settle_trans immediate;
 
  --===清理无效数据=========================================
 DELETE FROM tbl_batch_entry_exit_stat where entry_num+exit_num=0;



    end_time     := SYSDATE;
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_CLEAR_DATA',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_RG_TVM_MAX" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_TVM_MAX" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_SJT_SETTLE_DATA definition

CREATE TABLE "SCDB    "."TBL_BATCH_SJT_SETTLE_DATA"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "VALUE_TRANS" DECIMAL(10,0) , 
		  "SETTLE_COUNT" DECIMAL(10,0) , 
		  "SETTLE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_SJT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_sjt_temp为数据源
  --输出：tbl_batch_sjt_settle_trans ,(tbl_batch_sjt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR sjt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_sjt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_sjt_settle_trans tbl_batch_sjt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  
    DELETE FROM tbl_batch_sjt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_SJT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,UPDATE_TYPE)
       SELECT to_number(substr(sjt.device_nid,3,2)),sjt.settle_date, trans_date, station_nid, sjt.device_nid, ticket_type,trans_type, 
             payment_method, sjt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit ,update_type
                 FROM tbl_tr_sjt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) sjt       			   
        			  ON  sjt.operator_id    =	shift.operator_id
        			  AND sjt.device_nid		 =	shift.device_nid
              	AND sjt.trans_time		 >= shift.trans_start
              	AND sjt.trans_time		 <= shift.trans_end
              	AND sjt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND sjt.shift_info 		 =  shift.shift_info
            GROUP BY sjt.settle_date, sjt.trans_date, sjt.station_nid, sjt.device_nid, ticket_type,trans_type,payment_method, 
                     sjt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type ;
       
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_sjt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
      
      
    ---HHJT_CJP 20190815 互联网单程票退票 支付方式更改为 C_PM_QR(6) 互联网单程票(TICKET_TYPE 9)
    UPDATE tbl_batch_sjt_settle_data
    	 SET PAYMENT_METHOD =  CCDB_STD.C_PM_QR
     WHERE TICKET_TYPE = 9
     	 AND TRANS_TYPE  = CCDB_STD.C_TRT_SJT_REFUND
     	 AND SETTLE_DATE = BATCH_DATE ;
  		
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_sjt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_sjt_settle_head IN sjt_settle_cur
      LOOP
        rec_sjt_settle_trans.line_nid        := rec_sjt_settle_head.line_nid;
        rec_sjt_settle_trans.settle_date     := rec_sjt_settle_head.settle_date;
        rec_sjt_settle_trans.trans_date      := rec_sjt_settle_head.trans_date;
        rec_sjt_settle_trans.operator_id     := rec_sjt_settle_head.operator_id;
        rec_sjt_settle_trans.shift_info      := rec_sjt_settle_head.shift_info;
        rec_sjt_settle_trans.trans_start     := rec_sjt_settle_head.trans_start;
        rec_sjt_settle_trans.trans_end       := rec_sjt_settle_head.trans_end;
        rec_sjt_settle_trans.station_nid     := rec_sjt_settle_head.station_nid;
        rec_sjt_settle_trans.device_nid      := rec_sjt_settle_head.device_nid;
        rec_sjt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_sjt_settle_head.device_nid,1, 2));
        rec_sjt_settle_trans.ticket_type     := rec_sjt_settle_head.ticket_type;
        rec_sjt_settle_trans.payment_method  := rec_sjt_settle_head.payment_method;
        rec_sjt_settle_trans.ticket_category := CCDB_STD.C_TC_SJT;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.sale_count, rec_sjt_settle_trans.sale_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_SJT_SALE,CCDB_STD.C_TRT_SJT_SALE1,CCDB_STD.C_TRT_SJT_SALE2);
           --AND trans_type  		= CCDB_STD.C_TRT_SJT_SALE;
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_sjt_settle_trans.in_count
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_IN,CCDB_STD.C_TRT_SJT_IN1);
           --AND trans_type 		= CCDB_STD.C_TRT_SJT_IN
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.out_count, rec_sjt_settle_trans.out_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_OUT,CCDB_STD.C_TRT_SJT_OUT1,CCDB_STD.C_TRT_SJT_OUT2,CCDB_STD.C_TRT_SJT_OUT3,CCDB_STD.C_TRT_SJT_OUT4,CCDB_STD.C_TRT_SJT_OUT5
           											 ,CCDB_STD.C_TRT_SJT_OUT6,CCDB_STD.C_TRT_SJT_OUT7,CCDB_STD.C_TRT_SJT_OUT8,CCDB_STD.C_TRT_SJT_OUT9,CCDB_STD.C_TRT_SJT_OUT10,CCDB_STD.C_TRT_SJT_OUT11);
					 --AND trans_type 		= CCDB_STD.C_TRT_SJT_OUT
        --充值
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.load_count, rec_sjt_settle_trans.load_amount
          FROM tbl_batch_sjt_settle_data;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_COUNT, rec_sjt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_UPDATE,CCDB_STD.C_TRT_SJT_UPDATE1,CCDB_STD.C_TRT_SJT_UPDATE2,CCDB_STD.C_TRT_SJT_UPDATE3,CCDB_STD.C_TRT_SJT_UPDATE4,CCDB_STD.C_TRT_SJT_UPDATE5,CCDB_STD.C_TRT_SJT_UPDATE6);


				--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OUT_COUNT, rec_sjt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_IN_COUNT, rec_sjt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_sjt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_sjt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_sjt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.refund_count, rec_sjt_settle_trans.refund_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_REFUND;          
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.REFUND_DELAY_COUNT, rec_sjt_settle_trans.REFUND_DELAY_AMOUNT
          FROM tbl_batch_sjt_settle_data;
 
    	--押金 发售（0X01）收押金 退卡（0x06）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 1, 1,6,-1, 0)), 0)
          INTO rec_sjt_settle_trans.deposit_COUNT,rec_sjt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_sjt_settle_trans.trans_fee_COUNT,rec_sjt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid		  = rec_sjt_settle_trans.device_nid
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.fault_count,rec_sjt_settle_trans.fault_amount
          FROM dual;
          
           

        INSERT INTO tbl_batch_sjt_settle_trans VALUES rec_sjt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_YKT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_YKT_temp为数据源
  --输出：tbl_batch_YKT_settle_trans ,(tbl_batch_YKT_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR YKT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_YKT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_YKT_settle_trans tbl_batch_YKT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_YKT_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_YKT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(YKT.device_nid,3,2)),YKT.settle_date, trans_date, station_nid, YKT.device_nid, ticket_type,trans_type, 
             payment_method, YKT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_YKT_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) YKT       			   
        			  ON  YKT.operator_id    =	shift.operator_id
        			  AND YKT.device_nid		 =	shift.device_nid
              	AND YKT.trans_time		 >= shift.trans_start
              	AND YKT.trans_time		 <= shift.trans_end
              	AND YKT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND YKT.shift_info 		 =  shift.shift_info
            GROUP BY YKT.settle_date, YKT.trans_date, YKT.station_nid, YKT.device_nid, ticket_type,trans_type,payment_method, 
                     YKT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_YKT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_YKT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_YKT_settle_head IN YKT_settle_cur
      LOOP
        rec_YKT_settle_trans.line_nid        := rec_YKT_settle_head.line_nid;
        rec_YKT_settle_trans.settle_date     := rec_YKT_settle_head.settle_date;
        rec_YKT_settle_trans.trans_date      := rec_YKT_settle_head.trans_date;
        rec_YKT_settle_trans.operator_id     := rec_YKT_settle_head.operator_id;
        rec_YKT_settle_trans.shift_info      := rec_YKT_settle_head.shift_info;
        rec_YKT_settle_trans.trans_start     := rec_YKT_settle_head.trans_start;
        rec_YKT_settle_trans.trans_end       := rec_YKT_settle_head.trans_end;
        rec_YKT_settle_trans.station_nid     := rec_YKT_settle_head.station_nid;
        rec_YKT_settle_trans.device_nid      := rec_YKT_settle_head.device_nid;
        rec_YKT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_YKT_settle_head.device_nid,1, 2));
        rec_YKT_settle_trans.ticket_type     := rec_YKT_settle_head.ticket_type;
        rec_YKT_settle_trans.payment_method  := rec_YKT_settle_head.payment_method;
        rec_YKT_settle_trans.ticket_category := CCDB_STD.C_TC_YKT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.sale_count, rec_YKT_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站 ---0x83 一卡通进站  ---0x93 交通部CPU卡进站 
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_YKT_settle_trans.in_count
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5001,5901);
           
        --出站 ---0x84 一卡通出站    ---0x94 交通部CPU卡出站  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.out_count, rec_YKT_settle_trans.out_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5002,5003,5004,5007,5008,5009,5902,5903,5904,5907,5908,5909);  

     
        --充值 ---0x96 交通部CPU卡充值  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.load_count, rec_YKT_settle_trans.load_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5301,5302) ;

      
     		--更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.UPDATE_COUNT, rec_YKT_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid			= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5200,5201,5202,5203,5204,5205,5206,5701,5702,5703,5704,5705,5706);

 				--出站更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OUT_COUNT, rec_ykt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_IN_COUNT, rec_ykt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_ykt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_ykt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_ykt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
        --退票
         SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_count, rec_YKT_settle_trans.refund_amount
          FROM DUAL;
 
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_delay_count, rec_YKT_settle_trans.refund_delay_amount
          FROM DUAL;
 
    	--押金   
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_YKT_settle_trans.deposit_COUNT,rec_YKT_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_YKT_settle_trans.trans_fee_COUNT,rec_YKT_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid		  = rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
       --故障退款
        SELECT sum(0), sum(0)
          INTO rec_ykt_settle_trans.fault_count,rec_ykt_settle_trans.fault_amount
          FROM dual;

        INSERT INTO tbl_batch_YKT_settle_trans VALUES rec_YKT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_SJT_SETTLE_DATA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_SJT_SETTLE_TRANS definition

CREATE TABLE "SCDB    "."TBL_BATCH_SJT_SETTLE_TRANS"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_SJT_SETTLE_TRANS" 
	ADD CONSTRAINT "PK_BAT_SJT_SET_TRA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO");

CREATE PROCEDURE P_BATCH_SJT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_sjt_temp为数据源
  --输出：tbl_batch_sjt_settle_trans ,(tbl_batch_sjt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR sjt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_sjt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_sjt_settle_trans tbl_batch_sjt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  
    DELETE FROM tbl_batch_sjt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_SJT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,UPDATE_TYPE)
       SELECT to_number(substr(sjt.device_nid,3,2)),sjt.settle_date, trans_date, station_nid, sjt.device_nid, ticket_type,trans_type, 
             payment_method, sjt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit ,update_type
                 FROM tbl_tr_sjt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) sjt       			   
        			  ON  sjt.operator_id    =	shift.operator_id
        			  AND sjt.device_nid		 =	shift.device_nid
              	AND sjt.trans_time		 >= shift.trans_start
              	AND sjt.trans_time		 <= shift.trans_end
              	AND sjt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND sjt.shift_info 		 =  shift.shift_info
            GROUP BY sjt.settle_date, sjt.trans_date, sjt.station_nid, sjt.device_nid, ticket_type,trans_type,payment_method, 
                     sjt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type ;
       
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_sjt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
      
      
    ---HHJT_CJP 20190815 互联网单程票退票 支付方式更改为 C_PM_QR(6) 互联网单程票(TICKET_TYPE 9)
    UPDATE tbl_batch_sjt_settle_data
    	 SET PAYMENT_METHOD =  CCDB_STD.C_PM_QR
     WHERE TICKET_TYPE = 9
     	 AND TRANS_TYPE  = CCDB_STD.C_TRT_SJT_REFUND
     	 AND SETTLE_DATE = BATCH_DATE ;
  		
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_sjt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_sjt_settle_head IN sjt_settle_cur
      LOOP
        rec_sjt_settle_trans.line_nid        := rec_sjt_settle_head.line_nid;
        rec_sjt_settle_trans.settle_date     := rec_sjt_settle_head.settle_date;
        rec_sjt_settle_trans.trans_date      := rec_sjt_settle_head.trans_date;
        rec_sjt_settle_trans.operator_id     := rec_sjt_settle_head.operator_id;
        rec_sjt_settle_trans.shift_info      := rec_sjt_settle_head.shift_info;
        rec_sjt_settle_trans.trans_start     := rec_sjt_settle_head.trans_start;
        rec_sjt_settle_trans.trans_end       := rec_sjt_settle_head.trans_end;
        rec_sjt_settle_trans.station_nid     := rec_sjt_settle_head.station_nid;
        rec_sjt_settle_trans.device_nid      := rec_sjt_settle_head.device_nid;
        rec_sjt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_sjt_settle_head.device_nid,1, 2));
        rec_sjt_settle_trans.ticket_type     := rec_sjt_settle_head.ticket_type;
        rec_sjt_settle_trans.payment_method  := rec_sjt_settle_head.payment_method;
        rec_sjt_settle_trans.ticket_category := CCDB_STD.C_TC_SJT;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.sale_count, rec_sjt_settle_trans.sale_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_SJT_SALE,CCDB_STD.C_TRT_SJT_SALE1,CCDB_STD.C_TRT_SJT_SALE2);
           --AND trans_type  		= CCDB_STD.C_TRT_SJT_SALE;
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_sjt_settle_trans.in_count
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_IN,CCDB_STD.C_TRT_SJT_IN1);
           --AND trans_type 		= CCDB_STD.C_TRT_SJT_IN
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.out_count, rec_sjt_settle_trans.out_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_OUT,CCDB_STD.C_TRT_SJT_OUT1,CCDB_STD.C_TRT_SJT_OUT2,CCDB_STD.C_TRT_SJT_OUT3,CCDB_STD.C_TRT_SJT_OUT4,CCDB_STD.C_TRT_SJT_OUT5
           											 ,CCDB_STD.C_TRT_SJT_OUT6,CCDB_STD.C_TRT_SJT_OUT7,CCDB_STD.C_TRT_SJT_OUT8,CCDB_STD.C_TRT_SJT_OUT9,CCDB_STD.C_TRT_SJT_OUT10,CCDB_STD.C_TRT_SJT_OUT11);
					 --AND trans_type 		= CCDB_STD.C_TRT_SJT_OUT
        --充值
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.load_count, rec_sjt_settle_trans.load_amount
          FROM tbl_batch_sjt_settle_data;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_COUNT, rec_sjt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_UPDATE,CCDB_STD.C_TRT_SJT_UPDATE1,CCDB_STD.C_TRT_SJT_UPDATE2,CCDB_STD.C_TRT_SJT_UPDATE3,CCDB_STD.C_TRT_SJT_UPDATE4,CCDB_STD.C_TRT_SJT_UPDATE5,CCDB_STD.C_TRT_SJT_UPDATE6);


				--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OUT_COUNT, rec_sjt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_IN_COUNT, rec_sjt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_sjt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_sjt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_sjt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.refund_count, rec_sjt_settle_trans.refund_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_REFUND;          
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.REFUND_DELAY_COUNT, rec_sjt_settle_trans.REFUND_DELAY_AMOUNT
          FROM tbl_batch_sjt_settle_data;
 
    	--押金 发售（0X01）收押金 退卡（0x06）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 1, 1,6,-1, 0)), 0)
          INTO rec_sjt_settle_trans.deposit_COUNT,rec_sjt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_sjt_settle_trans.trans_fee_COUNT,rec_sjt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid		  = rec_sjt_settle_trans.device_nid
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.fault_count,rec_sjt_settle_trans.fault_amount
          FROM dual;
          
           

        INSERT INTO tbl_batch_sjt_settle_trans VALUES rec_sjt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SJT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_sjt_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SJT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SJT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_SJT_SETTLE_TRANS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_SJT_SET_TRA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_SVT_SETTLE_DATA definition

CREATE TABLE "SCDB    "."TBL_BATCH_SVT_SETTLE_DATA"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "VALUE_TRANS" DECIMAL(10,0) , 
		  "SETTLE_COUNT" DECIMAL(10,0) , 
		  "SETTLE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_SVT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_svt_temp为数据源
  --输出：tbl_batch_svt_settle_trans ,(tbl_batch_svt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR svt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_svt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_svt_settle_trans tbl_batch_svt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_svt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_svt_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(svt.device_nid,3,2)),svt.settle_date, trans_date, station_nid, svt.device_nid, ticket_type,trans_type, 
             payment_method, svt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_svt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) svt       			   
        			  ON  svt.operator_id    =	shift.operator_id
        			  AND svt.device_nid		 =	shift.device_nid
              	AND svt.trans_time		 >= shift.trans_start
              	AND svt.trans_time		 <= shift.trans_end
              	AND svt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND svt.shift_info 		 =  shift.shift_info
            GROUP BY svt.settle_date, svt.trans_date, svt.station_nid, svt.device_nid, ticket_type,trans_type,payment_method, 
                     svt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,svt.update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_svt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_svt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_svt_settle_head IN svt_settle_cur
      LOOP
        rec_svt_settle_trans.line_nid        := rec_svt_settle_head.line_nid;
        rec_svt_settle_trans.settle_date     := rec_svt_settle_head.settle_date;
        rec_svt_settle_trans.trans_date      := rec_svt_settle_head.trans_date;
        rec_svt_settle_trans.operator_id     := rec_svt_settle_head.operator_id;
        rec_svt_settle_trans.shift_info      := rec_svt_settle_head.shift_info;
        rec_svt_settle_trans.trans_start     := rec_svt_settle_head.trans_start;
        rec_svt_settle_trans.trans_end       := rec_svt_settle_head.trans_end;
        rec_svt_settle_trans.station_nid     := rec_svt_settle_head.station_nid;
        rec_svt_settle_trans.device_nid      := rec_svt_settle_head.device_nid;
        rec_svt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_svt_settle_head.device_nid,1, 2));
        rec_svt_settle_trans.ticket_type     := rec_svt_settle_head.ticket_type;
        rec_svt_settle_trans.payment_method  := rec_svt_settle_head.payment_method;
        rec_svt_settle_trans.ticket_category := CCDB_STD.C_TC_svt;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.sale_count, rec_svt_settle_trans.sale_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_svt_SALE,CCDB_STD.C_TRT_svt_SALE1);
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_svt_settle_trans.in_count
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_IN,CCDB_STD.C_TRT_svt_IN1);
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.out_count, rec_svt_settle_trans.out_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_OUT,CCDB_STD.C_TRT_svt_OUT1,CCDB_STD.C_TRT_svt_OUT2,CCDB_STD.C_TRT_svt_OUT3,CCDB_STD.C_TRT_svt_OUT4,CCDB_STD.C_TRT_svt_OUT5
           											 ,CCDB_STD.C_TRT_svt_OUT6,CCDB_STD.C_TRT_svt_OUT7,CCDB_STD.C_TRT_svt_OUT8,CCDB_STD.C_TRT_svt_OUT9,CCDB_STD.C_TRT_svt_OUT10,CCDB_STD.C_TRT_svt_OUT11);

        --充值
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.load_count, rec_svt_settle_trans.load_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_LOAD,CCDB_STD.C_TRT_svt_LOAD1);

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_COUNT, rec_svt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_UPDATE,CCDB_STD.C_TRT_svt_UPDATE1,CCDB_STD.C_TRT_svt_UPDATE2,CCDB_STD.C_TRT_svt_UPDATE3,CCDB_STD.C_TRT_svt_UPDATE4,CCDB_STD.C_TRT_svt_UPDATE5,CCDB_STD.C_TRT_svt_UPDATE6);

			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OUT_COUNT, rec_svt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_IN_COUNT, rec_svt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_svt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_svt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_svt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_count, rec_svt_settle_trans.refund_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND;          
           
        --延时退卡
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_delay_count, rec_svt_settle_trans.refund_delay_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND_DELAY; 
 
    	--押金 发售（0X0B）收押金 退卡（0x14,0X15）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 11, 1,20,-1,21,-1,0)), 0)
          INTO rec_svt_settle_trans.deposit_COUNT,rec_svt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_svt_settle_trans.trans_fee_COUNT,rec_svt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid		  = rec_svt_settle_trans.device_nid
           AND TRANS_FEE > 0;

 		--故障退款
        SELECT sum(0), sum(0)
          INTO rec_svt_settle_trans.fault_count,rec_svt_settle_trans.fault_amount
          FROM dual;


        INSERT INTO tbl_batch_svt_settle_trans VALUES rec_svt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_SVT_SETTLE_DATA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_SVT_SETTLE_TRANS definition

CREATE TABLE "SCDB    "."TBL_BATCH_SVT_SETTLE_TRANS"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_SVT_SETTLE_TRANS" 
	ADD CONSTRAINT "PK_BAT_SVT_SET_TRA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO");

CREATE PROCEDURE P_BATCH_SVT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_svt_temp为数据源
  --输出：tbl_batch_svt_settle_trans ,(tbl_batch_svt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR svt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_svt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_svt_settle_trans tbl_batch_svt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_svt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_svt_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(svt.device_nid,3,2)),svt.settle_date, trans_date, station_nid, svt.device_nid, ticket_type,trans_type, 
             payment_method, svt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_svt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) svt       			   
        			  ON  svt.operator_id    =	shift.operator_id
        			  AND svt.device_nid		 =	shift.device_nid
              	AND svt.trans_time		 >= shift.trans_start
              	AND svt.trans_time		 <= shift.trans_end
              	AND svt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND svt.shift_info 		 =  shift.shift_info
            GROUP BY svt.settle_date, svt.trans_date, svt.station_nid, svt.device_nid, ticket_type,trans_type,payment_method, 
                     svt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,svt.update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_svt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_svt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_svt_settle_head IN svt_settle_cur
      LOOP
        rec_svt_settle_trans.line_nid        := rec_svt_settle_head.line_nid;
        rec_svt_settle_trans.settle_date     := rec_svt_settle_head.settle_date;
        rec_svt_settle_trans.trans_date      := rec_svt_settle_head.trans_date;
        rec_svt_settle_trans.operator_id     := rec_svt_settle_head.operator_id;
        rec_svt_settle_trans.shift_info      := rec_svt_settle_head.shift_info;
        rec_svt_settle_trans.trans_start     := rec_svt_settle_head.trans_start;
        rec_svt_settle_trans.trans_end       := rec_svt_settle_head.trans_end;
        rec_svt_settle_trans.station_nid     := rec_svt_settle_head.station_nid;
        rec_svt_settle_trans.device_nid      := rec_svt_settle_head.device_nid;
        rec_svt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_svt_settle_head.device_nid,1, 2));
        rec_svt_settle_trans.ticket_type     := rec_svt_settle_head.ticket_type;
        rec_svt_settle_trans.payment_method  := rec_svt_settle_head.payment_method;
        rec_svt_settle_trans.ticket_category := CCDB_STD.C_TC_svt;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.sale_count, rec_svt_settle_trans.sale_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_svt_SALE,CCDB_STD.C_TRT_svt_SALE1);
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_svt_settle_trans.in_count
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_IN,CCDB_STD.C_TRT_svt_IN1);
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.out_count, rec_svt_settle_trans.out_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_OUT,CCDB_STD.C_TRT_svt_OUT1,CCDB_STD.C_TRT_svt_OUT2,CCDB_STD.C_TRT_svt_OUT3,CCDB_STD.C_TRT_svt_OUT4,CCDB_STD.C_TRT_svt_OUT5
           											 ,CCDB_STD.C_TRT_svt_OUT6,CCDB_STD.C_TRT_svt_OUT7,CCDB_STD.C_TRT_svt_OUT8,CCDB_STD.C_TRT_svt_OUT9,CCDB_STD.C_TRT_svt_OUT10,CCDB_STD.C_TRT_svt_OUT11);

        --充值
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.load_count, rec_svt_settle_trans.load_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_LOAD,CCDB_STD.C_TRT_svt_LOAD1);

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_COUNT, rec_svt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_UPDATE,CCDB_STD.C_TRT_svt_UPDATE1,CCDB_STD.C_TRT_svt_UPDATE2,CCDB_STD.C_TRT_svt_UPDATE3,CCDB_STD.C_TRT_svt_UPDATE4,CCDB_STD.C_TRT_svt_UPDATE5,CCDB_STD.C_TRT_svt_UPDATE6);

			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OUT_COUNT, rec_svt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_IN_COUNT, rec_svt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_svt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_svt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_svt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_count, rec_svt_settle_trans.refund_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND;          
           
        --延时退卡
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_delay_count, rec_svt_settle_trans.refund_delay_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND_DELAY; 
 
    	--押金 发售（0X0B）收押金 退卡（0x14,0X15）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 11, 1,20,-1,21,-1,0)), 0)
          INTO rec_svt_settle_trans.deposit_COUNT,rec_svt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_svt_settle_trans.trans_fee_COUNT,rec_svt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid		  = rec_svt_settle_trans.device_nid
           AND TRANS_FEE > 0;

 		--故障退款
        SELECT sum(0), sum(0)
          INTO rec_svt_settle_trans.fault_count,rec_svt_settle_trans.fault_amount
          FROM dual;


        INSERT INTO tbl_batch_svt_settle_trans VALUES rec_svt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SVT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_SVT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SVT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		      		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_SVT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SVT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_SVT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_SVT_SETTLE_TRANS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_SVT_SET_TRA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_TRANSTYPE_DAY definition

CREATE TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_DAY"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "TRANS_COUNT" DECIMAL(10,0) , 
		  "TRANS_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_DAY" 
	ADD CONSTRAINT "PK_BAT_TRANS_DAY" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_TYPE",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "DEVICE_NID",
		 "TRANS_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_DAY" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_TRANS_DAY" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_TRANSTYPE_DAY_ERROR definition

CREATE TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_DAY_ERROR"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "TRANS_COUNT" DECIMAL(10,0) , 
		  "TRANS_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_DAY_ERROR" 
	ADD CONSTRAINT "PK_BAT_TRANS_DAY_ERROR" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_TYPE",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "DEVICE_NID",
		 "TRANS_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_DAY_ERROR" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_TRANS_DAY_ERROR" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_TRANSTYPE_MONTH definition

CREATE TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_MONTH"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "TRANS_COUNT" DECIMAL(10,0) , 
		  "TRANS_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_MONTH" 
	ADD CONSTRAINT "PK_BAT_TRANS_MON" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_TYPE",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "DEVICE_NID",
		 "TRANS_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_MONTH" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_TRANS_MON" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_TRANSTYPE_YEAR definition

CREATE TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_YEAR"  (
		  "LINE_NID" DECIMAL(2,0) NOT NULL , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "TRANS_COUNT" DECIMAL(10,0) , 
		  "TRANS_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_YEAR" 
	ADD CONSTRAINT "PK_BAT_TRANS_YEAR" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "DEVICE_TYPE",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "DEVICE_NID",
		 "TRANS_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_TRANSTYPE_YEAR" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_TRANS_YEAR" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_TRANS_DEVICE definition

CREATE TABLE "SCDB    "."TBL_BATCH_TRANS_DEVICE"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_TRANS_DEVICE" 
	ADD CONSTRAINT "PK_BAT_TRANS_DEVICE" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD");

CREATE PROCEDURE P_BATCH_SJT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_sjt_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SJT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SJT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SVT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_SVT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SVT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		      		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_SVT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SVT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_SVT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_YKT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：一卡通票卡统计
  --输入：batch_date  运营日，tbl_batch_YKT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_YKT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_YKT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_YKT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),		
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_YKT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_QR_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：二维码票卡统计
  --输入：batch_date  运营日，tbl_batch_QR_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_QR;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
          UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_QR_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_QR;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_QR_settle_trans
         WHERE settle_date = batch_date
         
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_PBOC_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：银行卡票卡统计
  --输入：batch_date  运营日，tbl_batch_PBOC_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_PBOC;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_PBOC_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_PBOC;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_PBOC_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_FAULT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_FAULT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				         
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_FAULT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_FAULT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),		
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 	        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_FAULT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_TRANS_DEVICE" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_TRANS_DEVICE" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_TRANS_OPERATOR definition

CREATE TABLE "SCDB    "."TBL_BATCH_TRANS_OPERATOR"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP NOT NULL , 
		  "TRANS_END" TIMESTAMP NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_TRANS_OPERATOR" 
	ADD CONSTRAINT "PK_BAT_TRANS_OPERATOR" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO",
		 "TRANS_START",
		 "TRANS_END");

CREATE PROCEDURE P_BATCH_SJT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_sjt_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SJT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SJT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SVT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_SVT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SVT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		      		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_SVT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_SVT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_SVT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_YKT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：一卡通票卡统计
  --输入：batch_date  运营日，tbl_batch_YKT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_YKT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_YKT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_YKT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),		
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_YKT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_QR_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：二维码票卡统计
  --输入：batch_date  运营日，tbl_batch_QR_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_QR;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
          UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_QR_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_QR;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_QR_settle_trans
         WHERE settle_date = batch_date
         
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_PBOC_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：银行卡票卡统计
  --输入：batch_date  运营日，tbl_batch_PBOC_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_PBOC;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_PBOC_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_PBOC;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_PBOC_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：单程票票卡统计
  --输入：batch_date  运营日，tbl_batch_FAULT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_FAULT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),			
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				         
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_FAULT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_FAULT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),		
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),				 	        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_FAULT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_TRANS_OPERATOR" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_TRANS_OPERATOR" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_YKT_SETTLE_DATA definition

CREATE TABLE "SCDB    "."TBL_BATCH_YKT_SETTLE_DATA"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) , 
		  "TRANS_DATE" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "VALUE_TRANS" DECIMAL(10,0) , 
		  "SETTLE_COUNT" DECIMAL(10,0) , 
		  "SETTLE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TRANS_FEE" DECIMAL(10,0) , 
		  "DEPOSIT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_YKT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_YKT_temp为数据源
  --输出：tbl_batch_YKT_settle_trans ,(tbl_batch_YKT_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR YKT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_YKT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_YKT_settle_trans tbl_batch_YKT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_YKT_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_YKT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(YKT.device_nid,3,2)),YKT.settle_date, trans_date, station_nid, YKT.device_nid, ticket_type,trans_type, 
             payment_method, YKT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_YKT_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) YKT       			   
        			  ON  YKT.operator_id    =	shift.operator_id
        			  AND YKT.device_nid		 =	shift.device_nid
              	AND YKT.trans_time		 >= shift.trans_start
              	AND YKT.trans_time		 <= shift.trans_end
              	AND YKT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND YKT.shift_info 		 =  shift.shift_info
            GROUP BY YKT.settle_date, YKT.trans_date, YKT.station_nid, YKT.device_nid, ticket_type,trans_type,payment_method, 
                     YKT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_YKT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_YKT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_YKT_settle_head IN YKT_settle_cur
      LOOP
        rec_YKT_settle_trans.line_nid        := rec_YKT_settle_head.line_nid;
        rec_YKT_settle_trans.settle_date     := rec_YKT_settle_head.settle_date;
        rec_YKT_settle_trans.trans_date      := rec_YKT_settle_head.trans_date;
        rec_YKT_settle_trans.operator_id     := rec_YKT_settle_head.operator_id;
        rec_YKT_settle_trans.shift_info      := rec_YKT_settle_head.shift_info;
        rec_YKT_settle_trans.trans_start     := rec_YKT_settle_head.trans_start;
        rec_YKT_settle_trans.trans_end       := rec_YKT_settle_head.trans_end;
        rec_YKT_settle_trans.station_nid     := rec_YKT_settle_head.station_nid;
        rec_YKT_settle_trans.device_nid      := rec_YKT_settle_head.device_nid;
        rec_YKT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_YKT_settle_head.device_nid,1, 2));
        rec_YKT_settle_trans.ticket_type     := rec_YKT_settle_head.ticket_type;
        rec_YKT_settle_trans.payment_method  := rec_YKT_settle_head.payment_method;
        rec_YKT_settle_trans.ticket_category := CCDB_STD.C_TC_YKT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.sale_count, rec_YKT_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站 ---0x83 一卡通进站  ---0x93 交通部CPU卡进站 
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_YKT_settle_trans.in_count
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5001,5901);
           
        --出站 ---0x84 一卡通出站    ---0x94 交通部CPU卡出站  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.out_count, rec_YKT_settle_trans.out_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5002,5003,5004,5007,5008,5009,5902,5903,5904,5907,5908,5909);  

     
        --充值 ---0x96 交通部CPU卡充值  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.load_count, rec_YKT_settle_trans.load_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5301,5302) ;

      
     		--更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.UPDATE_COUNT, rec_YKT_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid			= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5200,5201,5202,5203,5204,5205,5206,5701,5702,5703,5704,5705,5706);

 				--出站更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OUT_COUNT, rec_ykt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_IN_COUNT, rec_ykt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_ykt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_ykt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_ykt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
        --退票
         SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_count, rec_YKT_settle_trans.refund_amount
          FROM DUAL;
 
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_delay_count, rec_YKT_settle_trans.refund_delay_amount
          FROM DUAL;
 
    	--押金   
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_YKT_settle_trans.deposit_COUNT,rec_YKT_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_YKT_settle_trans.trans_fee_COUNT,rec_YKT_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid		  = rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
       --故障退款
        SELECT sum(0), sum(0)
          INTO rec_ykt_settle_trans.fault_count,rec_ykt_settle_trans.fault_amount
          FROM dual;

        INSERT INTO tbl_batch_YKT_settle_trans VALUES rec_YKT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_YKT_SETTLE_DATA" TO USER "SCDB    ";


-- SCDB.TBL_BATCH_YKT_SETTLE_TRANS definition

CREATE TABLE "SCDB    "."TBL_BATCH_YKT_SETTLE_TRANS"  (
		  "LINE_NID" DECIMAL(2,0) , 
		  "SETTLE_DATE" VARCHAR(8) NOT NULL , 
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) NOT NULL , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "DEVICE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TICKET_CATEGORY" DECIMAL(3,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "PAYMENT_METHOD" DECIMAL(3,0) NOT NULL , 
		  "SALE_COUNT" DECIMAL(10,0) , 
		  "SALE_AMOUNT" DECIMAL(10,0) , 
		  "IN_COUNT" DECIMAL(10,0) , 
		  "OUT_COUNT" DECIMAL(10,0) , 
		  "OUT_AMOUNT" DECIMAL(10,0) , 
		  "LOAD_COUNT" DECIMAL(10,0) , 
		  "LOAD_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_COUNT" DECIMAL(10,0) , 
		  "UPDATE_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_TIME_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_RUN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OVER_BOTH_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_COUNT" DECIMAL(10,0) , 
		  "UPDATE_IN_AMOUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_COUNT" DECIMAL(10,0) , 
		  "UPDATE_OUT_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_COUNT" DECIMAL(10,0) , 
		  "REFUND_AMOUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_COUNT" DECIMAL(10,0) , 
		  "REFUND_DELAY_AMOUNT" DECIMAL(10,0) , 
		  "DEPOSIT_COUNT" DECIMAL(10,0) , 
		  "DEPOSIT_AMOUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_COUNT" DECIMAL(10,0) , 
		  "TRANS_FEE_AMOUNT" DECIMAL(10,0) , 
		  "FAULT_COUNT" DECIMAL(10,0) , 
		  "FAULT_AMOUNT" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_BATCH_YKT_SETTLE_TRANS" 
	ADD CONSTRAINT "PK_BAT_YKT_SET_TRA" PRIMARY KEY
		("TRANS_DATE",
		 "SETTLE_DATE",
		 "STATION_NID",
		 "TICKET_CATEGORY",
		 "TICKET_TYPE",
		 "OPERATOR_ID",
		 "DEVICE_NID",
		 "DEVICE_TYPE",
		 "PAYMENT_METHOD",
		 "SHIFT_INFO");

CREATE PROCEDURE P_BATCH_YKT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_YKT_temp为数据源
  --输出：tbl_batch_YKT_settle_trans ,(tbl_batch_YKT_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR YKT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_YKT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_YKT_settle_trans tbl_batch_YKT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_YKT_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_YKT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(YKT.device_nid,3,2)),YKT.settle_date, trans_date, station_nid, YKT.device_nid, ticket_type,trans_type, 
             payment_method, YKT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_YKT_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) YKT       			   
        			  ON  YKT.operator_id    =	shift.operator_id
        			  AND YKT.device_nid		 =	shift.device_nid
              	AND YKT.trans_time		 >= shift.trans_start
              	AND YKT.trans_time		 <= shift.trans_end
              	AND YKT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND YKT.shift_info 		 =  shift.shift_info
            GROUP BY YKT.settle_date, YKT.trans_date, YKT.station_nid, YKT.device_nid, ticket_type,trans_type,payment_method, 
                     YKT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_YKT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_YKT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_YKT_settle_head IN YKT_settle_cur
      LOOP
        rec_YKT_settle_trans.line_nid        := rec_YKT_settle_head.line_nid;
        rec_YKT_settle_trans.settle_date     := rec_YKT_settle_head.settle_date;
        rec_YKT_settle_trans.trans_date      := rec_YKT_settle_head.trans_date;
        rec_YKT_settle_trans.operator_id     := rec_YKT_settle_head.operator_id;
        rec_YKT_settle_trans.shift_info      := rec_YKT_settle_head.shift_info;
        rec_YKT_settle_trans.trans_start     := rec_YKT_settle_head.trans_start;
        rec_YKT_settle_trans.trans_end       := rec_YKT_settle_head.trans_end;
        rec_YKT_settle_trans.station_nid     := rec_YKT_settle_head.station_nid;
        rec_YKT_settle_trans.device_nid      := rec_YKT_settle_head.device_nid;
        rec_YKT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_YKT_settle_head.device_nid,1, 2));
        rec_YKT_settle_trans.ticket_type     := rec_YKT_settle_head.ticket_type;
        rec_YKT_settle_trans.payment_method  := rec_YKT_settle_head.payment_method;
        rec_YKT_settle_trans.ticket_category := CCDB_STD.C_TC_YKT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.sale_count, rec_YKT_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站 ---0x83 一卡通进站  ---0x93 交通部CPU卡进站 
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_YKT_settle_trans.in_count
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5001,5901);
           
        --出站 ---0x84 一卡通出站    ---0x94 交通部CPU卡出站  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.out_count, rec_YKT_settle_trans.out_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5002,5003,5004,5007,5008,5009,5902,5903,5904,5907,5908,5909);  

     
        --充值 ---0x96 交通部CPU卡充值  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.load_count, rec_YKT_settle_trans.load_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5301,5302) ;

      
     		--更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.UPDATE_COUNT, rec_YKT_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid			= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5200,5201,5202,5203,5204,5205,5206,5701,5702,5703,5704,5705,5706);

 				--出站更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OUT_COUNT, rec_ykt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_IN_COUNT, rec_ykt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_ykt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_ykt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_ykt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
        --退票
         SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_count, rec_YKT_settle_trans.refund_amount
          FROM DUAL;
 
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_delay_count, rec_YKT_settle_trans.refund_delay_amount
          FROM DUAL;
 
    	--押金   
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_YKT_settle_trans.deposit_COUNT,rec_YKT_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_YKT_settle_trans.trans_fee_COUNT,rec_YKT_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid		  = rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
       --故障退款
        SELECT sum(0), sum(0)
          INTO rec_ykt_settle_trans.fault_count,rec_ykt_settle_trans.fault_amount
          FROM dual;

        INSERT INTO tbl_batch_YKT_settle_trans VALUES rec_YKT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_YKT_SETTLE_STAT(batch_date IN VARCHAR(200))
IS
  
  --======================================================================
  --功能：一卡通票卡统计
  --输入：batch_date  运营日，tbl_batch_YKT_settle_trans 为数据源
  --输出：tbl_batch_TRANS_OPERATOR, tbl_batch_TRANS_device
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE_STAT';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --操作员交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_operator   WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_YKT;
    
      INSERT INTO tbl_batch_trans_operator
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method, 
         shift_info,trans_start,trans_end,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
        SELECT line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,ticket_type,payment_method,
        			 shift_info,trans_start,trans_end,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                 
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),	
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),			        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_YKT_settle_trans
         WHERE settle_date = batch_date
          AND  operator_id > 0
         GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
                  ticket_type,payment_method,shift_info,trans_start,trans_end;                  
        
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT.OPERATOR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --设备交易数据及金额
    BEGIN
      DELETE tbl_batch_trans_device WHERE settle_date = batch_date AND ticket_category = CCDB_STD.C_TC_YKT;
    
      INSERT INTO tbl_batch_trans_device
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,ticket_category, ticket_type,payment_method,
         sale_count, sale_amount, 
         load_count, load_amount,         
         in_count,out_count,out_amount,
         UPDATE_COUNT, UPDATE_AMOUNT,
         UPDATE_IN_COUNT, UPDATE_IN_AMOUNT,
         UPDATE_OUT_COUNT, UPDATE_OUT_AMOUNT,
         UPDATE_OVER_RUN_COUNT, UPDATE_OVER_RUN_AMOUNT,
         UPDATE_OVER_TIME_COUNT, UPDATE_OVER_TIME_AMOUNT,
         UPDATE_OVER_BOTH_COUNT, UPDATE_OVER_BOTH_AMOUNT,
         refund_count, refund_amount, 
         refund_DELAY_count, refund_DELAY_amount, 
         deposit_count,deposit_amount,
         trans_fee_count,trans_fee_amount,
         fault_count,fault_amount)
         SELECT line_nid,settle_date, trans_date, station_nid,device_nid,device_type, ticket_category,ticket_type,payment_method,
               SUM(sale_count),SUM(sale_amount), 
               SUM(load_count),SUM(load_amount),                
               SUM(in_count),SUM(out_count),SUM(out_amount),
               SUM(UPDATE_COUNT),SUM(UPDATE_AMOUNT),		
               SUM(UPDATE_IN_COUNT),SUM(UPDATE_IN_AMOUNT),
          		 SUM(UPDATE_OUT_COUNT),SUM(UPDATE_OUT_AMOUNT),
          		 SUM(UPDATE_OVER_RUN_COUNT),SUM(UPDATE_OVER_RUN_AMOUNT),
          		 SUM(UPDATE_OVER_TIME_COUNT),SUM(UPDATE_OVER_TIME_AMOUNT),
          		 SUM(UPDATE_OVER_BOTH_COUNT),SUM(UPDATE_OVER_BOTH_AMOUNT),		        
			         SUM(refund_count),SUM(refund_amount), 
			         SUM(refund_delay_count),SUM(refund_delay_amount), 
			         SUM(deposit_count),SUM(deposit_amount),
			         SUM(trans_fee_count),SUM(trans_fee_amount),
			         SUM(fault_count),SUM(fault_amount)
          FROM tbl_batch_YKT_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
                  ticket_category, ticket_type,payment_method   ;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE_STAT',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_REPORT_INALL(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：汇总统计
  --输入：batch_date  运营日，
  --      income数据源：tbl_batch_sjt_settle_trans  
  --			transtype数据源：tbl_batch_sjt_settle_data
  --输出：交易类型，收入---日报表，月报表，年报表
  --备注：HHJT_CJP 20190809
  --======================================================================
  
    CURSOR income_sale_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR income_sale_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_income_sale_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_month_cur IS
      SELECT DISTINCT substr(trans_date, 1, 6) transmonth
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    CURSOR transtype_year_cur IS
      SELECT DISTINCT substr(trans_date, 1, 4) transyear
        FROM tbl_batch_transtype_day
       WHERE settle_date = batch_date;
  
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_REPORT_INALL';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --销售收益
    BEGIN
      --日报表
      DELETE FROM tbl_batch_income_sale_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_sjt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
      INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_svt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
    
   
    INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_ykt_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
        
  INSERT INTO tbl_batch_income_sale_day
        (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
         ticket_type, sale_count, sale_amount,payment_method)
        SELECT line_nid,batch_date, trans_date, operator_id, station_nid, ticket_category,
               ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
          FROM tbl_batch_qr_settle_trans
         WHERE settle_date = batch_date
         GROUP BY line_nid,trans_date, operator_id, station_nid, ticket_category, ticket_type,payment_method
        HAVING nvl(SUM(sale_count), 0) > 0 ;
        
 
      --月报表
      FOR rec_income_sale_month IN income_sale_month_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_month
         WHERE trans_date = rec_income_sale_month.transmonth;
      
        INSERT INTO tbl_batch_income_sale_month
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_month.transmonth, operator_id,
                 station_nid, ticket_category, ticket_type, SUM(sale_count),
                 SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_day
           WHERE trans_date BETWEEN rec_income_sale_month.transmonth || '01' AND
                 rec_income_sale_month.transmonth || '31'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_income_sale_year IN income_sale_year_cur
      LOOP
        DELETE FROM tbl_batch_income_sale_year
         WHERE trans_date = rec_income_sale_year.transyear;
      
        INSERT INTO tbl_batch_income_sale_year
          (line_nid,settle_date, trans_date, operator_id, station_nid, ticket_category,
           ticket_type, sale_count, sale_amount,payment_method)
          SELECT line_nid,batch_date, rec_income_sale_year.transyear, operator_id, station_nid,
                 ticket_category, ticket_type, SUM(sale_count), SUM(sale_amount),payment_method
            FROM tbl_batch_income_sale_month
           WHERE trans_date BETWEEN rec_income_sale_year.transyear || '01' AND
                 rec_income_sale_year.transyear || '12'
           GROUP BY line_nid,operator_id, station_nid, ticket_category, ticket_type,payment_method;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.INCOME',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    
    --交易类型统计报表   
    BEGIN
      --日报表
      DELETE FROM tbl_batch_transtype_day WHERE settle_date = batch_date;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
               CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SJT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_sjt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
      INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_SVT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_svt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
    
    
  INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_YKT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_ykt_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;
                  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_QR, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_qr_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_PBOC, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_pboc_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;                
  
  --故障退款   
   INSERT INTO tbl_batch_transtype_day
        (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
         ticket_category, ticket_type, trans_type, trans_count, trans_amount,
         trans_fee, deposit,payment_method)
        SELECT line_nid,settle_date, trans_date, station_nid, device_nid,
    			     CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
               CCDB_STD.C_TC_FAULT, ticket_type, trans_type,
               SUM(settle_count), SUM(settle_amount), SUM(trans_fee), SUM(deposit),payment_method
          FROM tbl_batch_fault_settle_data
         WHERE settle_date = batch_date
         GROUP BY line_nid,settle_date, trans_date, station_nid, device_nid, ticket_type,
                  trans_type,payment_method;  
        
      

      --月报表
      FOR rec_transtype_month IN transtype_month_cur
      LOOP
        DELETE FROM tbl_batch_transtype_month  WHERE trans_date = rec_transtype_month.transmonth;
      
        INSERT INTO tbl_batch_transtype_month
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_month.transmonth, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_day
           WHERE trans_date BETWEEN rec_transtype_month.transmonth || '01' AND
                 rec_transtype_month.transmonth || '31'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
      END LOOP;
    
      --年报表
      FOR rec_transtype_year IN transtype_year_cur
      LOOP
        DELETE FROM tbl_batch_transtype_year  WHERE trans_date = rec_transtype_year.transyear;
      
        INSERT INTO tbl_batch_transtype_year
          (line_nid,settle_date, trans_date, station_nid, device_nid, device_type,
           ticket_category, ticket_type, trans_type, trans_count, trans_amount,
           trans_fee, deposit,payment_method)
          SELECT line_nid,batch_date, rec_transtype_year.transyear, station_nid, device_nid,
                 device_type, ticket_category, ticket_type, trans_type,
                 SUM(trans_count), SUM(trans_amount), SUM(trans_fee), SUM(deposit),payment_method
            FROM tbl_batch_transtype_month
           WHERE trans_date BETWEEN rec_transtype_year.transyear || '01' AND
                 rec_transtype_year.transyear || '12'
           GROUP BY line_nid,station_nid, device_nid, device_type, ticket_category, ticket_type,
                    trans_type,payment_method;
                    
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL.TRANSTYPE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_REPORT_INALL', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_BATCH_YKT_SETTLE_TRANS" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_BAT_YKT_SET_TRA" TO USER "SCDB    ";


-- SCDB.TBL_PM_0002_FARE_TIME definition

CREATE TABLE "SCDB    "."TBL_PM_0002_FARE_TIME"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "FARE_CODE" DECIMAL(10,0) , 
		  "MAX_TRAVEL_TIME" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0002_FARE_TIME" TO USER "SCDB    ";


-- SCDB.TBL_PM_0002_OPERATOR_TIME definition

CREATE TABLE "SCDB    "."TBL_PM_0002_OPERATOR_TIME"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "START_TIME" DECIMAL(10,0) , 
		  "END_TIME" DECIMAL(10,0) , 
		  "UTC_OFFSET" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0002_OPERATOR_TIME" TO USER "SCDB    ";


-- SCDB.TBL_PM_0002_SPECIAL_DATE definition

CREATE TABLE "SCDB    "."TBL_PM_0002_SPECIAL_DATE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "SPECIAL_DATE" DECIMAL(10,0) , 
		  "DATE_TYPE" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0002_SPECIAL_DATE" TO USER "SCDB    ";


-- SCDB.TBL_PM_0002_SPECIAL_TIME definition

CREATE TABLE "SCDB    "."TBL_PM_0002_SPECIAL_TIME"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "TIME_ID" DECIMAL(10,0) , 
		  "MIDNIGHT_SECONDS" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0002_SPECIAL_TIME" TO USER "SCDB    ";


-- SCDB.TBL_PM_0003_BASE_FARE definition

CREATE TABLE "SCDB    "."TBL_PM_0003_BASE_FARE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "FARE_GROUP_ID" DECIMAL(10,0) , 
		  "FARE_CODE" DECIMAL(10,0) , 
		  "FARE_VALUE" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0003_BASE_FARE" TO USER "SCDB    ";


-- SCDB.TBL_PM_0003_FARE_GROUP definition

CREATE TABLE "SCDB    "."TBL_PM_0003_FARE_GROUP"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "FARE_TYPE_ID" DECIMAL(10,0) , 
		  "DATE_TYPE" DECIMAL(10,0) , 
		  "TIME_ID" DECIMAL(10,0) , 
		  "FARE_GROUP_ID" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0003_FARE_GROUP" TO USER "SCDB    ";


-- SCDB.TBL_PM_0003_FARE_TIER definition

CREATE TABLE "SCDB    "."TBL_PM_0003_FARE_TIER"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "START_STATION_NID" DECIMAL(10,0) , 
		  "END_STATION_NID" DECIMAL(10,0) , 
		  "FARE_CODE" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0003_FARE_TIER" TO USER "SCDB    ";


-- SCDB.TBL_PM_0003_TICKET_FARE definition

CREATE TABLE "SCDB    "."TBL_PM_0003_TICKET_FARE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "TICKET_TYPE" DECIMAL(10,0) , 
		  "SP_ID" DECIMAL(10,0) , 
		  "FARE_TYPE_ID" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0003_TICKET_FARE" TO USER "SCDB    ";


-- SCDB.TBL_PM_0004_CHIP definition

CREATE TABLE "SCDB    "."TBL_PM_0004_CHIP"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "CHIP_TYPE" DECIMAL(10,0) , 
		  "CHIP_MAX_VALID" DECIMAL(10,0) , 
		  "CHIP_MAX_QUANTITY" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0004_CHIP" TO USER "SCDB    ";


-- SCDB.TBL_PM_0004_MEDIA definition

CREATE TABLE "SCDB    "."TBL_PM_0004_MEDIA"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "TICKET_TYPE" DECIMAL(10,0) , 
		  "MEDIA_TYPE" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0004_MEDIA" TO USER "SCDB    ";


-- SCDB.TBL_PM_0004_PRODUCT definition

CREATE TABLE "SCDB    "."TBL_PM_0004_PRODUCT"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "PRODUCT_TYPE" DECIMAL(10,0) , 
		  "TICKET_FAMILY" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0004_PRODUCT" TO USER "SCDB    ";


-- SCDB.TBL_PM_0004_TICKET definition

CREATE TABLE "SCDB    "."TBL_PM_0004_TICKET"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "TICKET_TYPE" DECIMAL(10,0) , 
		  "TICKET_FAMILY" DECIMAL(10,0) , 
		  "SOUVENIR_FLAG" DECIMAL(10,0) , 
		  "DISCOUNT_FLAG" DECIMAL(10,0) , 
		  "SVT_FLAG" DECIMAL(10,0) , 
		  "SOUND_ID" DECIMAL(10,0) , 
		  "LAMP_ID" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0004_TICKET" TO USER "SCDB    ";


-- SCDB.TBL_PM_000B_LINE definition

CREATE TABLE "SCDB    "."TBL_PM_000B_LINE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "LINE_ID" VARCHAR(2) , 
		  "LINE_NAME_CN" VARCHAR(80) , 
		  "LINE_NAME_EN" VARCHAR(40) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000B_LINE" TO USER "SCDB    ";


-- SCDB.TBL_PM_000B_SECTION definition

CREATE TABLE "SCDB    "."TBL_PM_000B_SECTION"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "SECTION_ID" DECIMAL(10,0) , 
		  "SECTION_NAME_CN" VARCHAR(80) , 
		  "SECTION_NAME_EN" VARCHAR(40) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000B_SECTION" TO USER "SCDB    ";


-- SCDB.TBL_PM_000B_STATION definition

CREATE TABLE "SCDB    "."TBL_PM_000B_STATION"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "STATION_NID" VARCHAR(4) , 
		  "STATION_NAME_CN" VARCHAR(80) , 
		  "STATION_NAME_EN" VARCHAR(80) , 
		  "LINE_ID" VARCHAR(2) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000B_STATION" TO USER "SCDB    ";


-- SCDB.TBL_PM_000B_ZONE definition

CREATE TABLE "SCDB    "."TBL_PM_000B_ZONE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "ZONE_ID" DECIMAL(10,0) , 
		  "ZONE_NAME_CN" VARCHAR(80) , 
		  "ZONE_NAME_EN" VARCHAR(40) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000B_ZONE" TO USER "SCDB    ";


-- SCDB.TBL_PM_000E_MEDIA definition

CREATE TABLE "SCDB    "."TBL_PM_000E_MEDIA"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "MEDIA_CODE" DECIMAL(10,0) , 
		  "MEDIA_CN_NAME" VARCHAR(100) , 
		  "MEDIA_EN_NAME" VARCHAR(100) , 
		  "FLAG" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000E_MEDIA" TO USER "SCDB    ";


-- SCDB.TBL_PM_000E_PRODUCT definition

CREATE TABLE "SCDB    "."TBL_PM_000E_PRODUCT"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "PRODUCT_CODE" DECIMAL(10,0) , 
		  "PRODUCT_CN_NAME" VARCHAR(100) , 
		  "PRODUCT_EN_NAME" VARCHAR(100) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000E_PRODUCT" TO USER "SCDB    ";


-- SCDB.TBL_PM_000E_TICKET definition

CREATE TABLE "SCDB    "."TBL_PM_000E_TICKET"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "TICKET_CODE" DECIMAL(10,0) , 
		  "TICKET_CN_NAME" VARCHAR(100) , 
		  "TICKET_EN_NAME" VARCHAR(100) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_000E_TICKET" TO USER "SCDB    ";


-- SCDB.TBL_PM_0031_AGM definition

CREATE TABLE "SCDB    "."TBL_PM_0031_AGM"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "MAXUD_COUNT" DECIMAL(10,0) , 
		  "TXN_VALIDITY_DAYS" DECIMAL(10,0) , 
		  "YKT_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_UD_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_FIN_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_AR_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_EV_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "DISK_ALMOST_FULL" DECIMAL(3,0) , 
		  "DISK_FULL_LIMIT" DECIMAL(3,0) , 
		  "STOCK_ALMOST_FULL" DECIMAL(10,0) , 
		  "STOCK_FULL" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0031_AGM" TO USER "SCDB    ";


-- SCDB.TBL_PM_0032_TVM definition

CREATE TABLE "SCDB    "."TBL_PM_0032_TVM"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "MAXUD_COUNT" DECIMAL(10,0) , 
		  "TXN_VALIDITY_DAYS" DECIMAL(10,0) , 
		  "YKT_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_UD_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_FIN_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_AR_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_EV_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "DISK_ALMOST_FULL" DECIMAL(3,0) , 
		  "DISK_FULL_LIMIT" DECIMAL(3,0) , 
		  "BANKNOTE_ALMOST_FULL" DECIMAL(5,0) , 
		  "BANKNOTE_FULL" DECIMAL(5,0) , 
		  "HOPPER_ALMOST_EMPTY" DECIMAL(5,0) , 
		  "HOPPER_EMPTY" DECIMAL(5,0) , 
		  "COIN_ALMOST_FULL" DECIMAL(5,0) , 
		  "COIN_FULL" DECIMAL(5,0) , 
		  "PAYMENT_MEANS" DECIMAL(1,0) , 
		  "MAX_COIN_CHANGE" DECIMAL(10,0) , 
		  "MAX_BANKNOTE_CHANGE" DECIMAL(10,0) , 
		  "SJT_ALERT" DECIMAL(5,0) , 
		  "ADLOAD_BEFORE" DECIMAL(10,0) , 
		  "AD_PLAY_MEANS" DECIMAL(3,0) , 
		  "LOGON_TIMEOUT" DECIMAL(10,0) , 
		  "TEMPERATURE_LIMIT" DECIMAL(3,0) , 
		  "AUTO_SHUTDOWN" DECIMAL(1,0) , 
		  "OUTOFSERVICE_PRINT" DECIMAL(1,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0032_TVM" TO USER "SCDB    ";


-- SCDB.TBL_PM_0032_TVM_AD definition

CREATE TABLE "SCDB    "."TBL_PM_0032_TVM_AD"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "AD_ID" DECIMAL(10,0) , 
		  "AD_FILE_NAME" VARCHAR(64) , 
		  "MD5" VARCHAR(32) , 
		  "MEDIA_TYPE" DECIMAL(5,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0032_TVM_AD" TO USER "SCDB    ";


-- SCDB.TBL_PM_0032_TVM_BANKNOTE definition

CREATE TABLE "SCDB    "."TBL_PM_0032_TVM_BANKNOTE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "BANKNOTE_VALUE" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0032_TVM_BANKNOTE" TO USER "SCDB    ";


-- SCDB.TBL_PM_0032_TVM_COIN definition

CREATE TABLE "SCDB    "."TBL_PM_0032_TVM_COIN"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "COIN_VALUE" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0032_TVM_COIN" TO USER "SCDB    ";


-- SCDB.TBL_PM_0033_BOM definition

CREATE TABLE "SCDB    "."TBL_PM_0033_BOM"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "MAXUD_COUNT" DECIMAL(10,0) , 
		  "SJT_ALMOST_EMPTY" DECIMAL(10,0) , 
		  "YKT_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_UD_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_FIN_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_AR_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_EV_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "DISK_ALMOST_FULL" DECIMAL(3,0) , 
		  "DISK_FULL_LIMIT" DECIMAL(3,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0033_BOM" TO USER "SCDB    ";


-- SCDB.TBL_PM_0034_AVM definition

CREATE TABLE "SCDB    "."TBL_PM_0034_AVM"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "YKT_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_UD_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_FIN_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_AR_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "CCHS_EV_UPLOAD_INTERVAL" DECIMAL(10,0) , 
		  "DISK_ALMOST_FULL" DECIMAL(3,0) , 
		  "DISK_FULL_LIMIT" DECIMAL(3,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0034_AVM" TO USER "SCDB    ";


-- SCDB.TBL_PM_0035_OPERATOR definition

CREATE TABLE "SCDB    "."TBL_PM_0035_OPERATOR"  (
		  "PARAMETER_NBR" DECIMAL(10,0) NOT NULL , 
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "GROUP_NO" DECIMAL(10,0) NOT NULL , 
		  "VALID_START" CHAR(8) , 
		  "VALID_END" CHAR(8) , 
		  "OPERATOR_PIN" VARCHAR(32) , 
		  "AREA_NO" DECIMAL(10,0) NOT NULL )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0035_OPERATOR" TO USER "SCDB    ";


-- SCDB.TBL_PM_0035_OPERATOR_GROUP definition

CREATE TABLE "SCDB    "."TBL_PM_0035_OPERATOR_GROUP"  (
		  "PARAMETER_NBR" DECIMAL(10,0) NOT NULL , 
		  "GROUP_NO" DECIMAL(10,0) NOT NULL , 
		  "PRIVILEGE_NO" DECIMAL(10,0) NOT NULL )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0035_OPERATOR_GROUP" TO USER "SCDB    ";


-- SCDB.TBL_PM_0035_SYS definition

CREATE TABLE "SCDB    "."TBL_PM_0035_SYS"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "TIME_DEVIATION" DECIMAL(10,0) , 
		  "MIN_TIME_DEVIATION" DECIMAL(10,0) , 
		  "MAX_TIME_DEVIATION" DECIMAL(10,0) , 
		  "MAX_PIN_RETRY" DECIMAL(10,0) , 
		  "CCHS_MAX_IOERROR" DECIMAL(10,0) , 
		  "YKT_MAX_IOERROR" DECIMAL(10,0) , 
		  "CASHCARD_MAX_IOERROR" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0035_SYS" TO USER "SCDB    ";


-- SCDB.TBL_PM_0035_ZONE definition

CREATE TABLE "SCDB    "."TBL_PM_0035_ZONE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) NOT NULL , 
		  "AREA_NO" DECIMAL(10,0) NOT NULL , 
		  "DEVICE_NID" CHAR(4) NOT NULL )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0035_ZONE" TO USER "SCDB    ";


-- SCDB.TBL_PM_009E_MODE_LIST definition

CREATE TABLE "SCDB    "."TBL_PM_009E_MODE_LIST"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "MODE_CODE" DECIMAL(10,0) , 
		  "ENTER_ENABLE" DECIMAL(10,0) , 
		  "EXIT_ENABLE" DECIMAL(10,0) , 
		  "FREE_TRAN" DECIMAL(10,0) , 
		  "DATE_CHECK" DECIMAL(10,0) , 
		  "TIME_CHECK" DECIMAL(10,0) , 
		  "FARETIE_CHECK" DECIMAL(10,0) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_009E_MODE_LIST" TO USER "SCDB    ";


-- SCDB.TBL_PM_0202_STATION definition

CREATE TABLE "SCDB    "."TBL_PM_0202_STATION"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "STATION_NID" VARCHAR(8) , 
		  "START_TRANS" VARCHAR(6) , 
		  "END_TRANS" VARCHAR(6) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0202_STATION" TO USER "SCDB    ";


-- SCDB.TBL_PM_0206_DEVICE definition

CREATE TABLE "SCDB    "."TBL_PM_0206_DEVICE"  (
		  "PARAMETER_NBR" DECIMAL(10,0) NOT NULL , 
		  "GROUP_NBR" DECIMAL(3,0) WITH DEFAULT 0 , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "DEVICE_NAME" VARCHAR(16) , 
		  "DEVICE_TYPE" DECIMAL(3,0) , 
		  "DEVICE_SUBTYPE" DECIMAL(3,0) , 
		  "DEVICE_IP" VARCHAR(8) , 
		  "SERVER_PORT" DECIMAL(5,0) , 
		  "X_POINT" DECIMAL(5,0) , 
		  "Y_POINT" DECIMAL(5,0) , 
		  "ROTATE_ANGEL" DECIMAL(3,0) , 
		  "NEW_DEVICE_NID" VARCHAR(8) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_PM_0206_DEVICE"."ROTATE_ANGEL" IS '15度为单位';

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_0206_DEVICE" TO USER "SCDB    ";


-- SCDB.TBL_PM_SUBVERSION definition

CREATE TABLE "SCDB    "."TBL_PM_SUBVERSION"  (
		  "PARAMETER_NBR" DECIMAL(10,0) , 
		  "PARAM_TYPE" VARCHAR(4) , 
		  "PARAMETER_VERSION" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_PM_SUBVERSION" TO USER "SCDB    ";


-- SCDB.TBL_RG_AGM definition

CREATE TABLE "SCDB    "."TBL_RG_AGM"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "REG_TYPE" DECIMAL(3,0) NOT NULL , 
		  "REG_TIME" TIMESTAMP NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "TICKET_BOX_1" DECIMAL(10,0) , 
		  "TICKET_BOX_2" DECIMAL(10,0) , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_AGM" 
	ADD CONSTRAINT "P_PK_RG_AGM" PRIMARY KEY
		("DEVICE_NID",
		 "REG_TIME");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_AGM" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_AGM" TO USER "SCDB    ";


-- SCDB.TBL_RG_AGM_ACCU definition

CREATE TABLE "SCDB    "."TBL_RG_AGM_ACCU"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TOATL_ENTRY" DECIMAL(10,0) , 
		  "TOATL_EXIT" DECIMAL(10,0) , 
		  "TOATL_RECYCLE" DECIMAL(10,0) , 
		  "TOATL_VALUE" DECIMAL(10,0) , 
		  "TOTAL_LOCK" DECIMAL(10,0) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_AGM_ACCU" 
	ADD CONSTRAINT "P_PK_RG_AGM_ACCU" PRIMARY KEY
		("PACKET_SEQ",
		 "TICKET_TYPE");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_AGM_ACCU" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_AGM_ACCU" TO USER "SCDB    ";


-- SCDB.TBL_RG_AGM_TRANS_SN definition

CREATE TABLE "SCDB    "."TBL_RG_AGM_TRANS_SN"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "FILE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "START_SN" DECIMAL(10,0) , 
		  "END_SN" DECIMAL(10,0) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_AGM_TRANS_SN" 
	ADD CONSTRAINT "P_PK_RG_AGM_TRANS_SN" PRIMARY KEY
		("PACKET_SEQ",
		 "FILE_TYPE");

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_AGM_TRANS_SN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_AGM_TRANS_SN" TO USER "SCDB    ";


-- SCDB.TBL_RG_BOM definition

CREATE TABLE "SCDB    "."TBL_RG_BOM"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "REG_TYPE" DECIMAL(3,0) NOT NULL , 
		  "REG_TIME" TIMESTAMP NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "TICKET_BOX_1" DECIMAL(10,0) , 
		  "TICKET_BOX_2" DECIMAL(10,0) , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_BOM" 
	ADD CONSTRAINT "P_PK_RG_BOM" PRIMARY KEY
		("DEVICE_NID",
		 "REG_TIME");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_BOM" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_BOM" TO USER "SCDB    ";


-- SCDB.TBL_RG_BOM_ACCU definition

CREATE TABLE "SCDB    "."TBL_RG_BOM_ACCU"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "TICKET_TYPE" DECIMAL(3,0) NOT NULL , 
		  "TOTAL_COUNT_SALE" DECIMAL(10,0) , 
		  "TOTAL_VALUE_SALE" DECIMAL(10,0) , 
		  "TOTAL_COUNT_REFUND" DECIMAL(10,0) , 
		  "TOTAL_VALUE_REFUND" DECIMAL(10,0) , 
		  "TOTAL_COUNT_UPDATE" DECIMAL(10,0) , 
		  "TOTAL_VALUE_UPDATE" DECIMAL(10,0) , 
		  "TOTAL_COUNT_CHARGE" DECIMAL(10,0) , 
		  "TOTAL_VALUE_CHARGE" DECIMAL(10,0) , 
		  "TOTAL_LOCK" DECIMAL(10,0) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_BOM_ACCU" 
	ADD CONSTRAINT "P_PK_RG_BOM_ACCU" PRIMARY KEY
		("PACKET_SEQ",
		 "TICKET_TYPE");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_BOM_ACCU" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_BOM_ACCU" TO USER "SCDB    ";


-- SCDB.TBL_RG_BOM_TRANS_SN definition

CREATE TABLE "SCDB    "."TBL_RG_BOM_TRANS_SN"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "FILE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "START_SN" DECIMAL(10,0) , 
		  "END_SN" DECIMAL(10,0) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_BOM_TRANS_SN" 
	ADD CONSTRAINT "P_PK_RG_BOM_TRANS_SN" PRIMARY KEY
		("PACKET_SEQ",
		 "FILE_TYPE");

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_BOM_TRANS_SN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_BOM_TRANS_SN" TO USER "SCDB    ";


-- SCDB.TBL_RG_TVM definition

CREATE TABLE "SCDB    "."TBL_RG_TVM"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "REG_TYPE" DECIMAL(3,0) NOT NULL , 
		  "REG_TIME" TIMESTAMP NOT NULL , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_TVM" 
	ADD CONSTRAINT "P_PK_RG_TVM" PRIMARY KEY
		("DEVICE_NID",
		 "REG_TIME");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_TVM" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_TVM" TO USER "SCDB    ";


-- SCDB.TBL_RG_TVM_ACCU definition

CREATE TABLE "SCDB    "."TBL_RG_TVM_ACCU"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "REGISTER0" DECIMAL(10,0) , 
		  "REGISTER1" DECIMAL(10,0) , 
		  "REGISTER2" DECIMAL(10,0) , 
		  "REGISTER3" DECIMAL(10,0) , 
		  "REGISTER4" DECIMAL(10,0) , 
		  "REGISTER5" DECIMAL(10,0) , 
		  "REGISTER6" DECIMAL(10,0) , 
		  "REGISTER7" DECIMAL(10,0) , 
		  "REGISTER8" DECIMAL(10,0) , 
		  "REGISTER9" DECIMAL(10,0) , 
		  "REGISTER10" DECIMAL(10,0) , 
		  "REGISTER11" DECIMAL(10,0) , 
		  "REGISTER12" DECIMAL(10,0) , 
		  "REGISTER13" DECIMAL(10,0) , 
		  "REGISTER14" DECIMAL(10,0) , 
		  "REGISTER15" DECIMAL(10,0) , 
		  "REGISTER16" DECIMAL(10,0) , 
		  "REGISTER17" DECIMAL(10,0) , 
		  "REGISTER18" DECIMAL(10,0) , 
		  "REGISTER19" DECIMAL(10,0) , 
		  "REGISTER20" DECIMAL(10,0) , 
		  "REGISTER21" DECIMAL(10,0) , 
		  "REGISTER22" DECIMAL(10,0) , 
		  "REGISTER23" DECIMAL(10,0) , 
		  "REGISTER24" DECIMAL(10,0) , 
		  "REGISTER25" DECIMAL(10,0) , 
		  "REGISTER26" DECIMAL(10,0) , 
		  "REGISTER27" DECIMAL(10,0) , 
		  "REGISTER28" DECIMAL(10,0) , 
		  "REGISTER29" DECIMAL(10,0) , 
		  "REGISTER30" DECIMAL(10,0) , 
		  "REGISTER31" DECIMAL(10,0) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_TVM_ACCU" 
	ADD CONSTRAINT "P_PK_RG_TVM_ACCU" PRIMARY KEY
		("PACKET_SEQ");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_TVM_ACCU" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_TVM_ACCU" TO USER "SCDB    ";


-- SCDB.TBL_RG_TVM_TRANS_SN definition

CREATE TABLE "SCDB    "."TBL_RG_TVM_TRANS_SN"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "FILE_TYPE" DECIMAL(3,0) NOT NULL , 
		  "START_SN" DECIMAL(10,0) , 
		  "END_SN" DECIMAL(10,0) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_RG_TVM_TRANS_SN" 
	ADD CONSTRAINT "P_PK_RG_TVM_TRANS_SN" PRIMARY KEY
		("PACKET_SEQ",
		 "FILE_TYPE");

GRANT CONTROL ON TABLE "SCDB    "."TBL_RG_TVM_TRANS_SN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_RG_TVM_TRANS_SN" TO USER "SCDB    ";


-- SCDB.TBL_SS_AREA definition

CREATE TABLE "SCDB    "."TBL_SS_AREA"  (
		  "AREA_NO" DECIMAL(10,0) NOT NULL , 
		  "DEVICE_NID" VARCHAR(8) NOT NULL , 
		  "CREATE_USER" VARCHAR(10) , 
		  "MEMO" VARCHAR(50) , 
		  "UPDATE_TIME" TIMESTAMP(0) WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_AREA" 
	ADD CONSTRAINT "PK_SS_AREA" PRIMARY KEY
		("AREA_NO",
		 "DEVICE_NID");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_AREA" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_AREA" TO USER "SCDB    ";


-- SCDB.TBL_SS_CURRENT_STATION definition

CREATE TABLE "SCDB    "."TBL_SS_CURRENT_STATION"  (
		  "STATION_NID" VARCHAR(4) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_CURRENT_STATION" TO USER "SCDB    ";


-- SCDB.TBL_SS_DEVICE_INFO definition

CREATE TABLE "SCDB    "."TBL_SS_DEVICE_INFO"  (
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_NID" VARCHAR(8) NOT NULL , 
		  "DEVICE_IP" VARCHAR(8) , 
		  "DEVICE_PORT" DECIMAL(10,0) , 
		  "DEVICE_TYPE" VARCHAR(2) , 
		  "DEVICE_SUBTYPE" VARCHAR(2) , 
		  "DEVICE_NAME" VARCHAR(10) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_DEVICE_INFO" 
	ADD CONSTRAINT "PK_SS_DEVICE_INFO" PRIMARY KEY
		("STATION_NID",
		 "DEVICE_NID");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_DEVICE_INFO" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_DEVICE_INFO" TO USER "SCDB    ";


-- SCDB.TBL_SS_GROUP definition

CREATE TABLE "SCDB    "."TBL_SS_GROUP"  (
		  "GROUP_NO" DECIMAL(10,0) NOT NULL , 
		  "GROUP_NAME" VARCHAR(64) , 
		  "CREATE_USER" VARCHAR(10) , 
		  "MEMO" VARCHAR(50) , 
		  "UPDATE_TIME" TIMESTAMP(0) WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_GROUP" 
	ADD CONSTRAINT "PK_SS_GROUP" PRIMARY KEY
		("GROUP_NO");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_GROUP" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_GROUP" TO USER "SCDB    ";


-- SCDB.TBL_SS_OPERATOR definition

CREATE TABLE "SCDB    "."TBL_SS_OPERATOR"  (
		  "OPERATOR_ID" DECIMAL(8,0) NOT NULL , 
		  "OPERATOR_NAME" VARCHAR(64) , 
		  "GROUP_NO" DECIMAL(10,0) , 
		  "AREA_NO" DECIMAL(10,0) , 
		  "OPERATOR_NO" VARCHAR(32) , 
		  "OPERATOR_PIN" VARCHAR(32) , 
		  "VALID_START" VARCHAR(8) , 
		  "VALID_END" VARCHAR(8) , 
		  "STATION_NID" VARCHAR(8) , 
		  "CREATE_USER" DECIMAL(8,0) , 
		  "MEMO" VARCHAR(50) , 
		  "UPDATE_TIME" TIMESTAMP(0) WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_OPERATOR" 
	ADD CONSTRAINT "PK_SS_OPERATOR" PRIMARY KEY
		("OPERATOR_ID");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_OPERATOR" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_OPERATOR" TO USER "SCDB    ";


-- SCDB.TBL_SS_PRIVILEGE definition

CREATE TABLE "SCDB    "."TBL_SS_PRIVILEGE"  (
		  "GROUP_NO" DECIMAL(10,0) NOT NULL , 
		  "PRIVILEGE_NO" DECIMAL(10,0) NOT NULL , 
		  "PRIVILEGE_NAME" VARCHAR(64) , 
		  "CREATE_USER" VARCHAR(10) , 
		  "MEMO" VARCHAR(50) , 
		  "UPDATE_TIME" TIMESTAMP(0) WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_PRIVILEGE" 
	ADD CONSTRAINT "PK_SS_PRIVILEGE" PRIMARY KEY
		("GROUP_NO",
		 "PRIVILEGE_NO");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_PRIVILEGE" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_PRIVILEGE" TO USER "SCDB    ";


-- SCDB.TBL_SS_PRIVILEGE_INFO definition

CREATE TABLE "SCDB    "."TBL_SS_PRIVILEGE_INFO"  (
		  "PRIVILEGE_NO" DECIMAL(10,0) NOT NULL , 
		  "PRIVILEGE_NAME" VARCHAR(64) , 
		  "SOFTWARE" VARCHAR(64) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_PRIVILEGE_INFO" 
	ADD CONSTRAINT "PK_SS_PRIVILEGE_INFO" PRIMARY KEY
		("PRIVILEGE_NO");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_PRIVILEGE_INFO" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_PRIVILEGE_INFO" TO USER "SCDB    ";


-- SCDB.TBL_SS_STATION definition

CREATE TABLE "SCDB    "."TBL_SS_STATION"  (
		  "STATION_NID" CHAR(4) , 
		  "STATION_NAME_EN" VARCHAR(80) , 
		  "STATION_NAME_CN" VARCHAR(80) , 
		  "LINE_ID" CHAR(2) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_STATION" TO USER "SCDB    ";


-- SCDB.TBL_SS_STATION_SCHEDULE definition

CREATE TABLE "SCDB    "."TBL_SS_STATION_SCHEDULE"  (
		  "STATION_NID" VARCHAR(8) NOT NULL , 
		  "START_TRANS" VARCHAR(6) , 
		  "END_TRANS" VARCHAR(6) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_STATION_SCHEDULE" 
	ADD CONSTRAINT "PK_TATION_SCHEDULE" PRIMARY KEY
		("STATION_NID");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_STATION_SCHEDULE" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_TATION_SCHEDULE" TO USER "SCDB    ";


-- SCDB.TBL_SS_TICKET definition

CREATE TABLE "SCDB    "."TBL_SS_TICKET"  (
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "TICKET_CLASS" DECIMAL(3,0) , 
		  "TICKET_NAME_CN" VARCHAR(64) , 
		  "TICKET_NAME_EN" VARCHAR(64) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_TICKET" TO USER "SCDB    ";


-- SCDB.TBL_SS_TRANS_TYPE definition

CREATE TABLE "SCDB    "."TBL_SS_TRANS_TYPE"  (
		  "TRANS_TYPE" DECIMAL(5,0) NOT NULL , 
		  "TYPE_NAME_CN" VARCHAR(40) , 
		  "TYPE_NAME_EN" VARCHAR(50) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_SS_TRANS_TYPE" 
	ADD CONSTRAINT "PK_SS_TRANS_TYPE" PRIMARY KEY
		("TRANS_TYPE");

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_TRANS_TYPE" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_TRANS_TYPE" TO USER "SCDB    ";


-- SCDB.TBL_SS_USER_OPER definition

CREATE TABLE "SCDB    "."TBL_SS_USER_OPER"  (
		  "FUNC_ID" VARCHAR(20) , 
		  "FUNC_MAT" VARCHAR(500) , 
		  "EXE_TIME" TIMESTAMP , 
		  "EXE_RESULT" DECIMAL(1,0) , 
		  "EXE_USER" VARCHAR(10) , 
		  "IN_TIME" TIMESTAMP )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_SS_USER_OPER"."EXE_RESULT" IS '0：失败 1：成功 ';

GRANT CONTROL ON TABLE "SCDB    "."TBL_SS_USER_OPER" TO USER "SCDB    ";


-- SCDB.TBL_TR_PBOC_ERROR definition

CREATE TABLE "SCDB    "."TBL_TR_PBOC_ERROR"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_PBOC_ERROR" TO USER "SCDB    ";


-- SCDB.TBL_TR_PBOC_MAIN definition

CREATE TABLE "SCDB    "."TBL_TR_PBOC_MAIN"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_TR_PBOC_MAIN" 
	ADD CONSTRAINT "P_PK_TR_PBOC_MAIN" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_PBOC_MAIN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_PBOC_MAIN" TO USER "SCDB    ";


-- SCDB.TBL_TR_PBOC_TEMP definition

CREATE TABLE "SCDB    "."TBL_TR_PBOC_TEMP"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_TR_PBOC_TEMP" 
	ADD CONSTRAINT "P_PK_PBOC_TEMP" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_PBOC_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：银行卡汇总
  --输入：batch_date  运营日，tbl_tr_PBOC_temp为数据源
  --输出：tbl_batch_PBOC_settle_trans ,(tbl_batch_PBOC_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR PBOC_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_PBOC_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_PBOC_settle_trans tbl_batch_PBOC_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_PBOC_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_PBOC_settle_data WHERE settle_date = batch_date;
       
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_PBOC_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(PBOC.device_nid,3,2)),PBOC.settle_date, trans_date, station_nid, PBOC.device_nid, ticket_type,trans_type, 
             payment_method, PBOC.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_PBOC_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) PBOC       			   
        			  ON  PBOC.operator_id    =	shift.operator_id
        			  AND PBOC.device_nid		 =	shift.device_nid
              	AND PBOC.trans_time		 >= shift.trans_start
              	AND PBOC.trans_time		 <= shift.trans_end
              	AND PBOC.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND PBOC.shift_info 		 =  shift.shift_info
            GROUP BY PBOC.settle_date, PBOC.trans_date, PBOC.station_nid, PBOC.device_nid, ticket_type,trans_type,payment_method, 
                     PBOC.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_PBOC_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_PBOC_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_PBOC_settle_head IN PBOC_settle_cur
      LOOP
        rec_PBOC_settle_trans.line_nid        := rec_PBOC_settle_head.line_nid;
        rec_PBOC_settle_trans.settle_date     := rec_PBOC_settle_head.settle_date;
        rec_PBOC_settle_trans.trans_date      := rec_PBOC_settle_head.trans_date;
        rec_PBOC_settle_trans.operator_id     := rec_PBOC_settle_head.operator_id;
        rec_PBOC_settle_trans.shift_info      := rec_PBOC_settle_head.shift_info;
        rec_PBOC_settle_trans.trans_start     := rec_PBOC_settle_head.trans_start;
        rec_PBOC_settle_trans.trans_end       := rec_PBOC_settle_head.trans_end;
        rec_PBOC_settle_trans.station_nid     := rec_PBOC_settle_head.station_nid;
        rec_PBOC_settle_trans.device_nid      := rec_PBOC_settle_head.device_nid;
        rec_PBOC_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_PBOC_settle_head.device_nid,1, 2));
        rec_PBOC_settle_trans.ticket_type     := rec_PBOC_settle_head.ticket_type;
        rec_PBOC_settle_trans.payment_method  := rec_PBOC_settle_head.payment_method;
        rec_PBOC_settle_trans.ticket_category := CCDB_STD.C_TC_PBOC;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.sale_count, rec_PBOC_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_PBOC_settle_trans.in_count
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.out_count, rec_PBOC_settle_trans.out_amount
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_OUT;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.load_count, rec_PBOC_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_PBOC_settle_trans.UPDATE_COUNT, rec_PBOC_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND device_nid			= rec_PBOC_settle_trans.device_nid
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE;

 
 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OUT_COUNT, rec_pboc_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_IN_COUNT, rec_pboc_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_TIME_COUNT, rec_pboc_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_RUN_COUNT, rec_pboc_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_pboc_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_pboc_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_pboc_settle_data
         WHERE trans_date 		= rec_pboc_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_pboc_settle_trans.operator_id
           AND ticket_type 		= rec_pboc_settle_trans.ticket_type
           AND device_nid			= rec_pboc_settle_trans.device_nid
           AND payment_method = rec_pboc_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_PBOC_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.refund_count, rec_PBOC_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_PBOC_settle_trans.REFUND_DELAY_COUNT, rec_PBOC_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_PBOC_settle_trans.deposit_COUNT,rec_PBOC_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND device_nid 		= rec_PBOC_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_PBOC_settle_trans.trans_fee_COUNT,rec_PBOC_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_PBOC_settle_data
         WHERE trans_date 		= rec_PBOC_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_PBOC_settle_trans.operator_id
           AND ticket_type 		= rec_PBOC_settle_trans.ticket_type
           AND payment_method = rec_PBOC_settle_head.payment_method
           AND device_nid		  = rec_PBOC_settle_trans.device_nid
           AND shift_info			= rec_PBOC_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_pboc_settle_trans.fault_count,rec_pboc_settle_trans.fault_amount
          FROM DUAL;

        INSERT INTO tbl_batch_PBOC_settle_trans VALUES rec_PBOC_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PBOC_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_PBOC_TEMP" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_PBOC_TEMP" TO USER "SCDB    ";


-- SCDB.TBL_TR_QR_ERROR definition

CREATE TABLE "SCDB    "."TBL_TR_QR_ERROR"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(20) , 
		  "CARD_PHY_ID" VARCHAR(20) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_QR_ERROR" TO USER "SCDB    ";


-- SCDB.TBL_TR_QR_MAIN definition

CREATE TABLE "SCDB    "."TBL_TR_QR_MAIN"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(20) , 
		  "CARD_PHY_ID" VARCHAR(20) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_TR_QR_MAIN" 
	ADD CONSTRAINT "P_PK_TR_QR_MAIN" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_QR_MAIN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_QR_MAIN" TO USER "SCDB    ";


-- SCDB.TBL_TR_QR_TEMP definition

CREATE TABLE "SCDB    "."TBL_TR_QR_TEMP"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(20) , 
		  "CARD_PHY_ID" VARCHAR(20) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_TR_QR_TEMP" 
	ADD CONSTRAINT "P_PK_TR_QR_TEMP" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_QR_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：二维码票卡汇总
  --输入：batch_date  运营日，tbl_tr_QR_temp为数据源
  --输出：tbl_batch_QR_settle_trans ,(tbl_batch_QR_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR QR_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end  
        FROM tbl_batch_QR_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end  ;
                
    --local variable
    rec_QR_settle_trans tbl_batch_QR_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_QR_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_QR_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_QR_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type )
       SELECT to_number(substr(QR.device_nid,3,2)),QR.settle_date, trans_date, station_nid, QR.device_nid, ticket_type,trans_type, 
             payment_method, QR.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type 
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit,update_type 
                 FROM tbl_tr_QR_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) QR       			   
        			  ON  QR.operator_id    =	shift.operator_id
        			  AND QR.device_nid		 =	shift.device_nid
              	AND QR.trans_time		 >= shift.trans_start
              	AND QR.trans_time		 <= shift.trans_end
              	AND QR.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND QR.shift_info 		 =  shift.shift_info
            GROUP BY QR.settle_date, QR.trans_date, QR.station_nid, QR.device_nid, ticket_type,trans_type,payment_method, 
                     QR.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,update_type  ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_QR_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_QR_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_QR_settle_head IN QR_settle_cur
      LOOP
        rec_QR_settle_trans.line_nid        := rec_QR_settle_head.line_nid;
        rec_QR_settle_trans.settle_date     := rec_QR_settle_head.settle_date;
        rec_QR_settle_trans.trans_date      := rec_QR_settle_head.trans_date;
        rec_QR_settle_trans.operator_id     := rec_QR_settle_head.operator_id;
        rec_QR_settle_trans.shift_info      := rec_QR_settle_head.shift_info;
        rec_QR_settle_trans.trans_start     := rec_QR_settle_head.trans_start;
        rec_QR_settle_trans.trans_end       := rec_QR_settle_head.trans_end;
        rec_QR_settle_trans.station_nid     := rec_QR_settle_head.station_nid;
        rec_QR_settle_trans.device_nid      := rec_QR_settle_head.device_nid;
        rec_QR_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_QR_settle_head.device_nid,1, 2));
        rec_QR_settle_trans.ticket_type     := rec_QR_settle_head.ticket_type;
        rec_QR_settle_trans.payment_method  := rec_QR_settle_head.payment_method;
        rec_QR_settle_trans.ticket_category := CCDB_STD.C_TC_QR;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.sale_count, rec_QR_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_QR_settle_trans.in_count
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_IN;
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.out_count, rec_QR_settle_trans.out_amount
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 	  IN (CCDB_STD.C_TRT_QR_OUT,CCDB_STD.C_TRT_QR_OUT1,CCDB_STD.C_TRT_QR_OUT2,CCDB_STD.C_TRT_QR_OUT3,CCDB_STD.C_TRT_QR_OUT4,CCDB_STD.C_TRT_QR_OUT5);

        --充值
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.load_count, rec_QR_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_QR_settle_trans.UPDATE_COUNT, rec_QR_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND device_nid			= rec_QR_settle_trans.device_nid
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_QR_UPDATE,CCDB_STD.C_TRT_QR_UPDATE1,CCDB_STD.C_TRT_QR_UPDATE2);

 			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OUT_COUNT, rec_qr_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_IN_COUNT, rec_qr_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_TIME_COUNT, rec_qr_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_RUN_COUNT, rec_qr_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_qr_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_qr_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_qr_settle_data
         WHERE trans_date 		= rec_qr_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_qr_settle_trans.operator_id
           AND ticket_type 		= rec_qr_settle_trans.ticket_type
           AND device_nid			= rec_qr_settle_trans.device_nid
           AND payment_method = rec_qr_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_QR_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
        --退票
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.refund_count, rec_QR_settle_trans.refund_amount
          FROM DUAL;
                 
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_QR_settle_trans.REFUND_DELAY_COUNT, rec_QR_settle_trans.REFUND_DELAY_AMOUNT
          FROM DUAL;
 
    	--押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_QR_settle_trans.deposit_COUNT,rec_QR_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND device_nid 		= rec_QR_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_QR_settle_trans.trans_fee_COUNT,rec_QR_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_QR_settle_data
         WHERE trans_date 		= rec_QR_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_QR_settle_trans.operator_id
           AND ticket_type 		= rec_QR_settle_trans.ticket_type
           AND payment_method = rec_QR_settle_head.payment_method
           AND device_nid		  = rec_QR_settle_trans.device_nid
           AND shift_info			= rec_QR_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_qr_settle_trans.fault_count,rec_qr_settle_trans.fault_amount
          FROM dual;
 
        INSERT INTO tbl_batch_QR_settle_trans VALUES rec_QR_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_QR_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_QR_TEMP" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_QR_TEMP" TO USER "SCDB    ";


-- SCDB.TBL_TR_SJT_ERROR definition

CREATE TABLE "SCDB    "."TBL_TR_SJT_ERROR"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(10,0) , 
		  "TICKETFAMILY" DECIMAL(10,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "MEDIA_TYPE" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "DURATION" DECIMAL(5,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "RECYCLE_FLAG" DECIMAL(5,0) , 
		  "TICKET_VALUE" DECIMAL(10,0) , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_TR_SJT_ERROR"."IS_TEST" IS '0: 非测试票，1：测试票';

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_SJT_ERROR" TO USER "SCDB    ";


-- SCDB.TBL_TR_SJT_MAIN definition

CREATE TABLE "SCDB    "."TBL_TR_SJT_MAIN"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(10,0) , 
		  "TICKETFAMILY" DECIMAL(10,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "MEDIA_TYPE" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "DURATION" DECIMAL(5,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "RECYCLE_FLAG" DECIMAL(5,0) , 
		  "TICKET_VALUE" DECIMAL(10,0) , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_TR_SJT_MAIN"."IS_TEST" IS '0: 非测试票，1：测试票';

ALTER TABLE "SCDB    "."TBL_TR_SJT_MAIN" 
	ADD CONSTRAINT "P_PK_TR_SJT_MAIN" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_SJT_MAIN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_SJT_MAIN" TO USER "SCDB    ";


-- SCDB.TBL_TR_SJT_TEMP definition

CREATE TABLE "SCDB    "."TBL_TR_SJT_TEMP"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(10,0) , 
		  "TICKETFAMILY" DECIMAL(10,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "MEDIA_TYPE" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "DURATION" DECIMAL(5,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "RECYCLE_FLAG" DECIMAL(5,0) , 
		  "TICKET_VALUE" DECIMAL(10,0) , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "UPDATE_TYPE" DECIMAL(10,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_TR_SJT_TEMP"."IS_TEST" IS '0: 非测试票，1：测试票';

ALTER TABLE "SCDB    "."TBL_TR_SJT_TEMP" 
	ADD CONSTRAINT "P_PK_TR_SJT_TEMP" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SJT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_sjt_temp为数据源
  --输出：tbl_batch_sjt_settle_trans ,(tbl_batch_sjt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR sjt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_sjt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_sjt_settle_trans tbl_batch_sjt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SJT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval; 
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
  
    DELETE FROM tbl_batch_sjt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_SJT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,UPDATE_TYPE)
       SELECT to_number(substr(sjt.device_nid,3,2)),sjt.settle_date, trans_date, station_nid, sjt.device_nid, ticket_type,trans_type, 
             payment_method, sjt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, 0 deposit ,update_type
                 FROM tbl_tr_sjt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) sjt       			   
        			  ON  sjt.operator_id    =	shift.operator_id
        			  AND sjt.device_nid		 =	shift.device_nid
              	AND sjt.trans_time		 >= shift.trans_start
              	AND sjt.trans_time		 <= shift.trans_end
              	AND sjt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND sjt.shift_info 		 =  shift.shift_info
            GROUP BY sjt.settle_date, sjt.trans_date, sjt.station_nid, sjt.device_nid, ticket_type,trans_type,payment_method, 
                     sjt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,sjt.update_type ;
       
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_sjt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
      
      
    ---HHJT_CJP 20190815 互联网单程票退票 支付方式更改为 C_PM_QR(6) 互联网单程票(TICKET_TYPE 9)
    UPDATE tbl_batch_sjt_settle_data
    	 SET PAYMENT_METHOD =  CCDB_STD.C_PM_QR
     WHERE TICKET_TYPE = 9
     	 AND TRANS_TYPE  = CCDB_STD.C_TRT_SJT_REFUND
     	 AND SETTLE_DATE = BATCH_DATE ;
  		
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_sjt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_sjt_settle_head IN sjt_settle_cur
      LOOP
        rec_sjt_settle_trans.line_nid        := rec_sjt_settle_head.line_nid;
        rec_sjt_settle_trans.settle_date     := rec_sjt_settle_head.settle_date;
        rec_sjt_settle_trans.trans_date      := rec_sjt_settle_head.trans_date;
        rec_sjt_settle_trans.operator_id     := rec_sjt_settle_head.operator_id;
        rec_sjt_settle_trans.shift_info      := rec_sjt_settle_head.shift_info;
        rec_sjt_settle_trans.trans_start     := rec_sjt_settle_head.trans_start;
        rec_sjt_settle_trans.trans_end       := rec_sjt_settle_head.trans_end;
        rec_sjt_settle_trans.station_nid     := rec_sjt_settle_head.station_nid;
        rec_sjt_settle_trans.device_nid      := rec_sjt_settle_head.device_nid;
        rec_sjt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_sjt_settle_head.device_nid,1, 2));
        rec_sjt_settle_trans.ticket_type     := rec_sjt_settle_head.ticket_type;
        rec_sjt_settle_trans.payment_method  := rec_sjt_settle_head.payment_method;
        rec_sjt_settle_trans.ticket_category := CCDB_STD.C_TC_SJT;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.sale_count, rec_sjt_settle_trans.sale_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_SJT_SALE,CCDB_STD.C_TRT_SJT_SALE1,CCDB_STD.C_TRT_SJT_SALE2);
           --AND trans_type  		= CCDB_STD.C_TRT_SJT_SALE;
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_sjt_settle_trans.in_count
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_IN,CCDB_STD.C_TRT_SJT_IN1);
           --AND trans_type 		= CCDB_STD.C_TRT_SJT_IN
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.out_count, rec_sjt_settle_trans.out_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_OUT,CCDB_STD.C_TRT_SJT_OUT1,CCDB_STD.C_TRT_SJT_OUT2,CCDB_STD.C_TRT_SJT_OUT3,CCDB_STD.C_TRT_SJT_OUT4,CCDB_STD.C_TRT_SJT_OUT5
           											 ,CCDB_STD.C_TRT_SJT_OUT6,CCDB_STD.C_TRT_SJT_OUT7,CCDB_STD.C_TRT_SJT_OUT8,CCDB_STD.C_TRT_SJT_OUT9,CCDB_STD.C_TRT_SJT_OUT10,CCDB_STD.C_TRT_SJT_OUT11);
					 --AND trans_type 		= CCDB_STD.C_TRT_SJT_OUT
        --充值
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.load_count, rec_sjt_settle_trans.load_amount
          FROM tbl_batch_sjt_settle_data;

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_COUNT, rec_sjt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_SJT_UPDATE,CCDB_STD.C_TRT_SJT_UPDATE1,CCDB_STD.C_TRT_SJT_UPDATE2,CCDB_STD.C_TRT_SJT_UPDATE3,CCDB_STD.C_TRT_SJT_UPDATE4,CCDB_STD.C_TRT_SJT_UPDATE5,CCDB_STD.C_TRT_SJT_UPDATE6);


				--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OUT_COUNT, rec_sjt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_IN_COUNT, rec_sjt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_sjt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_sjt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_sjt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND device_nid			= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_sjt_settle_trans.refund_count, rec_sjt_settle_trans.refund_amount
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type		= rec_sjt_settle_trans.ticket_type
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SJT_REFUND;          
           
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.REFUND_DELAY_COUNT, rec_sjt_settle_trans.REFUND_DELAY_AMOUNT
          FROM tbl_batch_sjt_settle_data;
 
    	--押金 发售（0X01）收押金 退卡（0x06）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 1, 1,6,-1, 0)), 0)
          INTO rec_sjt_settle_trans.deposit_COUNT,rec_sjt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid 		= rec_sjt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_sjt_settle_trans.trans_fee_COUNT,rec_sjt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_sjt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_sjt_settle_trans.operator_id
           AND ticket_type 		= rec_sjt_settle_trans.ticket_type
           AND payment_method = rec_sjt_settle_head.payment_method
           AND shift_info			= rec_sjt_settle_trans.shift_info
           AND device_nid		  = rec_sjt_settle_trans.device_nid
           AND TRANS_FEE > 0;
           
        --故障退款
        SELECT sum(0), sum(0)
          INTO rec_sjt_settle_trans.fault_count,rec_sjt_settle_trans.fault_amount
          FROM dual;
          
           

        INSERT INTO tbl_batch_sjt_settle_trans VALUES rec_sjt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SJT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_SJT_TEMP" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_SJT_TEMP" TO USER "SCDB    ";


-- SCDB.TBL_TR_SVT_ERROR definition

CREATE TABLE "SCDB    "."TBL_TR_SVT_ERROR"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "OVER_LIMIT_VALUE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "DEPOSIT_VALUE" DECIMAL(10,0) , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP NOT NULL WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_TR_SVT_ERROR"."IS_TEST" IS '0: 非测试票，1：测试票';

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_SVT_ERROR" TO USER "SCDB    ";


-- SCDB.TBL_TR_SVT_MAIN definition

CREATE TABLE "SCDB    "."TBL_TR_SVT_MAIN"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "OVER_LIMIT_VALUE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "DEPOSIT_VALUE" DECIMAL(10,0) , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP NOT NULL WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_TR_SVT_MAIN"."IS_TEST" IS '0: 非测试票，1：测试票';

ALTER TABLE "SCDB    "."TBL_TR_SVT_MAIN" 
	ADD CONSTRAINT "P_PK_TR_SVT_MAIN" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_SVT_MAIN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_SVT_MAIN" TO USER "SCDB    ";


-- SCDB.TBL_TR_SVT_TEMP definition

CREATE TABLE "SCDB    "."TBL_TR_SVT_TEMP"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "OVER_LIMIT_VALUE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "DEPOSIT_VALUE" DECIMAL(10,0) , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP NOT NULL WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."TBL_TR_SVT_TEMP"."IS_TEST" IS '0: 非测试票，1：测试票';

ALTER TABLE "SCDB    "."TBL_TR_SVT_TEMP" 
	ADD CONSTRAINT "P_PK_TR_SVT_TEMP" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_CARD_LOCK(batch_date IN VARCHAR(200))
IS
   --======================================================================
  --功能：黑名单锁卡 
  --输入：batch_date  运营日，tbl_tr_yct_load_temp，tbl_tr_cit_temp 
  --数据源： tbl_tr_svt_temp
  --输出：tbl_batch_card_lock_detail 
  --备注：HHJT_CJP 20190809
  --======================================================================

    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.8.9)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_CARD_LOCK';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
  
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_card_lock_detail WHERE settle_date = batch_date;
 
    --SVT
    INSERT INTO tbl_batch_card_lock_detail
      (line_nid,settle_date, trans_date, station_nid, ticket_category, ticket_type, trans_type,
       card_id, card_phy_id, trans_time, device_nid)
      SELECT to_number(substr(device_nid,3,2)),settle_date,
             to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60), 'yyyyMMdd'),
             station_nid, CCDB_STD.C_TC_SVT, ticket_type, trans_type, card_id,
             card_phy_id, trans_time, device_nid
        FROM tbl_tr_svt_temp
       WHERE settle_date = batch_date
         AND trans_type = CCDB_STD.C_TRT_SVT_LOCK;

 
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_CARD_LOCK', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_SVT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_svt_temp为数据源
  --输出：tbl_batch_svt_settle_trans ,(tbl_batch_svt_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR svt_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_svt_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_svt_settle_trans tbl_batch_svt_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_SVT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_svt_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_svt_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(svt.device_nid,3,2)),svt.settle_date, trans_date, station_nid, svt.device_nid, ticket_type,trans_type, 
             payment_method, svt.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_svt_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) svt       			   
        			  ON  svt.operator_id    =	shift.operator_id
        			  AND svt.device_nid		 =	shift.device_nid
              	AND svt.trans_time		 >= shift.trans_start
              	AND svt.trans_time		 <= shift.trans_end
              	AND svt.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND svt.shift_info 		 =  shift.shift_info
            GROUP BY svt.settle_date, svt.trans_date, svt.station_nid, svt.device_nid, ticket_type,trans_type,payment_method, 
                     svt.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end,svt.update_type ;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_svt_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_svt_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_svt_settle_head IN svt_settle_cur
      LOOP
        rec_svt_settle_trans.line_nid        := rec_svt_settle_head.line_nid;
        rec_svt_settle_trans.settle_date     := rec_svt_settle_head.settle_date;
        rec_svt_settle_trans.trans_date      := rec_svt_settle_head.trans_date;
        rec_svt_settle_trans.operator_id     := rec_svt_settle_head.operator_id;
        rec_svt_settle_trans.shift_info      := rec_svt_settle_head.shift_info;
        rec_svt_settle_trans.trans_start     := rec_svt_settle_head.trans_start;
        rec_svt_settle_trans.trans_end       := rec_svt_settle_head.trans_end;
        rec_svt_settle_trans.station_nid     := rec_svt_settle_head.station_nid;
        rec_svt_settle_trans.device_nid      := rec_svt_settle_head.device_nid;
        rec_svt_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_svt_settle_head.device_nid,1, 2));
        rec_svt_settle_trans.ticket_type     := rec_svt_settle_head.ticket_type;
        rec_svt_settle_trans.payment_method  := rec_svt_settle_head.payment_method;
        rec_svt_settle_trans.ticket_category := CCDB_STD.C_TC_svt;
      
        --售票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.sale_count, rec_svt_settle_trans.sale_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type  		IN (CCDB_STD.C_TRT_svt_SALE,CCDB_STD.C_TRT_svt_SALE1);
      
        --进站
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_svt_settle_trans.in_count
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_IN,CCDB_STD.C_TRT_svt_IN1);
           
        --出站
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.out_count, rec_svt_settle_trans.out_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_OUT,CCDB_STD.C_TRT_svt_OUT1,CCDB_STD.C_TRT_svt_OUT2,CCDB_STD.C_TRT_svt_OUT3,CCDB_STD.C_TRT_svt_OUT4,CCDB_STD.C_TRT_svt_OUT5
           											 ,CCDB_STD.C_TRT_svt_OUT6,CCDB_STD.C_TRT_svt_OUT7,CCDB_STD.C_TRT_svt_OUT8,CCDB_STD.C_TRT_svt_OUT9,CCDB_STD.C_TRT_svt_OUT10,CCDB_STD.C_TRT_svt_OUT11);

        --充值
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.load_count, rec_svt_settle_trans.load_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_LOAD,CCDB_STD.C_TRT_svt_LOAD1);

      
     		--更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_COUNT, rec_svt_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		IN (CCDB_STD.C_TRT_svt_UPDATE,CCDB_STD.C_TRT_svt_UPDATE1,CCDB_STD.C_TRT_svt_UPDATE2,CCDB_STD.C_TRT_svt_UPDATE3,CCDB_STD.C_TRT_svt_UPDATE4,CCDB_STD.C_TRT_svt_UPDATE5,CCDB_STD.C_TRT_svt_UPDATE6);

			--出站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OUT_COUNT, rec_svt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_IN_COUNT, rec_svt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_svt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_svt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_svt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND device_nid			= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_SVT_UPDATE
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;

 
 
        --退票
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_count, rec_svt_settle_trans.refund_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND;          
           
        --延时退卡
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_svt_settle_trans.refund_delay_count, rec_svt_settle_trans.refund_delay_amount
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type		= rec_svt_settle_trans.ticket_type
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND trans_type 		= CCDB_STD.C_TRT_svt_REFUND_DELAY; 
 
    	--押金 发售（0X0B）收押金 退卡（0x14,0X15）退押金 
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT * decode(trans_type, 11, 1,20,-1,21,-1,0)), 0)
          INTO rec_svt_settle_trans.deposit_COUNT,rec_svt_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid 		= rec_svt_settle_trans.device_nid
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_svt_settle_trans.trans_fee_COUNT,rec_svt_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_svt_settle_data
         WHERE trans_date 		= rec_svt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_svt_settle_trans.operator_id
           AND ticket_type 		= rec_svt_settle_trans.ticket_type
           AND payment_method = rec_svt_settle_head.payment_method
           AND shift_info			= rec_svt_settle_trans.shift_info
           AND device_nid		  = rec_svt_settle_trans.device_nid
           AND TRANS_FEE > 0;

 		--故障退款
        SELECT sum(0), sum(0)
          INTO rec_svt_settle_trans.fault_count,rec_svt_settle_trans.fault_amount
          FROM dual;


        INSERT INTO tbl_batch_svt_settle_trans VALUES rec_svt_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_SVT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_SVT_TEMP" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_SVT_TEMP" TO USER "SCDB    ";


-- SCDB.TBL_TR_YKT_ERROR definition

CREATE TABLE "SCDB    "."TBL_TR_YKT_ERROR"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "OVER_LIMIT_VALUE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "DEPOSIT_VALUE" DECIMAL(10,0) , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "LOCAL_IDENTIFYCATION" DECIMAL(1,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_YKT_ERROR" TO USER "SCDB    ";


-- SCDB.TBL_TR_YKT_MAIN definition

CREATE TABLE "SCDB    "."TBL_TR_YKT_MAIN"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "OVER_LIMIT_VALUE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "DEPOSIT_VALUE" DECIMAL(10,0) , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "LOCAL_IDENTIFYCATION" DECIMAL(1,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_TR_YKT_MAIN" 
	ADD CONSTRAINT "P_PK_TR_YKT_MAIN" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_YKT_MAIN" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_YKT_MAIN" TO USER "SCDB    ";


-- SCDB.TBL_TR_YKT_TEMP definition

CREATE TABLE "SCDB    "."TBL_TR_YKT_TEMP"  (
		  "PACKET_SEQ" DECIMAL(10,0) , 
		  "TRANS_TYPE" DECIMAL(5,0) , 
		  "TICKET_TYPE" DECIMAL(3,0) , 
		  "CARD_ID" VARCHAR(24) , 
		  "CARD_PHY_ID" VARCHAR(16) NOT NULL , 
		  "IS_TEST" DECIMAL(1,0) , 
		  "SAM_ID" DECIMAL(10,0) , 
		  "CARD_COUNT" DECIMAL(10,0) , 
		  "PRE_TRANS_VALUE" DECIMAL(10,0) , 
		  "VALID_DATE" CHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_VALUE" DECIMAL(10,0) , 
		  "OVER_LIMIT_VALUE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "UPDATE_TYPE" DECIMAL(10,0) WITH DEFAULT 0.0 , 
		  "DEPOSIT_VALUE" DECIMAL(10,0) , 
		  "TRANS_ACCOUNT_VALUE" DECIMAL(10,0) , 
		  "POST_TRANS_VALUE" DECIMAL(10,0) , 
		  "LAST_STATION_NID" CHAR(4) , 
		  "ENTRY_TIME" TIMESTAMP , 
		  "TRANS_TIME" TIMESTAMP NOT NULL , 
		  "TACSAM_ID" DECIMAL(10,0) , 
		  "CITY_CODE" DECIMAL(10,0) , 
		  "LINE_NID" CHAR(2) , 
		  "STATION_NID" CHAR(4) , 
		  "DEVICE_NID" CHAR(8) NOT NULL , 
		  "MODE_CODE" DECIMAL(3,0) , 
		  "DEVICE_TRACE_NBR" DECIMAL(10,0) , 
		  "PAYMENT_METHOD" DECIMAL(3,0) , 
		  "LOCAL_IDENTIFYCATION" DECIMAL(1,0) , 
		  "TAC" VARCHAR(8) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS ((TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd'))) )   
		 IN "TBSCCDBTRANS" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."TBL_TR_YKT_TEMP" 
	ADD CONSTRAINT "P_PK_TR_YKT_TEMP" PRIMARY KEY
		("CARD_PHY_ID",
		 "TRANS_TIME",
		 "DEVICE_NID",
		 "TAC");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_YKT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，tbl_tr_YKT_temp为数据源
  --输出：tbl_batch_YKT_settle_trans ,(tbl_batch_YKT_settle_data为中间表)
  --备注：HHJT_CJP 20190809
  --=============================================================================
   
    CURSOR YKT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_YKT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_YKT_settle_trans tbl_batch_YKT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_YKT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_YKT_settle_data WHERE settle_date = batch_date;
    
    
    --初始化统计-放入汇总表
   INSERT INTO	TBL_BATCH_YKT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END,update_type)
       SELECT to_number(substr(YKT.device_nid,3,2)),YKT.settle_date, trans_date, station_nid, YKT.device_nid, ticket_type,trans_type, 
             payment_method, YKT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end,update_type
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(trans_time -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      trans_time,station_nid, device_nid,ticket_type, trans_type,
                      payment_method, operator_id,shift_info, trans_value  value_trans,
                      0 trans_fee, DEPOSIT_VALUE deposit,update_type
                 FROM tbl_tr_YKT_temp
                WHERE settle_date = BATCH_DATE       			 
        			 ) YKT       			   
        			  ON  YKT.operator_id    =	shift.operator_id
        			  AND YKT.device_nid		 =	shift.device_nid
              	AND YKT.trans_time		 >= shift.trans_start
              	AND YKT.trans_time		 <= shift.trans_end
              	AND YKT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND YKT.shift_info 		 =  shift.shift_info
            GROUP BY YKT.settle_date, YKT.trans_date, YKT.station_nid, YKT.device_nid, ticket_type,trans_type,payment_method, 
                     YKT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ,update_type;
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_YKT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_YKT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_YKT_settle_head IN YKT_settle_cur
      LOOP
        rec_YKT_settle_trans.line_nid        := rec_YKT_settle_head.line_nid;
        rec_YKT_settle_trans.settle_date     := rec_YKT_settle_head.settle_date;
        rec_YKT_settle_trans.trans_date      := rec_YKT_settle_head.trans_date;
        rec_YKT_settle_trans.operator_id     := rec_YKT_settle_head.operator_id;
        rec_YKT_settle_trans.shift_info      := rec_YKT_settle_head.shift_info;
        rec_YKT_settle_trans.trans_start     := rec_YKT_settle_head.trans_start;
        rec_YKT_settle_trans.trans_end       := rec_YKT_settle_head.trans_end;
        rec_YKT_settle_trans.station_nid     := rec_YKT_settle_head.station_nid;
        rec_YKT_settle_trans.device_nid      := rec_YKT_settle_head.device_nid;
        rec_YKT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_YKT_settle_head.device_nid,1, 2));
        rec_YKT_settle_trans.ticket_type     := rec_YKT_settle_head.ticket_type;
        rec_YKT_settle_trans.payment_method  := rec_YKT_settle_head.payment_method;
        rec_YKT_settle_trans.ticket_category := CCDB_STD.C_TC_YKT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.sale_count, rec_YKT_settle_trans.sale_amount
          FROM DUAL;
        
      
        --进站 ---0x83 一卡通进站  ---0x93 交通部CPU卡进站 
        SELECT NVL(SUM(SETTLE_COUNT), 0)
          INTO rec_YKT_settle_trans.in_count
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5001,5901);
           
        --出站 ---0x84 一卡通出站    ---0x94 交通部CPU卡出站  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.out_count, rec_YKT_settle_trans.out_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5002,5003,5004,5007,5008,5009,5902,5903,5904,5907,5908,5909);  

     
        --充值 ---0x96 交通部CPU卡充值  
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.load_count, rec_YKT_settle_trans.load_amount
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN (5301,5302) ;

      
     		--更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
     		 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_YKT_settle_trans.UPDATE_COUNT, rec_YKT_settle_trans.UPDATE_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND device_nid			= rec_YKT_settle_trans.device_nid
           AND payment_method = rec_YKT_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(5200,5201,5202,5203,5204,5205,5206,5701,5702,5703,5704,5705,5706);

 				--出站更新 ---0x85一卡通更新 ---0x95 交通部CPU卡更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OUT_COUNT, rec_ykt_settle_trans.UPDATE_OUT_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OUT;
				
				
				--进站更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_IN_COUNT, rec_ykt_settle_trans.UPDATE_IN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_IN;
				
				
				--超时更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_TIME_COUNT, rec_ykt_settle_trans.UPDATE_OVER_TIME_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_TIME;


				--超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_RUN_COUNT, rec_ykt_settle_trans.UPDATE_OVER_RUN_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_RUN;

			--超时且超程更新
				 SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_ykt_settle_trans.UPDATE_OVER_BOTH_COUNT, rec_ykt_settle_trans.UPDATE_OVER_BOTH_AMOUNT
          FROM tbl_batch_sjt_settle_data
         WHERE trans_date 		= rec_ykt_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_ykt_settle_trans.operator_id
           AND ticket_type 		= rec_ykt_settle_trans.ticket_type
           AND device_nid			= rec_ykt_settle_trans.device_nid
           AND payment_method = rec_ykt_settle_head.payment_method
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND trans_type 		IN(133,149)
           AND UPDATE_TYPE    = CCDB_STD.C_UPT_OVER_BOTH;
 
  
        --退票
         SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_count, rec_YKT_settle_trans.refund_amount
          FROM DUAL;
 
        --延时退卡
        SELECT sum(0), sum(0)
          INTO rec_YKT_settle_trans.refund_delay_count, rec_YKT_settle_trans.refund_delay_amount
          FROM DUAL;
 
    	--押金   
        SELECT NVL(COUNT(*), 0),NVL(SUM(DEPOSIT), 0)
          INTO rec_YKT_settle_trans.deposit_COUNT,rec_YKT_settle_trans.DEPOSIT_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid 		= rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND DEPOSIT > 0;

        --手续费
        SELECT NVL(COUNT(*), 0),NVL(SUM(TRANS_FEE), 0)
          INTO rec_YKT_settle_trans.trans_fee_COUNT,rec_YKT_settle_trans.trans_fee_AMOUNT
          FROM tbl_batch_YKT_settle_data
         WHERE trans_date 		= rec_YKT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_YKT_settle_trans.operator_id
           AND ticket_type 		= rec_YKT_settle_trans.ticket_type
           AND payment_method = rec_YKT_settle_head.payment_method
           AND device_nid		  = rec_YKT_settle_trans.device_nid
           AND shift_info			= rec_YKT_settle_trans.shift_info
           AND TRANS_FEE > 0;
           
       --故障退款
        SELECT sum(0), sum(0)
          INTO rec_ykt_settle_trans.fault_count,rec_ykt_settle_trans.fault_amount
          FROM dual;

        INSERT INTO tbl_batch_YKT_settle_trans VALUES rec_YKT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_YKT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TBL_TR_YKT_TEMP" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_TR_YKT_TEMP" TO USER "SCDB    ";


-- SCDB.TEMP_OPERATOR_SHIFT definition

CREATE TABLE "SCDB    "."TEMP_OPERATOR_SHIFT"  (
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "OPERATOR_ID" DECIMAL(8,0) , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANS_START" TIMESTAMP , 
		  "TRANS_END" TIMESTAMP , 
		  "SETTLE_DATE" VARCHAR(8) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBACCIDX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."TEMP_OPERATOR_SHIFT" TO USER "SCDB    ";


-- SCDB.T_7004_TVM definition

CREATE TABLE "SCDB    "."T_7004_TVM"  (
		  "SLE_ID" VARCHAR(8) NOT NULL , 
		  "CHATSEQ" DECIMAL(10,0) NOT NULL , 
		  "TRANSACTION_TIME" VARCHAR(14) NOT NULL , 
		  "VALURE_TRANSACTION" DECIMAL(10,0) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP NOT NULL WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_7004_TVM" 
	ADD CONSTRAINT "PK_7004_TVM" PRIMARY KEY
		("SLE_ID",
		 "TRANSACTION_TIME");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，T_7004_TVM ,T_7005_BOM 为数据源
  --输出：tbl_batch_FAULT_settle_trans ,(tbl_batch_FAULT_settle_data为中间表)
  --备注：HHJT_CJP 20191002
  --=============================================================================
   
    CURSOR FAULT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_FAULT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_FAULT_settle_trans tbl_batch_FAULT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_FAULT_settle_data WHERE settle_date = batch_date;
 
    --初始化统计-放入汇总表
    --TVM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FALUT_TVM ticket_type, CCDB_STD.C_FALUT_TVM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, 0 operator_id,0 SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7004_TVM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
                     
                     
    --BOM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FAULT_BOM ticket_type, CCDB_STD.C_FAULT_BOM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, OPERATOR_NBR operator_id,SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7005_BOM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
        			 
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_FAULT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_FAULT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_FAULT_settle_head IN FAULT_settle_cur
      LOOP
        rec_FAULT_settle_trans.line_nid        := rec_FAULT_settle_head.line_nid;
        rec_FAULT_settle_trans.settle_date     := rec_FAULT_settle_head.settle_date;
        rec_FAULT_settle_trans.trans_date      := rec_FAULT_settle_head.trans_date;
        rec_FAULT_settle_trans.operator_id     := rec_FAULT_settle_head.operator_id;
        rec_FAULT_settle_trans.shift_info      := rec_FAULT_settle_head.shift_info;
        rec_FAULT_settle_trans.trans_start     := rec_FAULT_settle_head.trans_start;
        rec_FAULT_settle_trans.trans_end       := rec_FAULT_settle_head.trans_end;
        rec_FAULT_settle_trans.station_nid     := rec_FAULT_settle_head.station_nid;
        rec_FAULT_settle_trans.device_nid      := rec_FAULT_settle_head.device_nid;
        rec_FAULT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_FAULT_settle_head.device_nid,1, 2));
        rec_FAULT_settle_trans.ticket_type     := rec_FAULT_settle_head.ticket_type;
        rec_FAULT_settle_trans.payment_method  := rec_FAULT_settle_head.payment_method;
        rec_FAULT_settle_trans.ticket_category := CCDB_STD.C_TC_FAULT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.sale_count, rec_FAULT_settle_trans.sale_amount
          FROM DUAL  ;
      
        --进站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.in_count
          FROM DUAL;
           
        --出站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.out_count, rec_FAULT_settle_trans.out_amount
          FROM DUAL;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.load_count, rec_FAULT_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.UPDATE_COUNT, rec_FAULT_settle_trans.UPDATE_AMOUNT
          FROM DUAL;



				--出站更新			 
          rec_FAULT_settle_trans.UPDATE_OUT_COUNT 	 := 0;
          rec_FAULT_settle_trans.UPDATE_OUT_AMOUNT   := 0;
 	
				--进站更新
				 rec_FAULT_settle_trans.UPDATE_IN_COUNT 	  := 0;
         rec_FAULT_settle_trans.UPDATE_IN_AMOUNT    := 0;
							
				--超时更新
				 rec_FAULT_settle_trans.UPDATE_OVER_TIME_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_TIME_AMOUNT    := 0;


				--超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_RUN_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_RUN_AMOUNT     := 0;

			--超时且超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_BOTH_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_BOTH_AMOUNT    := 0;
  
        --退票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.refund_count, rec_FAULT_settle_trans.refund_amount
          FROM DUAL;          
           
        --延时退卡
        SELECT sum(0), sum(0)
        	INTO  rec_FAULT_settle_trans.refund_delay_count, rec_FAULT_settle_trans.refund_delay_amount
          FROM DUAL;
 
     		--押金  
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.deposit_COUNT,rec_FAULT_settle_trans.DEPOSIT_AMOUNT
          FROM DUAL;
          
        --手续费
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.trans_fee_COUNT,rec_FAULT_settle_trans.trans_fee_AMOUNT
          FROM DUAL;
           
        --故障退款
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_FAULT_settle_trans.fault_count,rec_FAULT_settle_trans.fault_amount
          FROM tbl_batch_FAULT_settle_data
         WHERE trans_date 		= rec_FAULT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_FAULT_settle_trans.operator_id
           AND ticket_type		= rec_FAULT_settle_trans.ticket_type
           AND device_nid 		= rec_FAULT_settle_trans.device_nid
           AND payment_method = rec_FAULT_settle_head.payment_method
           AND shift_info			= rec_FAULT_settle_trans.shift_info
           AND trans_type 		IN(254,255);  	
           
           
           

        INSERT INTO tbl_batch_FAULT_settle_trans VALUES rec_FAULT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."T_7004_TVM" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_7004_TVM" TO USER "SCDB    ";


-- SCDB.T_7005_BOM definition

CREATE TABLE "SCDB    "."T_7005_BOM"  (
		  "SLE_ID" VARCHAR(8) NOT NULL , 
		  "TVM_SLE_ID" VARCHAR(8) NOT NULL , 
		  "CHATSEQ" DECIMAL(10,0) NOT NULL , 
		  "OPERATOR_NBR" DECIMAL(8,0) NOT NULL , 
		  "SHIFT_INFO" DECIMAL(10,0) , 
		  "TRANSACTION_TIME" CHAR(14) NOT NULL , 
		  "VALURE_TRANSACTION" DECIMAL(10,0) NOT NULL , 
		  "CREATE_DATE" TIMESTAMP NOT NULL WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "SETTLE_DATE" VARCHAR(8) GENERATED ALWAYS AS (TO_CHAR(CREATE_DATE-2 hour,'yyyyMMdd')) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_7005_BOM" 
	ADD CONSTRAINT "PK_7005_BOM" PRIMARY KEY
		("SLE_ID",
		 "TRANSACTION_TIME");

CREATE PROCEDURE P_BATCH_PRE(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：根据交易明细计算操作员班次
  --输入：batch_date  运营日
  --输出： TBL_BATCH_OPERATOR_SHIFT 
  --数据源：各种交易TEMP表
  --临时表：TEMP_OPERATOR_SHIFT  
  --备注：HHJT_CJP 20190809
  --        
  --======================================================================

		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
 
    rec_temp_operator_shift  temp_operator_shift%ROWTYPE;
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= CCDB_STD.C_PROC_VERSION||'STD'||CCDB_LIB.F_SYS_GETLIBVERSION(1)||'LIB'||proc_version||'P_BATCH_PRE';
    rid      		  := SEQ_CCDB_BATCHLOG.nextval;
    
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
 		--特殊处理 如果 T_7005_BOM 中的shift_info为空则把该空值更新为0
 		UPDATE T_7005_BOM SET SHIFT_INFO = NVL(SHIFT_INFO,0) WHERE SETTLE_DATE = BATCH_DATE;
 		
 
    --统计所有表的操作员班次，放入临时表
    BEGIN
 
    		TRUNCATE TABLE TEMP_OPERATOR_SHIFT IMMEDIATE;
 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SJT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE ;
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_SVT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				  
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;	
    			 
    			 
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_YKT_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE; 
    			 
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_QR_TEMP   				
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	  INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_TIME),MAX(TRANS_TIME)
    				   FROM TBL_TR_PBOC_TEMP
    				  WHERE SETTLE_DATE = BATCH_DATE
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			 
    	 INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, 0 , 0,  SETTLE_DATE, MIN(TRANSACTION_TIME),MAX(TRANSACTION_TIME)
    				   FROM T_7004_TVM
    				  WHERE SETTLE_DATE = BATCH_DATE    				 
    			 GROUP BY SLE_ID, SETTLE_DATE;
    			 
    	
    		INSERT INTO TEMP_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT substr(SLE_ID,3,4), SLE_ID, OPERATOR_NBR , SHIFT_INFO,  SETTLE_DATE, MIN(TRANSACTION_TIME) ,MAX(TRANSACTION_TIME) 
    				   FROM T_7005_BOM
    				  WHERE SETTLE_DATE = BATCH_DATE   				 
    			 GROUP BY SLE_ID, OPERATOR_NBR, SHIFT_INFO, SETTLE_DATE;	 
 
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TEMP_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
     --统计所有表的操作员班次，放入日结表
    BEGIN
 
    		DELETE TBL_BATCH_OPERATOR_SHIFT  WHERE SETTLE_DATE = BATCH_DATE;
 
 	  --最小交易时间向前推前15秒，最大交易时间向后延后15秒	即成为操作员的班次时间 
    		INSERT INTO TBL_BATCH_OPERATOR_SHIFT(STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE,TRANS_START,TRANS_END)
    				 SELECT STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE, MIN(TRANS_START) - 1/86400*15 ,MAX(TRANS_END) + 1/86400*15
    				   FROM TEMP_OPERATOR_SHIFT
    				  WHERE SETTLE_DATE = BATCH_DATE 
    			 GROUP BY STATION_NID, DEVICE_NID, OPERATOR_ID, SHIFT_INFO, SETTLE_DATE;
    			  
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE.TBL_BATCH_OPERATOR_SHIFT',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
 
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_PRE',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

CREATE PROCEDURE P_BATCH_FAULT_SETTLE(batch_date IN VARCHAR(200))
IS
 
  --=============================================================================
  --功能：单程票票卡汇总
  --输入：batch_date  运营日，T_7004_TVM ,T_7005_BOM 为数据源
  --输出：tbl_batch_FAULT_settle_trans ,(tbl_batch_FAULT_settle_data为中间表)
  --备注：HHJT_CJP 20191002
  --=============================================================================
   
    CURSOR FAULT_settle_cur IS
      SELECT line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
             ticket_type,payment_method,shift_info,trans_start,trans_end 
        FROM tbl_batch_FAULT_settle_data
       WHERE settle_date = batch_date
       GROUP BY line_nid,settle_date, trans_date, operator_id, station_nid, device_nid,
                ticket_type,payment_method,shift_info,trans_start,trans_end ;
                
    --local variable
    rec_FAULT_settle_trans tbl_batch_FAULT_settle_trans%ROWTYPE;
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.10.2)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_FAULT_SETTLE';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
 
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    DELETE FROM tbl_batch_FAULT_settle_data WHERE settle_date = batch_date;
 
    --初始化统计-放入汇总表
    --TVM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FALUT_TVM ticket_type, CCDB_STD.C_FALUT_TVM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, 0 operator_id,0 SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7004_TVM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
                     
                     
    --BOM故障退款
   INSERT INTO	TBL_BATCH_FAULT_SETTLE_DATA(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,TICKET_TYPE,TRANS_TYPE,
   							PAYMENT_METHOD,OPERATOR_ID,VALUE_TRANS,SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,
   							DEPOSIT,SHIFT_INFO,TRANS_START,TRANS_END)
       SELECT to_number(substr(FAULT.device_nid,3,2)),FAULT.settle_date, trans_date, station_nid, FAULT.device_nid, ticket_type,trans_type, 
             payment_method, FAULT.operator_id, value_trans, COUNT(*) settle_count,
             nvl(SUM(value_trans), 0) settle_amount,  nvl(SUM(trans_fee), 0) trans_fee  ,
             nvl(SUM(deposit), 0) deposit,shift.shift_info,shift.trans_start,shift.trans_end
        FROM 
        			(
        					SELECT  settle_date,operator_id,device_nid,shift_info,trans_start,trans_end
        			  		FROM  TBL_BATCH_OPERATOR_SHIFT 
        			 		 WHERE  SETTLE_DATE = BATCH_DATE 
        			 ) shift
        			 INNER  JOIN 
        			 (
        			 SELECT settle_date,
                      to_char(TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date,
                      TO_DATE(TRANSACTION_TIME,'YYYYMMDDHH24MISS') trans_time,SUBSTR(SLE_ID,3,4) station_nid, SLE_ID device_nid,
                      CCDB_STD.C_FAULT_BOM ticket_type, CCDB_STD.C_FAULT_BOM trans_type,
                      CCDB_STD.C_PM_CASH payment_method, OPERATOR_NBR operator_id,SHIFT_INFO, VALURE_TRANSACTION  value_trans,
                      0 trans_fee, 0 deposit
                 FROM T_7005_BOM
                WHERE settle_date = BATCH_DATE       			 
        			 ) FAULT       			   
        			  ON  FAULT.operator_id    =	shift.operator_id
        			  AND FAULT.device_nid		 =	shift.device_nid
              	AND FAULT.trans_time		 >= shift.trans_start
              	AND FAULT.trans_time		 <= shift.trans_end
              	AND FAULT.SETTLE_DATE		 =  shift.SETTLE_DATE
              	AND FAULT.shift_info 		 =  shift.shift_info
            GROUP BY FAULT.settle_date, FAULT.trans_date, FAULT.station_nid, FAULT.device_nid, ticket_type,trans_type,payment_method, 
                     FAULT.operator_id, value_trans,shift.shift_info,shift.trans_start,shift.trans_end ;
        			 
        			 
     
                
    ---将符合条件的计次票的交易金额且的更新为0
    UPDATE tbl_batch_FAULT_settle_data 
    	SET  value_trans = 0
    WHERE  SETTLE_DATE = BATCH_DATE     
      AND  1 = CCDB_LIB.F_SYS_CHECKCOUNT(ticket_type,trans_type);
  
    ----从汇总中统计放入统计表
 
      DELETE FROM tbl_batch_FAULT_settle_trans WHERE settle_date = batch_date;
    
      FOR rec_FAULT_settle_head IN FAULT_settle_cur
      LOOP
        rec_FAULT_settle_trans.line_nid        := rec_FAULT_settle_head.line_nid;
        rec_FAULT_settle_trans.settle_date     := rec_FAULT_settle_head.settle_date;
        rec_FAULT_settle_trans.trans_date      := rec_FAULT_settle_head.trans_date;
        rec_FAULT_settle_trans.operator_id     := rec_FAULT_settle_head.operator_id;
        rec_FAULT_settle_trans.shift_info      := rec_FAULT_settle_head.shift_info;
        rec_FAULT_settle_trans.trans_start     := rec_FAULT_settle_head.trans_start;
        rec_FAULT_settle_trans.trans_end       := rec_FAULT_settle_head.trans_end;
        rec_FAULT_settle_trans.station_nid     := rec_FAULT_settle_head.station_nid;
        rec_FAULT_settle_trans.device_nid      := rec_FAULT_settle_head.device_nid;
        rec_FAULT_settle_trans.device_type     := CCDB_LIB.F_SYS_HEX2DEC(substr(rec_FAULT_settle_head.device_nid,1, 2));
        rec_FAULT_settle_trans.ticket_type     := rec_FAULT_settle_head.ticket_type;
        rec_FAULT_settle_trans.payment_method  := rec_FAULT_settle_head.payment_method;
        rec_FAULT_settle_trans.ticket_category := CCDB_STD.C_TC_FAULT;
      
        --售票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.sale_count, rec_FAULT_settle_trans.sale_amount
          FROM DUAL  ;
      
        --进站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.in_count
          FROM DUAL;
           
        --出站
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.out_count, rec_FAULT_settle_trans.out_amount
          FROM DUAL;

        --充值
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.load_count, rec_FAULT_settle_trans.load_amount
          FROM DUAL;

      
     		--更新
     		 SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.UPDATE_COUNT, rec_FAULT_settle_trans.UPDATE_AMOUNT
          FROM DUAL;



				--出站更新			 
          rec_FAULT_settle_trans.UPDATE_OUT_COUNT 	 := 0;
          rec_FAULT_settle_trans.UPDATE_OUT_AMOUNT   := 0;
 	
				--进站更新
				 rec_FAULT_settle_trans.UPDATE_IN_COUNT 	  := 0;
         rec_FAULT_settle_trans.UPDATE_IN_AMOUNT    := 0;
							
				--超时更新
				 rec_FAULT_settle_trans.UPDATE_OVER_TIME_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_TIME_AMOUNT    := 0;


				--超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_RUN_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_RUN_AMOUNT     := 0;

			--超时且超程更新
				 rec_FAULT_settle_trans.UPDATE_OVER_BOTH_COUNT 	   := 0;
         rec_FAULT_settle_trans.UPDATE_OVER_BOTH_AMOUNT    := 0;
  
        --退票
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.refund_count, rec_FAULT_settle_trans.refund_amount
          FROM DUAL;          
           
        --延时退卡
        SELECT sum(0), sum(0)
        	INTO  rec_FAULT_settle_trans.refund_delay_count, rec_FAULT_settle_trans.refund_delay_amount
          FROM DUAL;
 
     		--押金  
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.deposit_COUNT,rec_FAULT_settle_trans.DEPOSIT_AMOUNT
          FROM DUAL;
          
        --手续费
        SELECT sum(0), sum(0)
          INTO rec_FAULT_settle_trans.trans_fee_COUNT,rec_FAULT_settle_trans.trans_fee_AMOUNT
          FROM DUAL;
           
        --故障退款
        SELECT NVL(SUM(SETTLE_COUNT), 0), NVL(SUM(SETTLE_AMOUNT), 0)
          INTO rec_FAULT_settle_trans.fault_count,rec_FAULT_settle_trans.fault_amount
          FROM tbl_batch_FAULT_settle_data
         WHERE trans_date 		= rec_FAULT_settle_trans.trans_date
           AND settle_date 		= batch_date
           AND operator_id 		= rec_FAULT_settle_trans.operator_id
           AND ticket_type		= rec_FAULT_settle_trans.ticket_type
           AND device_nid 		= rec_FAULT_settle_trans.device_nid
           AND payment_method = rec_FAULT_settle_head.payment_method
           AND shift_info			= rec_FAULT_settle_trans.shift_info
           AND trans_type 		IN(254,255);  	
           
           
           

        INSERT INTO tbl_batch_FAULT_settle_trans VALUES rec_FAULT_settle_trans;

      END LOOP;
      

    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_FAULT_SETTLE', CCDB_STD.LEVEL_LOG_FERR,
                              errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."T_7005_BOM" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_7005_BOM" TO USER "SCDB    ";


-- SCDB.T_8014_SLEINFO definition

CREATE TABLE "SCDB    "."T_8014_SLEINFO"  (
		  "CC_ID" VARCHAR(8) NOT NULL , 
		  "SC_ID" VARCHAR(8) NOT NULL , 
		  "SLE_ID" VARCHAR(8) NOT NULL , 
		  "SLE_IP" VARCHAR(8) NOT NULL )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_8014_SLEINFO" 
	ADD CONSTRAINT "PK_3014_CHANGEST" PRIMARY KEY
		("SLE_ID");

GRANT CONTROL ON TABLE "SCDB    "."T_8014_SLEINFO" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_3014_CHANGEST" TO USER "SCDB    ";


-- SCDB.T_8101_SLEVERSION definition

CREATE TABLE "SCDB    "."T_8101_SLEVERSION"  (
		  "SLE_NID" VARCHAR(8) NOT NULL , 
		  "ECU" VARCHAR(32) , 
		  "TPU" VARCHAR(32) , 
		  "COIN" VARCHAR(32) , 
		  "NOTE" VARCHAR(32) , 
		  "COMM" VARCHAR(32) , 
		  "NOTE2" VARCHAR(32) , 
		  "IO" VARCHAR(32) , 
		  "READER1" VARCHAR(32) , 
		  "READER2" VARCHAR(32) , 
		  "GATE" VARCHAR(32) , 
		  "VERSION_3086" VARCHAR(32) , 
		  "UPLOAD_DATE" TIMESTAMP WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_8101_SLEVERSION" 
	ADD CONSTRAINT "PK_5005_SLEVERSION" PRIMARY KEY
		("SLE_NID");

GRANT CONTROL ON TABLE "SCDB    "."T_8101_SLEVERSION" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_5005_SLEVERSION" TO USER "SCDB    ";


-- SCDB.T_DEVICE_EVENT definition

CREATE TABLE "SCDB    "."T_DEVICE_EVENT"  (
		  "EVENT_CODE" CHAR(6) NOT NULL , 
		  "EVENT_LEVEL" DECIMAL(3,0) , 
		  "CODE_DESC" VARCHAR(160) )   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

COMMENT ON TABLE "SCDB    "."T_DEVICE_EVENT" IS '[BASIC CODE] Device Event Code Table';

COMMENT ON COLUMN "SCDB    "."T_DEVICE_EVENT"."CODE_DESC" IS '不超过30个英文字符';

ALTER TABLE "SCDB    "."T_DEVICE_EVENT" 
	ADD CONSTRAINT "P_KEY_1" PRIMARY KEY
		("EVENT_CODE");

GRANT CONTROL ON TABLE "SCDB    "."T_DEVICE_EVENT" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_KEY_1" TO USER "SCDB    ";


-- SCDB.T_F101_TVM definition

CREATE TABLE "SCDB    "."T_F101_TVM"  (
		  "SLE_ID" VARCHAR(8) NOT NULL , 
		  "OPERATOR_NBR" DECIMAL(8,0) NOT NULL , 
		  "TRANSACTION_TIME" TIMESTAMP NOT NULL , 
		  "CASHBOX_LOCATION" DECIMAL(3,0) NOT NULL , 
		  "OPERATE_TYPE" DECIMAL(1,0) NOT NULL , 
		  "CASHBOX_ID" CHAR(8) NOT NULL , 
		  "CHANGE_STATUS" DECIMAL(1,0) NOT NULL , 
		  "VALURE_TRANSACTION" DECIMAL(10,0) NOT NULL )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_F101_TVM" 
	ADD CONSTRAINT "PK_F001_TVM" PRIMARY KEY
		("SLE_ID",
		 "TRANSACTION_TIME",
		 "OPERATE_TYPE",
		 "CASHBOX_LOCATION");

CREATE PROCEDURE P_BATCH_88(batch_date IN VARCHAR(200)) IS
  
  --======================================================================
  --功能：统计数据与票务平台的接口文件 0x8801,0x8802,0x8803,0x8804,0x8805
  --输入：batch_date  运营日 
  --输出：TBL_BATCH_8801,TBL_BATCH_8802,TBL_BATCH_8803,TBL_BATCH_8804,TBL_BATCH_8805 
  --      
  --备注：HHJT_CJP 20190809
  --======================================================================
   
    CURSOR BATCH_8803_cur IS
		      SELECT SLE_ID DEVICE_NID, TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') trans_date
		        FROM T_F101_TVM
		       WHERE TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = batch_date
		    GROUP BY SLE_ID , TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd');
		                
 
    --local variable
    rec_BATCH_8803 tbl_batch_8803%ROWTYPE;
 
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.10)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_88';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
  
    --TBL_BATCH_8801 
    BEGIN
      DELETE TBL_BATCH_8801   WHERE settle_date = batch_date  ;
    
 			INSERT INTO TBL_BATCH_8801
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT	
      		FROM  TBL_BATCH_TRANSTYPE_DAY
       	 	WHERE SETTLE_DATE = batch_date;
      
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8801',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
    --TBL_BATCH_8802
    BEGIN
      DELETE TBL_BATCH_8802 WHERE settle_date = batch_date ;
    
     INSERT INTO TBL_BATCH_8802
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,TRANS_START,TRANS_END,
      					  TICKET_CLASS, TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
      					  TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
     	 	SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),OPERATOR_ID,TRANS_START,TRANS_END,
     	 						CCDB_LIB.F_SYS_TICKETCLASSBYTYPE(TICKET_TYPE),TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 						SUM(SETTLE_COUNT),SUM(SETTLE_AMOUNT),SUM(TRANS_FEE),SUM(DEPOSIT)	
      		FROM  
      				(
      						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SJT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
     	 						SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_SVT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date	
     	 						AND				 OPERATOR_ID > 0				
      		 				UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_YKT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND				OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_QR_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_PBOC_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 						UNION ALL
      		 				SELECT		SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
     	 											TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
     	 											SETTLE_COUNT,SETTLE_AMOUNT,TRANS_FEE,DEPOSIT
     	 						FROM			TBL_BATCH_FAULT_SETTLE_DATA
     	 						WHERE     SETTLE_DATE = batch_date
     	 						AND 			OPERATOR_ID > 0
     	 				)
     	 				WHERE SETTLE_DATE = batch_date
     	 					AND OPERATOR_ID > 0
     	 			GROUP BY SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,OPERATOR_ID,TRANS_START,TRANS_END,
      					     TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD;     	 									
        
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8802',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  
     --TBL_BATCH_8803
    BEGIN
      DELETE TBL_BATCH_8803   WHERE settle_date = batch_date  ;
    	
    	
    	--TVM/BOM/AGM/ITVM当前运营日结束(1) TVM/BOM/AGM/ITVM当前运营日开始(2)
    	
    	-- OPERATE_TYPE:操作类型 0x01：取出 ; 0x02：装入
    	-- CASHBOX_LOCATION: 1 纸币钱箱 ; 	2 硬币回收箱;		3 纸币找零箱1 ;
    	--									 4 纸币找零箱2;	5 硬币找零箱1 ;	6 硬币找零箱2;
    	--									 7 票箱1	; 		8 票箱2 ;				9 废票箱 ;
    	--									 10  纸币废钞箱
    	-- VALURE_TRANSACTION 操作金额(以分为单位)		                
 
      FOR rec_BATCH_8803_head IN BATCH_8803_cur
      LOOP
        rec_BATCH_8803.SETTLE_DATE      := batch_date;
        rec_BATCH_8803.TRANS_DATE     	:= rec_BATCH_8803_head.trans_date;
        rec_BATCH_8803.STATION_NID      := substr(rec_BATCH_8803_head.device_nid,1, 4);
        rec_BATCH_8803.DEVICE_NID     	:= rec_BATCH_8803_head.DEVICE_NID;
        rec_BATCH_8803.DEVICE_NAME      := CCDB_LIB.F_SYS_DEVICENAMEBYNID(rec_BATCH_8803_head.DEVICE_NID);
       
        --硬币回收金额 COIN_RECYCLE_AMOUNT 
      SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
			--纸币回收金额 CASH_RECYCLE_AMOUNT
			  SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_RECYCLE_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 1
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
     
 
			--硬币补充金额 COIN_ADD_AMOUNT
			 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.COIN_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (2,5,6)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
 
			--纸币补充金额 CASH_ADD_AMOUNT
		 SELECT NVL(SUM(VALURE_TRANSACTION), 0)  
      	INTO 	 rec_BATCH_8803.CASH_ADD_AMOUNT
      	FROM 	 T_F101_TVM
      	WHERE  SLE_ID = rec_BATCH_8803.DEVICE_NID
      	AND    OPERATE_TYPE = 2
      	AND    CASHBOX_LOCATION IN (1,3,4,10)
      	AND    TO_CHAR(TRANSACTION_TIME-2 hour,'yyyyMMdd') = BATCH_DATE;
	 
			--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   	
			rec_BATCH_8803.TRANS_START_COIN_AMOUNT := 0;
			
			--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT   
			rec_BATCH_8803.TRANS_END_COIN_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_START_CASH_AMOUNT :=0;
			
			--运营开始纸币找零开始结余金额 TRANS_END_CASH_AMOUNT 
			rec_BATCH_8803.TRANS_END_CASH_AMOUNT :=0;
		
			/*
				--运营开始硬币找零开始结余金额 TRANS_START_COIN_AMOUNT   对应寄存器编号是7 9 11 13 15 
 				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 
     	 	 INTO rec_BATCH_8803.TRANS_START_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
  
				--运营结束硬币找零结束结余金额 TRANS_END_COIN_AMOUNT  对应寄存器编号是7 9 11 13 15 
				SELECT	NVL(SUM(T2.REGISTER7) + SUM(T2.REGISTER9)  + SUM(T2.REGISTER11)
 					  + SUM(T2.REGISTER13) + SUM(T2.REGISTER15),0) 					  
     	 	 INTO rec_BATCH_8803.TRANS_END_COIN_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;

				--运营开始纸币找零开始结余金额 TRANS_START_CASH_AMOUNT  对应寄存器编号是19 21 25
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21)  + SUM(T2.REGISTER25),0)
     	 	 INTO rec_BATCH_8803.TRANS_START_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 2
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;


				--运营结束纸币找零结束结余金额 TRANS_END_CASH_AMOUNT
				SELECT	NVL(SUM(T2.REGISTER19) + SUM(T2.REGISTER21) + SUM(T2.REGISTER25),0) 
     	 	 INTO rec_BATCH_8803.TRANS_END_CASH_AMOUNT				 
      	 FROM TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2      	
       	WHERE T1.settle_date = batch_date
       	  AND T1.REG_TYPE = 1
       	  AND T1.PACKET_SEQ = T2.PACKET_SEQ
       	  AND T1.DEVICE_NID = rec_BATCH_8803.DEVICE_NID;
      */

  
        INSERT INTO TBL_BATCH_8803 VALUES rec_BATCH_8803;

      END LOOP;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8803',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
     
     
		--TBL_BATCH_8804 --寄存器中的数据按照文档 金额为角 然后乘以10，系统数据库中转为以分为单位
    BEGIN
      DELETE TBL_BATCH_8804   WHERE settle_date = batch_date  ;
    	 		
       --TVM 钱箱操作汇总 对应寄存器编号是7 9 11 13 15 17 19 21 23 25 
      INSERT INTO TBL_BATCH_8804
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
									 COIN_SPARE_1_AMOUNT,COIN_SPARE_2_AMOUNT,COIN_SPARE_3_AMOUNT,COIN_CHARGE_1_AMOUNT,COIN_CHARGE_2_AMOUNT,
									 COIN_RECYCLE_AMOUNT,CASH_SPARE_1_AMOUNT,CASH_SPARE_2_AMOUNT,CASH_RECYCLE_AMOUNT,CASH_CHARGE_AMOUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,T1.REG_TYPE,T1.REG_TIME,
     	 	 					T2.REGISTER7*10,T2.REGISTER9*10,T2.REGISTER11*10,T2.REGISTER13*10,T2.REGISTER15*10,
     	 	 					T2.REGISTER17*10,T2.REGISTER19*10,T2.REGISTER21*10,T2.REGISTER23*10,T2.REGISTER25*10 	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;
    
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8804',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
      
		 --TBL_BATCH_8805
    BEGIN
      DELETE TBL_BATCH_8805   WHERE settle_date = batch_date  ;
    
     --AGM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_AGM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 	
      --BOM 票箱
 			INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
     	 	SELECT		batch_date,TO_CHAR(REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(DEVICE_NID,1,4),DEVICE_NID,CCDB_LIB.F_SYS_DEVICENAMEBYNID(DEVICE_NID),0,
     	 						REG_TYPE,REG_TIME,TICKET_BOX_1,TICKET_BOX_2,0,0    	 					 
      		FROM  TBL_RG_BOM
       	 	WHERE settle_date = batch_date
       	 		AND REG_TYPE > 0;
       	 		
       --TVM/ITVM 票箱 对应寄存器编号是26 27 28 29 
      INSERT INTO TBL_BATCH_8805
      					  (SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_NAME,OPERATOR_ID,AUDIT_FILE_TYPE,OPERATE_TIME,
      					  BOX_1_COUNT, BOX_2_COUNT,BOX_3_COUNT,BOX_4_COUNT )
        	 SELECT	batch_date,TO_CHAR(T1.REG_TIME-2 hour,'yyyyMMdd'),SUBSTR(T1.DEVICE_NID,1,4),T1.DEVICE_NID,
  								CCDB_LIB.F_SYS_DEVICENAMEBYNID(T1.DEVICE_NID),0,
     	 	 					T1.REG_TYPE,T1.REG_TIME,T2.REGISTER26,T2.REGISTER27,T2.REGISTER28,T2.REGISTER29   	 					 
      			FROM  TBL_RG_TVM T1,TBL_RG_TVM_ACCU T2
       	 		WHERE settle_date = batch_date
       	      AND T1.REG_TYPE > 0
       	      AND T1.PACKET_SEQ = T2.PACKET_SEQ;

      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
          errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('TBL_BATCH_8805',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
  



    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_88',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."T_F101_TVM" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_F001_TVM" TO USER "SCDB    ";


-- SCDB.T_FILE_SEQ definition

CREATE TABLE "SCDB    "."T_FILE_SEQ"  (
		  "SETTLE_DATE" CHAR(8) , 
		  "FILE_TYPE" DECIMAL(10,0) NOT NULL , 
		  "FILE_SEQ" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_FILE_SEQ" 
	ADD CONSTRAINT "P_PK_FILE_SEQ" PRIMARY KEY
		("FILE_TYPE");

GRANT CONTROL ON TABLE "SCDB    "."T_FILE_SEQ" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_FILE_SEQ" TO USER "SCDB    ";


-- SCDB.T_MN_LINE_LAYOUT definition

CREATE TABLE "SCDB    "."T_MN_LINE_LAYOUT"  (
		  "STATION_NID" VARCHAR(4) , 
		  "POINT_X" DECIMAL(10,0) , 
		  "POINT_Y" DECIMAL(10,0) , 
		  "TEXT_X" DECIMAL(10,0) , 
		  "TEXT_Y" DECIMAL(10,0) , 
		  "TEXT_ROTATE" DECIMAL(10,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_MN_LINE_LAYOUT" TO USER "SCDB    ";


-- SCDB.T_MN_LINE_PATH definition

CREATE TABLE "SCDB    "."T_MN_LINE_PATH"  (
		  "ORIG_STATION_ID" VARCHAR(8) , 
		  "DEST_STATION_ID" VARCHAR(8) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_MN_LINE_PATH" TO USER "SCDB    ";


-- SCDB.T_MN_STATION_LAYOUT definition

CREATE TABLE "SCDB    "."T_MN_STATION_LAYOUT"  (
		  "STATION_NID" VARCHAR(8) , 
		  "DEVICE_NID" VARCHAR(8) , 
		  "DEVICE_CN" VARCHAR(40) , 
		  "DEVICE_TYPE" DECIMAL(3,0) , 
		  "DEVICE_SUBTYPE" DECIMAL(3,0) , 
		  "DEVICE_X" DECIMAL(5,0) , 
		  "DEVICE_Y" DECIMAL(5,0) , 
		  "TEXT_X" DECIMAL(5,0) , 
		  "TEXT_Y" DECIMAL(5,0) , 
		  "DEVICE_ROTATE" DECIMAL(3,0) , 
		  "TEXT_ROTATE" DECIMAL(5,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_MN_STATION_LAYOUT" TO USER "SCDB    ";


-- SCDB.T_MN_STATION_PIC definition

CREATE TABLE "SCDB    "."T_MN_STATION_PIC"  (
		  "STATION_NID" VARCHAR(8) , 
		  "PIC_FILENAME" VARCHAR(50) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_MN_STATION_PIC" TO USER "SCDB    ";


-- SCDB.T_MONITOR_DEVSTAT definition

CREATE TABLE "SCDB    "."T_MONITOR_DEVSTAT"  (
		  "CREATE_TIME" TIMESTAMP(0) WITH DEFAULT "SYSIBM"."TIMESTAMP"(CURRENT TIMESTAMP) , 
		  "DEVICE_NID" VARCHAR(8) NOT NULL , 
		  "OCCUR_TIME" TIMESTAMP(0) , 
		  "EVENT_LEVEL" DECIMAL(3,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_MONITOR_DEVSTAT" TO USER "SCDB    ";


-- SCDB.T_MONITOR_FAILURE definition

CREATE TABLE "SCDB    "."T_MONITOR_FAILURE"  (
		  "DEVICE_NID" VARCHAR(8) NOT NULL , 
		  "OCCUR_TIME" TIMESTAMP(0) NOT NULL , 
		  "EVENT_CODE" CHAR(6) NOT NULL , 
		  "EVENT_NAME" VARCHAR(160) , 
		  "EVENT_LEVEL" DECIMAL(3,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_MONITOR_FAILURE" 
	ADD CONSTRAINT "XPKT_MONI_FAILURE" PRIMARY KEY
		("DEVICE_NID",
		 "OCCUR_TIME",
		 "EVENT_CODE");

GRANT CONTROL ON TABLE "SCDB    "."T_MONITOR_FAILURE" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."XPKT_MONI_FAILURE" TO USER "SCDB    ";


-- SCDB.T_PARAMETER_CTRL definition

CREATE TABLE "SCDB    "."T_PARAMETER_CTRL"  (
		  "PARAMETER_NBR" DECIMAL(10,0) NOT NULL , 
		  "PARAMETER_NAME" VARCHAR(30) , 
		  "PARAMETER_TYPE" VARCHAR(4) NOT NULL , 
		  "PARAMETER_VERSION" DECIMAL(10,0) NOT NULL , 
		  "PARAMETER_CTRL_NID" VARCHAR(8) NOT NULL , 
		  "PARAMETER_STATUS" DECIMAL(1,0) NOT NULL , 
		  "EFFECTIVE_TIME" TIMESTAMP , 
		  "PARAMETER_DESC" VARCHAR(255) , 
		  "FILE_FLAG" DECIMAL(1,0) NOT NULL WITH DEFAULT 0 , 
		  "UPDATE_FLAG" DECIMAL(1,0) WITH DEFAULT 0 )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

COMMENT ON COLUMN "SCDB    "."T_PARAMETER_CTRL"."PARAMETER_CTRL_NID" IS '若为线路，则为0200';

COMMENT ON COLUMN "SCDB    "."T_PARAMETER_CTRL"."PARAMETER_STATUS" IS '0  当前参数 1   历史参数 2   将来参数 3   草稿参数';

ALTER TABLE "SCDB    "."T_PARAMETER_CTRL" 
	ADD CONSTRAINT "XPKT_PARAM_CTRL" PRIMARY KEY
		("PARAMETER_NBR",
		 "PARAMETER_TYPE",
		 "PARAMETER_VERSION",
		 "PARAMETER_CTRL_NID");

GRANT CONTROL ON TABLE "SCDB    "."T_PARAMETER_CTRL" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."XPKT_PARAM_CTRL" TO USER "SCDB    ";


-- SCDB.T_PKG_GEN_HEADER definition

CREATE TABLE "SCDB    "."T_PKG_GEN_HEADER"  (
		  "PACKET_SEQ" DECIMAL(10,0) NOT NULL , 
		  "FILE_NAME" VARCHAR(50) , 
		  "DEAL_DATE" TIMESTAMP , 
		  "MSG_TYPE" VARCHAR(4) , 
		  "SEND_NID" VARCHAR(8) , 
		  "RECV_NID" VARCHAR(8) , 
		  "MSG_ID" DECIMAL(10,0) , 
		  "PACKET_LENGTH" DECIMAL(10,0) , 
		  "REQ_TYPE" DECIMAL(1,0) , 
		  "MSG_VERSION" DECIMAL(3,0) , 
		  "REP_CODE" DECIMAL(3,0) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_PKG_GEN_HEADER" 
	ADD CONSTRAINT "P_PK_PM_PKG_HEADER" PRIMARY KEY
		("PACKET_SEQ");

GRANT CONTROL ON TABLE "SCDB    "."T_PKG_GEN_HEADER" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_PM_PKG_HEADER" TO USER "SCDB    ";


-- SCDB.T_PKG_LCC_FTP_88_FILE definition

CREATE TABLE "SCDB    "."T_PKG_LCC_FTP_88_FILE"  (
		  "FILE_NAME" VARCHAR(50) NOT NULL WITH DEFAULT ' ' , 
		  "FILE_LENGTH" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "FILE_RECORDS" DECIMAL(10,0) WITH DEFAULT 0 , 
		  "FILE_CREATE_TIME" TIMESTAMP WITH DEFAULT CURRENT TIMESTAMP , 
		  "FILE_UPLOAD_TIME" TIMESTAMP , 
		  "FILE_UPLOAD_FLAG" DECIMAL(1,0) WITH DEFAULT 0 , 
		  "TRANS_DATE" VARCHAR(8) )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_PKG_LCC_FTP_88_FILE" TO USER "SCDB    ";


-- SCDB.T_PKG_LCC_FTP_TRANS_FILE definition

CREATE TABLE "SCDB    "."T_PKG_LCC_FTP_TRANS_FILE"  (
		  "FILE_NAME" VARCHAR(255) NOT NULL , 
		  "FILE_LENGTH" DECIMAL(10,0) NOT NULL , 
		  "FILE_RECORDS" DECIMAL(10,0) , 
		  "FILE_CREATE_TIME" TIMESTAMP , 
		  "FILE_UPLOAD_TIME" TIMESTAMP , 
		  "FILE_UPLOAD_FLAG" DECIMAL(3,0) , 
		  "BELONGS_FILE_NAME" VARCHAR(255) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."T_PKG_LCC_FTP_TRANS_FILE" TO USER "SCDB    ";


-- SCDB.T_SC_INFO definition

CREATE TABLE "SCDB    "."T_SC_INFO"  (
		  "SC_NID" VARCHAR(8) NOT NULL , 
		  "SC_IP" VARCHAR(20) NOT NULL , 
		  "SC_PORT" DECIMAL(5,0) NOT NULL WITH DEFAULT 7000 , 
		  "DOWNLOAD_FALG" DECIMAL(1,0) NOT NULL WITH DEFAULT 1 )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_SC_INFO" 
	ADD CONSTRAINT "PK_SC_INFO" PRIMARY KEY
		("SC_NID");

GRANT CONTROL ON TABLE "SCDB    "."T_SC_INFO" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SC_INFO" TO USER "SCDB    ";


-- SCDB.T_SLE_ABSENCE_DATA definition

CREATE TABLE "SCDB    "."T_SLE_ABSENCE_DATA"  (
		  "TRANS_DATE" VARCHAR(8) NOT NULL , 
		  "SC_ID" CHAR(4) , 
		  "SLE_ID" CHAR(8) NOT NULL , 
		  "SLE_NAME" VARCHAR(8) , 
		  "START_NO" DECIMAL(10,0) NOT NULL , 
		  "END_NO" DECIMAL(10,0) NOT NULL , 
		  "DATA_TYPE" DECIMAL(1,0) NOT NULL )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_SLE_ABSENCE_DATA" 
	ADD CONSTRAINT "PK_SLE_ABSENCE_DATA" PRIMARY KEY
		("TRANS_DATE",
		 "SLE_ID",
		 "DATA_TYPE",
		 "START_NO");

GRANT CONTROL ON TABLE "SCDB    "."T_SLE_ABSENCE_DATA" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SLE_ABSENCE_DATA" TO USER "SCDB    ";


-- SCDB.T_SOC_LOG definition

CREATE TABLE "SCDB    "."T_SOC_LOG"  (
		  "OPERATE_TIME" TIMESTAMP , 
		  "OPERATE_NBR" DECIMAL(10,0) , 
		  "DEVICE_NID" VARCHAR(20) , 
		  "DEVICE_EVENT" VARCHAR(200) )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_SOC_LOG" TO USER "SCDB    ";


-- SCDB.T_SPT_CHECK_DATA definition

CREATE TABLE "SCDB    "."T_SPT_CHECK_DATA"  (
		  "ACCOUNT_NO" VARCHAR(20) NOT NULL , 
		  "SLE_NID" VARCHAR(8) NOT NULL , 
		  "REQ_TYPE" DECIMAL(1,0) NOT NULL , 
		  "TRANSACTION_TIME" TIMESTAMP )   
		 IN "TBSCCDBACCOUNT" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_SPT_CHECK_DATA" 
	ADD CONSTRAINT "P_PK_SPT_CHECK_DATA" PRIMARY KEY
		("ACCOUNT_NO",
		 "REQ_TYPE");

GRANT CONTROL ON TABLE "SCDB    "."T_SPT_CHECK_DATA" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."P_PK_SPT_CHECK_DATA" TO USER "SCDB    ";


-- SCDB.T_SS_CODE_DESC definition

CREATE TABLE "SCDB    "."T_SS_CODE_DESC"  (
		  "CODE_TYPE" VARCHAR(50) NOT NULL , 
		  "CODE_VALUE" DECIMAL(5,0) NOT NULL , 
		  "CODE_DESC" VARCHAR(50) , 
		  "TYPE_DESC" VARCHAR(50) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_SS_CODE_DESC" 
	ADD CONSTRAINT "PK_SS_CODE_DESC" PRIMARY KEY
		("CODE_TYPE",
		 "CODE_VALUE");

CREATE PROCEDURE P_BATCH_AD(batch_date IN VARCHAR(200)) IS
   --======================================================================
  --功能：终端设备数据审计和ACC上传数据审计
  --输入：batch_date  运营日
  --输出： TBL_AD_ACC_DIRECTORY_HIS ,TBL_BATCH_AUDIT_DEVICE
  --数据源：各种交易TEMP表 和 T_PKG_LCC_FTP_TRANS_FILE ;寄存器表
  --备注：HHJT_CJP 20190830
  --        
  --======================================================================
 
    
		--local variable  
    exec_date     DATE;
    sqlstat       VARCHAR2(300);    
    rec_BATCH_RG_AGM_MAX  TBL_BATCH_RG_AGM_MAX%ROWTYPE;
    rec_BATCH_RG_BOM_MAX  TBL_BATCH_RG_BOM_MAX%ROWTYPE;
    rec_BATCH_RG_TVM_MAX  TBL_BATCH_RG_TVM_MAX%ROWTYPE;
    
    
    --error message
    errmsg VARCHAR(500);
    -- performance log variables
    batch_name   VARCHAR(50);
    start_time   DATE;
    end_time     DATE;
    elapsed_time BINARY_INTEGER;
    rid          NUMERIC(10);
    proc_version VARCHAR(50);
  BEGIN
  	proc_version	:= '(19.9.14)';
    start_time		:= SYSDATE;
    batch_name		:= proc_version||'P_BATCH_AD';
    rid        		:= SEQ_CCDB_BATCHLOG.nextval;
     
    CCDB_LIB.IF_DB_LOG_INSERT(rid,batch_name, batch_date);
 
    --设备寄存器审计数据统计
    BEGIN
    
     DELETE FROM TBL_BATCH_RG_AGM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_BOM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_RG_TVM_MAX 	WHERE SETTLE_DATE = BATCH_DATE; 
     DELETE FROM TBL_BATCH_AUDIT_DEVICE WHERE SETTLE_DATE = BATCH_DATE; 
     
     BEGIN
     --AGM 寄存器数据统计插入 TBL_BATCH_AGM_RG_MAX
      INSERT INTO TBL_BATCH_RG_AGM_MAX(TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_RECYCLE,TOTAL_VALUE,TOTAL_LOCK,REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOATL_ENTRY,T1.TOATL_EXIT,T1.TOATL_RECYCLE,T1.TOATL_VALUE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_AGM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_AGM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_AGM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
     
     --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY - T2.TOTAL_ENTRY,T1.TOTAL_EXIT - T2.TOTAL_EXIT,T1.TOTAL_VALUE - T2.TOTAL_VALUE,
     				T1.TOTAL_RECYCLE - T2.TOTAL_RECYCLE,T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_ENTRY,TOTAL_EXIT,TOTAL_VALUE,TOTAL_RECYCLE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_AGM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
    
     
    --TBL_BATCH_RG_AGM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							IN_COUNT,OUT_COUNT,OUT_AMOUNT,RECYCLE_COUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_ENTRY,T1.TOTAL_EXIT,T1.TOTAL_VALUE,T1.TOTAL_RECYCLE,T1.TOTAL_LOCK
     FROM TBL_BATCH_RG_AGM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_AGM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.AGM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--BOM 寄存器数据统计插入 TBL_BATCH_BOM_RG_MAX
      INSERT INTO TBL_BATCH_RG_BOM_MAX(TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      																TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,
      			 T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,T1.TOTAL_LOCK,
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_BOM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_BOM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_BOM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 
 					   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   
      
       
 
     --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),T1.TICKET_TYPE,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE - T2.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE - T2.TOTAL_VALUE_UPDATE,
     				T1.TOTAL_COUNT_REFUND - T2.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND - T2.TOTAL_VALUE_REFUND,
     				T1.TOTAL_LOCK - T2.TOTAL_LOCK
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      							 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TICKET_TYPE,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_REFUND,TOTAL_VALUE_REFUND,
      						 TOTAL_COUNT_UPDATE,TOTAL_VALUE_UPDATE,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,TOTAL_LOCK
     					FROM TBL_BATCH_RG_BOM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
   AND 		T1.TICKET_TYPE = T2.TICKET_TYPE
   AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  
    --TBL_BATCH_RG_BOM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,UPDATE_COUNT,UPDATE_AMOUNT,REFUND_COUNT,REFUND_AMOUNT,LOCK_COUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),
     				T1.TICKET_TYPE,T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE,
     				T1.TOTAL_COUNT_UPDATE,T1.TOTAL_VALUE_UPDATE,T1.TOTAL_COUNT_REFUND,T1.TOTAL_VALUE_REFUND,T1.TOTAL_LOCK
     FROM  TBL_BATCH_RG_BOM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_BOM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE
  	 AND    T1.TICKET_TYPE IN (SELECT TICKET_TYPE FROM TBL_SS_TICKET);
  	  
 
 			EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.BOM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
        
 		COMMIT;
 		
 		
 		BEGIN
 		--TVM 寄存器数据统计插入 TBL_BATCH_RG_TVM_MAX
      INSERT INTO TBL_BATCH_RG_TVM_MAX(TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      																TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE,
      																REG_TIME,DEVICE_NID,PACKET_SEQ,SETTLE_DATE)    
      SELECT T1.REGISTER0,T1.REGISTER1,T1.REGISTER2,T1.REGISTER3,
      			 T1.REGISTER4,T1.REGISTER5,T1.REGISTER30,T1.REGISTER31, 
      			 T2.REG_TIME,T2.DEVICE_NID,T2.PACKET_SEQ,BATCH_DATE
      FROM TBL_RG_TVM_ACCU T1,						
						(
							SELECT X1.PACKET_SEQ,X1.REG_TIME,X1.DEVICE_NID
      	       FROM  TBL_RG_TVM X1 ,
      	       			(
      	       					SELECT MAX(REG_TIME) REG_TIME,DEVICE_NID 
										    FROM  TBL_RG_TVM
										    WHERE  SETTLE_DATE = BATCH_DATE
										    GROUP BY DEVICE_NID
      	       			
      	       			) X2
      	       WHERE  X1.SETTLE_DATE = BATCH_DATE 
      	       AND    X1.REG_TIME    = X2.REG_TIME
      	       AND    X1.DEVICE_NID  = X2.DEVICE_NID 				   	      
						) T2					
      WHERE T1.PACKET_SEQ = T2.PACKET_SEQ;   


     --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天有寄存器数据时) TVM票卡类型为0
     INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE - T2.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE - T2.TOTAL_VALUE_SALE,
     				T1.TOTAL_COUNT_COIN - T2.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN - T2.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH - T2.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH - T2.TOTAL_VALUE_CASH,
     				T1.TOTAL_COUNT_CHARGE - T2.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE - T2.TOTAL_VALUE_CHARGE
     FROM 
     			(
     					SELECT REG_TIME,DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      							 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  BATCH_DATE
     			) T1 ,    			
     			(
     				SELECT DEVICE_NID,TOTAL_COUNT_SALE,TOTAL_VALUE_SALE,TOTAL_COUNT_COIN,TOTAL_VALUE_COIN,
      						 TOTAL_COUNT_CASH,TOTAL_VALUE_CASH,TOTAL_COUNT_CHARGE,TOTAL_VALUE_CHARGE
     					FROM TBL_BATCH_RG_TVM_MAX
     					WHERE SETTLE_DATE =  TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd')
     			) T2
   WHERE  T1.DEVICE_NID = T2.DEVICE_NID
   AND 		T1.DEVICE_NID  IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'));
   
  
  
    --TBL_BATCH_RG_TVM_MAX 插入 TBL_BATCH_AUDIT_DEVICE   --(前一天没有寄存器数据时)TVM票卡类型为0
      INSERT INTO TBL_BATCH_AUDIT_DEVICE(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,TICKET_TYPE,
     							SALE_COUNT,SALE_AMOUNT,LOAD_COUNT,LOAD_AMOUNT,COIN_COUNT,COIN_AMOUNT,CASH_COUNT,CASH_AMOUNT)
     SELECT CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 3, 2)),BATCH_DATE,to_char(T1.REG_TIME -  CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd'),
     				SUBSTR(T1.DEVICE_NID,3,4),T1.DEVICE_NID,CCDB_LIB.F_SYS_HEX2DEC(substr(T1.DEVICE_NID, 1, 2)),0,
     				T1.TOTAL_COUNT_SALE,T1.TOTAL_VALUE_SALE,T1.TOTAL_COUNT_COIN,T1.TOTAL_VALUE_COIN,
     				T1.TOTAL_COUNT_CASH,T1.TOTAL_VALUE_CASH,T1.TOTAL_COUNT_CHARGE,T1.TOTAL_VALUE_CHARGE
     FROM  TBL_BATCH_RG_TVM_MAX T1  
  	 WHERE  T1.DEVICE_NID NOT IN (SELECT DEVICE_NID FROM TBL_BATCH_RG_TVM_MAX WHERE SETTLE_DATE = TO_CHAR((TO_DATE(BATCH_DATE,'yyyyMMdd') - 1),'yyyyMMdd'))
  	 AND   	T1.SETTLE_DATE = BATCH_DATE;
  
  EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE.TVM',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
 END;
        
 		COMMIT;
 		
 		EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.DEVICE',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    COMMIT;
    

 
    --ACC上传数据审计
    BEGIN
    
    TRUNCATE TABLE TBL_AD_ACC_BATCH immediate;
    DELETE FROM TBL_AD_ACC_BATCH_HIS WHERE SETTLE_DATE = BATCH_DATE; 
   
    INSERT INTO TBL_AD_ACC_BATCH(FILE_TYPE,FILE_CODE)
    SELECT   CCDB_LIB.F_SYS_DEC2HEX(CODE_VALUE),CODE_VALUE 
    FROM T_SS_CODE_DESC
    WHERE CODE_TYPE= 'FILE_TYPE';
     
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     					SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SJT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						)
  	   
     		   )
     		WHERE FILE_TYPE = '2001';
     		
     UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(
     			SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_SVT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2005';
                 
    UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_YKT_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2006';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_PBOC_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2007';
     		
     		 UPDATE  TBL_AD_ACC_BATCH 
     		SET MLC_COUNT  = 
     			(	
     		SELECT SUM(SUM_COUNT)
     					FROM (		
     									SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_TEMP
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		  					  UNION 
     		  					  SELECT NVL(COUNT(*),0) SUM_COUNT     			
     									FROM TBL_TR_QR_ERROR
     		 						  WHERE   SETTLE_DATE = BATCH_DATE
     		 						) 
     		   )
     		WHERE FILE_TYPE = '2008';
     		
     		
     		UPDATE  TBL_AD_ACC_BATCH CH
     		SET ACC_COUNT  = 
     			(	SELECT NVL(SUM(FILE_RECORDS),0) 
     				FROM T_PKG_LCC_FTP_TRANS_FILE
     				WHERE   to_char(FILE_UPLOAD_TIME - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),
                 'yyyyMMdd') = BATCH_DATE
       			 AND FILE_UPLOAD_FLAG = 1
        		 AND SUBSTR(FILE_NAME,1,4) = CH.FILE_TYPE
     		   );
 
        
        INSERT INTO TBL_AD_ACC_BATCH_HIS(FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,SETTLE_DATE) 
        SELECT FILE_TYPE,FILE_CODE,MLC_COUNT,ACC_COUNT,BATCH_DATE
        FROM TBL_AD_ACC_BATCH;

   
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ACC',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    --处理错误数据
    BEGIN
        
    DELETE FROM TBL_BATCH_TRANSTYPE_DAY_ERROR WHERE SETTLE_DATE = BATCH_DATE; 
    
    --单程票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SJT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_sjt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   --储值票错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_SVT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_svt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --一卡通错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_YKT,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_ykt_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --二维码错误数据处理
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_QR,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_qr_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
   
   
    --银行卡错误数据处理 
    INSERT INTO TBL_BATCH_TRANSTYPE_DAY_ERROR(LINE_NID,SETTLE_DATE,TRANS_DATE,STATION_NID,DEVICE_NID,DEVICE_TYPE,
    					TICKET_CATEGORY,TICKET_TYPE,TRANS_TYPE,PAYMENT_METHOD,
    					TRANS_COUNT,TRANS_AMOUNT,TRANS_FEE,DEPOSIT)
    SELECT to_number(substr(station_nid,3,2)),settle_date, trans_date, station_nid, device_nid, CCDB_LIB.F_SYS_HEX2DEC(substr(device_nid,1, 2)),
           CCDB_STD.C_TC_PBOC,ticket_type,trans_type,  payment_method,
           COUNT(*),  nvl(SUM(value_trans), 0), nvl(SUM(trans_fee), 0) trans_fee,  nvl(SUM(deposit), 0) deposit
    FROM 
    		 (
    					SELECT  settle_date,
                      to_char(trans_time - CCDB_STD.C_REPORT_TIME * 15 / (24 * 60),'yyyyMMdd') trans_date, 
                      station_nid, device_nid,
                      ticket_type, 
                      trans_type,
                      trans_value  value_trans,
                      payment_method,  
                      0 trans_fee, 0 deposit
                 FROM tbl_tr_pboc_error
                WHERE settle_date = batch_date
           )
      GROUP BY settle_date, trans_date, station_nid, device_nid, ticket_type,
               trans_type, payment_method;
                       
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        IF (CCDB_STD.DEBUG__) THEN
          dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
        ELSE
        errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
          CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD.ERROR',
                                CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
        END IF;
    END;
    
    
    
    
    end_time := SYSDATE;
  
    elapsed_time := (end_time - start_time) * 86400;
    CCDB_LIB.IF_DB_LOG_UPDATE(rid, elapsed_time);
    
    COMMIT;
    
 
    
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      errmsg := 'SQLCODE:'||SQLCODE||';SQLSTATE:'||SQLSTATE||';Msg:'||SQLERRM(SQLCODE);
      IF (CCDB_STD.DEBUG__) THEN
        dbms_output.put_line('ERR:' || SQLERRM(SQLCODE));
      ELSE        
        CCDB_LIB.IP_BATCH_LOG('P_BATCH_AD',
                              CCDB_STD.LEVEL_LOG_FERR, errmsg, CCDB_STD.DEST_BOTH);
      END IF;
  END;;

GRANT CONTROL ON TABLE "SCDB    "."T_SS_CODE_DESC" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_SS_CODE_DESC" TO USER "SCDB    ";


-- SCDB.T_SS_DEVICE_TYPE definition

CREATE TABLE "SCDB    "."T_SS_DEVICE_TYPE"  (
		  "DEVICE_TYPE" VARCHAR(2) , 
		  "TYPE_NAME_CN" VARCHAR(32) , 
		  "TYPE_NAME_EN" VARCHAR(50) )   
		 IN "TBSCCDBADMIN" INDEX IN "TBSCCDBINDEX"  
		 ORGANIZE BY ROW;

GRANT CONTROL ON TABLE "SCDB    "."T_SS_DEVICE_TYPE" TO USER "SCDB    ";


-- SCDB.T_SUPPERUSER definition

CREATE TABLE "SCDB    "."T_SUPPERUSER"  (
		  "OPERATOR_NBR" DECIMAL(8,0) NOT NULL , 
		  "OPERATOR_PASSWORD" DECIMAL(4,0) NOT NULL )   
		 IN "TBSCCDBAUDIT" INDEX IN "TBSCCDBAUDIDX"  
		 ORGANIZE BY ROW;

ALTER TABLE "SCDB    "."T_SUPPERUSER" 
	ADD CONSTRAINT "PK_T_SUPPERUSER" PRIMARY KEY
		("OPERATOR_NBR");

GRANT CONTROL ON TABLE "SCDB    "."T_SUPPERUSER" TO USER "SCDB    ";

GRANT CONTROL ON INDEX "SCDB    "."PK_T_SUPPERUSER" TO USER "SCDB    ";